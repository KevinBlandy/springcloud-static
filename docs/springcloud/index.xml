<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SpringCloud on</title><link>https://www.springcloud.io/docs/springcloud/</link><description>Recent content in SpringCloud on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://www.springcloud.io/docs/springcloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Cloud Alibaba</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-alibaba/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-alibaba/</guid><description>Spring Cloud Alibaba为分布式应用开发提供了一个一站式解决方案。它包含了开发分布式应用所需的所有组件，使你能够轻松地使用Spring Cloud开发你的应用。
通过Spring Cloud Alibaba，你只需要添加一些注释和少量的配置，就可以将Spring Cloud应用与阿里巴巴的分布式解决方案连接起来，并利用阿里巴巴的中间件建立一个分布式应用系统。
官方仓库 https://github.com/alibaba/spring-cloud-alibaba/wiki
官方各个组件都有十分优秀的中文文档，这里就不翻译了。</description></item><item><title>Spring Cloud Bus</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-bus/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-bus/</guid><description>当前版本：3.0.2 修改时间：2021年7月22日 官方文档：https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-bus Spring Cloud Bus将分布式系统的节点与一个轻量级的消息代理联系起来。然后，这可以用来广播状态变化（如配置变化）或其他管理指令。该项目包括AMQP和Kafka代理的实现。另外，在classpath上找到的任何Spring Cloud Stream绑定器都可以作为传输工具开箱即用。
1. 快速开始 如果Spring Cloud Bus在classpath上检测到自己，它就会通过添加Spring Boot自动配置来工作。要启用总线，请将spring-cloud-starter-bus-amqp或spring-cloud-starter-bus-kafka添加到您的依赖性管理中。Spring Cloud会处理剩下的事情。确保代理（RabbitMQ或Kafka）是可用的并已配置。当在本地主机上运行时，你不需要做任何事情。如果你远程运行，请使用Spring Cloud Connectors或Spring Boot约定来定义代理凭证，如下面Rabbit的例子所示。
application.yml
spring:rabbitmq:host:mybroker.comport:5672username:userpassword:secret总线目前支持向所有监听的节点或某一特定服务的所有节点发送消息（由Eureka定义）。/bus/*执行器命名空间有一些HTTP端点。目前，有两个已经实现。第一个，/bus/env，发送键/值对以更新每个节点的Spring环境。第二个，/bus/refresh，重新加载每个应用程序的配置，就像它们都被ping到了/refresh端点一样。
Spring Cloud Bus的启动程序涵盖了Rabbit和Kafka，因为这是最常见的两种实现方式。然而，Spring Cloud Stream是相当灵活的，而且该绑定器与spring-cloud-bus一起使用。
2. Actuator 端点 Spring Cloud Bus提供了两个端点，/actuator/busrefresh和/actuator/busenv，分别对应于Spring Cloud Commons中的单个执行器端点/actuator/refresh和/actuator/env。
2.1. Refresh Endpoint /actuator/busrefresh端点清除RefreshScope缓存并重新绑定@ConfigurationProperties。更多信息请参见 Refresh Scope 文档。
为了暴露/actuator/busrefresh端点，你需要向你的应用程序添加以下配置。
management.endpoints.web.exposure.include=busrefresh 2.2. Env Endpoint /actuator/busenv端点用指定的键/值对在多个实例中更新每个实例环境。
为了暴露/actuator/busenv端点，你需要在你的应用程序中添加以下配置。
management.endpoints.web.exposure.include=busenv /actuator/busenv端点接受POST请求，请求体格式如下。
{ &amp;#34;name&amp;#34;: &amp;#34;key1&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;value1&amp;#34; } 3. 对一个实例进行寻址 应用程序的每个实例都有一个服务ID，其值可以用spring.cloud.bus.id来设置，其值预计是一个用冒号分隔的标识符列表，从最不具体到最具体的顺序。默认值从环境中构建，作为spring.application.name和server.port的组合（或spring.application.index，如果设置）。ID的默认值是以app:index:id的形式构建的，其中。
app是vcap.application.name，如果它存在的话，或者是spring.application.name。 index是vcap.application.instance_index，如果它存在的话，spring.application.index，local.server.port，server.port或0（按顺序排列）。 id是vcap.application.instance_id，如果它存在，或者是一个随机值。 HTTP 端点接受一个 &amp;ldquo;destination&amp;rdquo; 路径参数，如/busrefresh/customers:9000，其中目的地是一个服务 ID。如果该ID为总线上的一个实例所拥有，它就会处理该消息，而所有其他实例都会忽略它。</description></item><item><title>Spring Cloud Circuit Breaker</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-circuit-breaker/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-circuit-breaker/</guid><description>当前版本：2.0.2 修改时间：2021年7月22日 官方文档：https://docs.spring.io/spring-cloud-circuitbreaker/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-circuitbreaker Spring Cloud Circuit breaker提供了一个跨越不同断路器实现的抽象。它提供了一个一致的API，可以在你的应用程序中使用，允许你的开发者选择最适合你的应用程序需求的断路器实现。
1. 使用说明 Spring Cloud CircuitBreaker项目包含Resilience4J和Spring Retry的实现。Spring Cloud CircuitBreaker中实现的API在Spring Cloud Commons中存在。这些API的使用文档位于Spring Cloud Commons documentation中。
1.1. 配置Resilience4J断路器 1.1.1. Starters Resilience4J的实现有两个启动器，一个用于reactive应用，一个用于非reactive应用。
org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j - 非reactive应用程序 org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j - reactive应用程序 1.1.2. 自动配置 你可以通过设置spring.cloud.circuitbreaker.resilience4j.enabled为false来禁用Resilience4J自动配置。
1.1.3. 默认配置 为了给所有的断路器提供一个默认的配置，创建一个Customize bean，它被传递给Resilience4JCircuitBreakerFactory或ReactiveResilience4JCircuitBreakerFactory。configureDefault方法可以用来提供一个默认的配置。
@Bean public Customizer&amp;lt;Resilience4JCircuitBreakerFactory&amp;gt; defaultCustomizer() { return factory -&amp;gt; factory.configureDefault(id -&amp;gt; new Resilience4JConfigBuilder(id) .timeLimiterConfig(TimeLimiterConfig.custom().timeoutDuration(Duration.ofSeconds(4)).build()) .circuitBreakerConfig(CircuitBreakerConfig.ofDefaults()) .build()); } Reactive Example
@Bean public Customizer&amp;lt;ReactiveResilience4JCircuitBreakerFactory&amp;gt; defaultCustomizer() { return factory -&amp;gt; factory.configureDefault(id -&amp;gt; new Resilience4JConfigBuilder(id) .</description></item><item><title>Spring Cloud Config</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-config/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-config/</guid><description>当前版本：3.0.4 修改时间：2021年7月23日 官方文档：https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-netflix Spring Cloud Config为分布式系统中的外部化配置提供服务器和客户端支持。有了配置服务器，你就有了一个集中的地方来管理所有环境中的应用程序的外部属性。客户端和服务器上的概念与Spring Environment和PropertySource抽象完全一致，因此它们非常适用于Spring应用程序，但也可用于以任何语言运行的任何应用程序。当一个应用程序通过部署渠道从开发到测试再到生产时，你可以管理这些不同环境之间的配置，并确定应用程序在迁移时拥有运行所需的一切。服务器存储后端的默认实现使用git，因此它可以轻松地支持标签版本的配置环境，以及可用于管理内容的广泛工具。很容易添加其他的实现，并将它们与Spring配置连接起来。
1. 快速开始 这篇快速入门文章介绍了Spring Cloud Config Server的服务器和客户端的使用情况。
首先，启动服务器，如下:
$ cd spring-cloud-config-server $ ../mvnw spring-boot:run 服务器是一个 Spring Boot 应用程序，因此如果您愿意，可以从 IDE 中运行它(主类是 ConfigServerApplication)。
接下来尝试一个客户端，如下所示:
$ curl localhost:8888/foo/development { &amp;#34;name&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;profiles&amp;#34;: [ &amp;#34;development&amp;#34; ] .... &amp;#34;propertySources&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;https://github.com/spring-cloud-samples/config-repo/foo-development.properties&amp;#34;, &amp;#34;source&amp;#34;: { &amp;#34;bar&amp;#34;: &amp;#34;spam&amp;#34;, &amp;#34;foo&amp;#34;: &amp;#34;from foo development&amp;#34; } }, { &amp;#34;name&amp;#34;: &amp;#34;https://github.com/spring-cloud-samples/config-repo/foo.properties&amp;#34;, &amp;#34;source&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;from foo props&amp;#34;, &amp;#34;democonfigclient.message&amp;#34;: &amp;#34;hello spring io&amp;#34; } }, .</description></item><item><title>Spring Cloud Consul</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-consul/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-consul/</guid><description>当前版本：3.0.3 修改时间：2021年7月23日 官方文档：https://docs.spring.io/spring-cloud-consul/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-consul 该项目通过自动配置和与Spring环境及其他Spring编程模型习语的绑定，为Spring Boot应用程序提供Consul集成。通过一些简单的注解，你可以在你的应用程序中快速启用和配置常见的模式，并使用基于Consul的组件构建大型分布式系统。提供的模式包括服务发现、控制总线和配置。通过与其他Spring Cloud项目的集成，提供了智能路由和客户端负载平衡、断路器。
1. 快速开始 这篇快速入门指南介绍了如何使用Spring Cloud Consul进行服务发现和分布式配置。
首先，在你的机器上运行Consul Agent。然后你就可以访问它，并将其作为Spring Cloud Consul的服务注册和配置源。
1.1. 服务发现 要在应用程序中使用这些功能，你可以将其构建为一个依赖spring-cloud-consul-core的Spring Boot应用程序。添加依赖的最方便方式是使用Spring Boot启动器：org.springframework.cloud:spring-cloud-starter-consul-discovery。我们建议使用依赖性管理和spring-boot-starter-parent。
下面的例子显示了一个典型的Maven配置。
pom.xml
&amp;lt;project&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{spring-boot-version}&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-consul-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;/project&amp;gt; 下面的例子显示了一个典型的Gradle设置。</description></item><item><title>Spring Cloud Gateway</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-gateway/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-gateway/</guid><description>当前版本：3.0.3 修改时间：2021年7月23日 官方文档：https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-gateway 这个项目提供了一个建立在Spring生态系统之上的API网关，包括。Spring 5、Spring Boot 2和Project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到API，并提供跨领域的关注，如：安全、监控/指标和弹性。
1. 添加Spring Cloud Gateway 要在你的项目中包含Spring Cloud Gateway，请使用grup ID为org.springframework.cloud和artifact ID为spring-cloud-starter-gateway的starter。请参阅Spring Cloud项目页面，了解关于使用当前Spring Cloud发布列车设置构建系统的详细信息。
如果你包含了starter，但你不希望启用网关，请设置spring.cloud.gateway.enabled=false。
Spring Cloud Gateway建立在Spring Boot 2.x、Spring WebFlux和Project Reactor之上。因此，你所熟悉的许多同步库（例如Spring Data和Spring Security）和模式在你使用Spring Cloud Gateway时可能不适用。如果你不熟悉这些项目，我们建议你在使用Spring Cloud Gateway之前先阅读它们的文档，熟悉一些新的概念。
Spring Cloud Gateway需要Spring Boot和Spring Webflux提供的Netty运行时间。它不能在传统的Servlet容器中工作，也不能以WAR的形式构建。
2. 术语表 Route。网关的基本构造块。它由一个ID、一个目的地URI、一个谓词集合和一个过滤器集合定义。如果集合谓词为真，则路由被匹配。 Predicate。这是一个Java 8 Function Predicate。输入类型是一个Spring Framework ServerWebExchange。这让你可以匹配HTTP请求中的任何内容，如头文件或参数。 Filter。这些是GatewayFilter的实例，已经用特定的工厂构建。在这里，你可以在发送下游请求之前或之后修改请求和响应。 3. 它是如何工作的 下图提供了一个关于Spring Cloud Gateway如何工作的高层次概述。
客户端向Spring Cloud Gateway发出请求。如果Gateway处理程序映射确定一个请求与路由相匹配，它将被发送到Gateway Web处理程序。这个处理程序通过一个特定于该请求的过滤器链来运行该请求。过滤器被虚线划分的原因是，过滤器可以在代理请求发送之前和之后运行逻辑。所有的 &amp;ldquo;pre&amp;quot;过滤器逻辑都被执行。然后发出代理请求。在代理请求发出后，&amp;ldquo;post&amp;quot;过滤器逻辑被运行。
在路由中定义的没有端口的URI，其HTTP和HTTPS URI的默认端口值分别为80和443。</description></item><item><title>Spring Cloud Kubernetes</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-kubernetes/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-kubernetes/</guid><description>当前版本：2.0.3 修改时间：2021年7月24日 官方文档：https://docs.spring.io/spring-cloud-kubernetes/docs/current/reference/html/ 源码仓库：https://github.com/spring-projects/spring-cloud 1. 为什么需要Spring Cloud Kubernetes？ Spring Cloud Kubernetes提供了众所周知的Spring Cloud接口的实现，允许开发者在Kubernetes上构建和运行Spring Cloud应用。虽然这个项目在构建云原生应用时可能对你有用，但它也不是在Kubernetes上部署Spring Boot应用的必要条件。如果你刚刚开始在Kubernetes上运行你的Spring Boot应用，你只需要一个基本的Spring Boot应用和Kubernetes本身就可以完成很多事情。要想了解更多，你可以通过阅读Spring Boot部署到Kubernetes的参考文档，以及通过研讨会材料Spring和Kubernetes来开始。
2. Starters Starters是方便的依赖性描述符，你可以在你的应用程序中包含它。包括一个starter，以获得功能集的依赖性和Spring Boot自动配置。以spring-cloud-starter-kubernetes-fabric8开头的启动器提供了使用Fabric8 Kubernetes Java Client的实现。以spring-cloud-starter-kubernetes-client开头的启动器提供了使用Kubernetes Java Client的实现。
2.1. 服务发实 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-fabric8&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-client&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Discovery Client实现，将服务名称解析为Kubernetes服务。
2.2. 配置中心 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-fabric8-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-client-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 从KubernetesConfigMaps和Secrets加载应用属性。当ConfigMap或Secret发生变化时，重新加载应用程序属性。
2.3. 所有Spring Cloud Kubernetes功能。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-fabric8-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-kubernetes-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 3. 用于Kubernetes的DiscoveryClient 该项目为Kubernetes提供了Discovery Client的实现。这个客户端可以让你按名称查询Kubernetes端点（见services）。服务通常由Kubernetes API服务器公开，作为代表 http 和 https 地址的端点的集合，客户端可以从作为pod运行的Spring Boot应用程序中访问。</description></item><item><title>Spring Cloud Netflix</title><link>https://www.springcloud.io/docs/springcloud/spring-cloud-netflix/</link><pubDate>Thu, 12 Nov 2020 13:26:54 +0100</pubDate><guid>https://www.springcloud.io/docs/springcloud/spring-cloud-netflix/</guid><description>当前版本：3.0.3 修改时间：2021年7月22日 官方文档：https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/ 源码仓库：https://github.com/spring-cloud/spring-cloud-netflix Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过实战考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。
1. 服务发现：Eureka Clinet 服务发现是基于微服务的体系结构的关键原则之一。尝试手动配置每个客户端或某种形式的约定可能很困难，而且可能易挂。Netflix的服务发现器和客户端Eureka，可以将服务器配置和部署为高可用性，每个服务器都可以将已注册服务的状态复制给其他服务器。
1.1. 如何引入Eureka Client 要在项目中包含Eureaka Client，请使用start中gruop ID为org.springframework.cloud和artifact ID为spring-cloud-starter-netflix-eureka-client的包，有关使用Spring cloud设置构建系统的详细信息，请参阅Spring Cloud Project 页面。
1.2. 向Eureka注册服务 当客户端向Eureka注册时，它会提供关于自身的元数据，例如主机、端口、健康状态URl、主页和其他详细信息。Eureka接收来自属于某个服务的每个实例的心跳消息。如果在可配置的时间内检测心跳失败，实例客户端通常会从注册中心删除。
下面的例子展示了一个最小的Eureka客户端应用程序:
@SpringBootApplication @RestController public class Application { @RequestMapping(&amp;#34;/&amp;#34;) public String home() { return &amp;#34;Hello world&amp;#34;; } public static void main(String[] args) { new SpringApplicationBuilder(Application.class).web(true).run(args); } } 注意，上面的示例只是一个普通的Spring Boot应用程序。通过包管理文件引入spring-cloud-starter-netflix-Eureka-client依赖，你的应用程序将自动注册到Eureka Server。定位 Eureka服务器需要配置，如下面的例子所示:
application.yml
eureka:client:serviceUrl:defaultZone:http://localhost:8761/eureka/在前面的示例中，defaultZone 是一个缺省字符串回调值，它为任何不填写注册中心地址的客户端提供一个默认值。(换句话说：不填此项，eureka使用http://localhost:8761/eureka/作为默认地址)
📍 这个defaultZone属性是区分大小写的，并且需要驼峰命令法，因为serviceUrl属性是Map&amp;lt;String, String&amp;gt;。因此，defaultZone属性不遵循常规Spring Boot蛇形命名法约定。
默认的应用程序名称(即服务 ID)、虚拟主机和非安全端口(取自环境)分别为${ spring.</description></item></channel></rss>