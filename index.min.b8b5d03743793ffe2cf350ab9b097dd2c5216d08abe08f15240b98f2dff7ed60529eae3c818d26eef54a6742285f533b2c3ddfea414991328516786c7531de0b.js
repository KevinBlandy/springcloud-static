var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});b.add({id:0,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-alibaba/",title:"Spring Cloud Alibaba",description:"Spring Cloud Alibaba为分布式应用开发提供了一个一站式解决方案。它包含了开发分布式应用所需的所有组件，使你能够轻松地使用Spring Cloud开发你的应用。",content:'\u003cp\u003eSpring Cloud Alibaba为分布式应用开发提供了一个一站式解决方案。它包含了开发分布式应用所需的所有组件，使你能够轻松地使用Spring Cloud开发你的应用。\u003c/p\u003e\n\u003cp\u003e通过Spring Cloud Alibaba，你只需要添加一些注释和少量的配置，就可以将Spring Cloud应用与阿里巴巴的分布式解决方案连接起来，并利用阿里巴巴的中间件建立一个分布式应用系统。\u003c/p\u003e\n\u003ch2 id="官方仓库"\u003e官方仓库\u003c/h2\u003e\n\u003cp\u003e\u003ca href="https://github.com/alibaba/spring-cloud-alibaba/wiki"\u003ehttps://github.com/alibaba/spring-cloud-alibaba/wiki\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e官方各个组件都有十分优秀的中文文档，这里就不翻译了。\u003c/p\u003e\n\u003c/blockquote\u003e\n'}).add({id:1,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-bus/",title:"Spring Cloud Bus",description:"Spring Cloud Bus将分布式系统的节点与一个轻量级的消息代理联系起来。然后，这可以用来广播状态变化（如配置变化）或其他管理指令。该项目包括AMQP和Kafka代理的实现。另外，在classpath上找到的任何Spring Cloud Stream绑定器都可以作为传输工具开箱即用。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：3.0.2\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-bus/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-bus"\u003ehttps://github.com/spring-cloud/spring-cloud-bus\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Bus将分布式系统的节点与一个轻量级的消息代理联系起来。然后，这可以用来广播状态变化（如配置变化）或其他管理指令。该项目包括AMQP和Kafka代理的实现。另外，在classpath上找到的任何Spring Cloud Stream绑定器都可以作为传输工具开箱即用。\u003c/p\u003e\n\u003ch2 id="1-快速开始"\u003e1. 快速开始\u003c/h2\u003e\n\u003cp\u003e如果Spring Cloud Bus在classpath上检测到自己，它就会通过添加Spring Boot自动配置来工作。要启用总线，请将\u003ccode\u003espring-cloud-starter-bus-amqp\u003c/code\u003e或\u003ccode\u003espring-cloud-starter-bus-kafka\u003c/code\u003e添加到您的依赖性管理中。Spring Cloud会处理剩下的事情。确保代理（RabbitMQ或Kafka）是可用的并已配置。当在本地主机上运行时，你不需要做任何事情。如果你远程运行，请使用Spring Cloud Connectors或Spring Boot约定来定义代理凭证，如下面Rabbit的例子所示。\u003c/p\u003e\n\u003cp\u003eapplication.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003erabbitmq\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emybroker.com\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eport\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e5672\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eusername\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003euser\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003epassword\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esecret\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e总线目前支持向所有监听的节点或某一特定服务的所有节点发送消息（由Eureka定义）。\u003ccode\u003e/bus/*\u003c/code\u003e执行器命名空间有一些HTTP端点。目前，有两个已经实现。第一个，\u003ccode\u003e/bus/env\u003c/code\u003e，发送键/值对以更新每个节点的Spring环境。第二个，\u003ccode\u003e/bus/refresh\u003c/code\u003e，重新加载每个应用程序的配置，就像它们都被ping到了\u003ccode\u003e/refresh\u003c/code\u003e端点一样。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpring Cloud Bus的启动程序涵盖了Rabbit和Kafka，因为这是最常见的两种实现方式。然而，Spring Cloud Stream是相当灵活的，而且该绑定器与\u003ccode\u003espring-cloud-bus\u003c/code\u003e一起使用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="2-actuator-端点"\u003e2. Actuator 端点\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Bus提供了两个端点，\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e和\u003ccode\u003e/actuator/busenv\u003c/code\u003e，分别对应于Spring Cloud Commons中的单个执行器端点\u003ccode\u003e/actuator/refresh\u003c/code\u003e和\u003ccode\u003e/actuator/env\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="21-refresh-endpoint"\u003e2.1. Refresh Endpoint\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e端点清除\u003ccode\u003eRefreshScope\u003c/code\u003e缓存并重新绑定\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e。更多信息请参见 \u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/#refresh-scope"\u003eRefresh Scope\u003c/a\u003e 文档。\u003c/p\u003e\n\u003cp\u003e为了暴露\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e端点，你需要向你的应用程序添加以下配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003emanagement.endpoints.web.exposure.include=busrefresh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="22--env-endpoint"\u003e2.2.  Env Endpoint\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点用指定的键/值对在多个实例中更新每个实例环境。\u003c/p\u003e\n\u003cp\u003e为了暴露\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点，你需要在你的应用程序中添加以下配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003emanagement.endpoints.web.exposure.include=busenv\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点接受\u003ccode\u003ePOST\u003c/code\u003e请求，请求体格式如下。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;key1\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;value1\u0026#34;\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="3-对一个实例进行寻址"\u003e3. 对一个实例进行寻址\u003c/h2\u003e\n\u003cp\u003e应用程序的每个实例都有一个服务ID，其值可以用\u003ccode\u003espring.cloud.bus.id\u003c/code\u003e来设置，其值预计是一个用冒号分隔的标识符列表，从最不具体到最具体的顺序。默认值从环境中构建，作为\u003ccode\u003espring.application.name\u003c/code\u003e和\u003ccode\u003eserver.port\u003c/code\u003e的组合（或\u003ccode\u003espring.application.index\u003c/code\u003e，如果设置）。ID的默认值是以\u003ccode\u003eapp:index:id\u003c/code\u003e的形式构建的，其中。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eapp\u003c/code\u003e是\u003ccode\u003evcap.application.name\u003c/code\u003e，如果它存在的话，或者是\u003ccode\u003espring.application.name\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eindex\u003c/code\u003e是\u003ccode\u003evcap.application.instance_index\u003c/code\u003e，如果它存在的话，\u003ccode\u003espring.application.index\u003c/code\u003e，\u003ccode\u003elocal.server.port\u003c/code\u003e，\u003ccode\u003eserver.port\u003c/code\u003e或\u003ccode\u003e0\u003c/code\u003e（按顺序排列）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e是\u003ccode\u003evcap.application.instance_id\u003c/code\u003e，如果它存在，或者是一个随机值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHTTP 端点接受一个 \u0026ldquo;destination\u0026rdquo; 路径参数，如\u003ccode\u003e/busrefresh/customers:9000\u003c/code\u003e，其中\u003ccode\u003e目的地\u003c/code\u003e是一个服务 ID。如果该ID为总线上的一个实例所拥有，它就会处理该消息，而所有其他实例都会忽略它。\u003c/p\u003e\n\u003ch2 id="4-对一个服务的所有实例进行寻址"\u003e4. 对一个服务的所有实例进行寻址\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;destination\u0026quot;参数在Spring的\u003ccode\u003ePathMatcher\u003c/code\u003e中使用（路径分隔符为冒号 - \u003ccode\u003e:\u003c/code\u003e ），以确定一个实例是否处理该消息。使用前面的例子，\u003ccode\u003e/busenv/customers:**\u003c/code\u003e针对 \u0026ldquo;customers \u0026ldquo;服务的所有实例，而不管服务ID的其他部分。\u003c/p\u003e\n\u003ch2 id="5-service-id-必须唯一"\u003e5. Service ID 必须唯一\u003c/h2\u003e\n\u003cp\u003e总线尝试两次来消除对一个事件的处理\u0026ndash;一次来自原始的\u003ccode\u003eApplicationEvent\u003c/code\u003e，一次来自队列。为此，它检查发送的服务ID和当前的服务ID。如果一个服务的多个实例有相同的ID，事件就不会被处理。在本地机器上运行时，每个服务都在一个不同的端口上，该端口是 ID 的一部分。Cloud Foundry 提供了一个索引来进行区分。为确保 ID 在 Cloud Foundry 之外是唯一的，请将 \u003ccode\u003espring.application.index\u003c/code\u003e 设置为服务的每个实例的唯一内容。\u003c/p\u003e\n\u003ch2 id="6-定制消息代理"\u003e6. 定制消息代理\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Bus使用\u003ca href="https://cloud.spring.io/spring-cloud-stream"\u003eSpring Cloud Stream\u003c/a\u003e来广播消息。因此，为了让消息流动起来，你只需要在classpath中包含你选择的绑定器实现。对于使用AMQP（RabbitMQ）和Kafka（\u003ccode\u003espring-cloud-starter-bus-[amqp|kafka]\u003c/code\u003e）的总线，有一些方便的启动器。一般来说，Spring Cloud Stream依靠Spring Boot的自动配置约定来配置中间件。例如，AMQP代理地址可以通过\u003ccode\u003espring.rabbitmq.*\u003c/code\u003e配置属性来改变。Spring Cloud Bus在\u003ccode\u003espring.cloud.bus.*\u003c/code\u003e中拥有少量的本地配置属性（例如，\u003ccode\u003espring.cloud.bus.destination\u003c/code\u003e是用作外部中间件的主题名称）。通常情况下，默认值就足够了。\u003c/p\u003e\n\u003cp\u003e要了解更多关于如何定制消息代理的设置，请查阅Spring Cloud Stream文档。\u003c/p\u003e\n\u003ch2 id="7-追踪总线事件"\u003e7. 追踪总线事件\u003c/h2\u003e\n\u003cp\u003e总线事件（\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e的子类）可以通过设置\u003ccode\u003espring.cloud.bus.trace.enabled=true\u003c/code\u003e来追踪。如果你这样做，Spring Boot \u003ccode\u003eTraceRepository\u003c/code\u003e（如果它存在的话）会显示每个事件的发送情况和每个服务实例的所有acks。下面的例子来自\u003ccode\u003e/trace\u003c/code\u003e端点。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:44.411+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.ack\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;stores:8081\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\u003cspan class="err"\u003e,\u003c/span\u003e\n  \u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:41.864+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.sent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;customers:9000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\u003cspan class="err"\u003e,\u003c/span\u003e\n  \u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:41.862+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.ack\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;customers:9000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e前面的跟踪显示，一个 \u0026ldquo;RefreshRemoteApplicationEvent\u0026quot;从\u003ccode\u003ecustomers:9000\u003c/code\u003e发出，广播到所有服务，并由\u003ccode\u003ecustomers:9000\u003c/code\u003e和\u003ccode\u003estores:8081\u003c/code\u003e接收（acked）。\u003c/p\u003e\n\u003cp\u003e要自己处理ack信号，你可以为\u003ccode\u003eAckRemoteApplicationEvent\u003c/code\u003e和\u003ccode\u003eSentApplicationEvent\u003c/code\u003e类型添加一个\u003ccode\u003e@EventListener\u003c/code\u003e到你的应用程序（并启用跟踪）。另外，你也可以进入\u003ccode\u003eTraceRepository\u003c/code\u003e，从那里挖掘数据。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e任何总线应用都可以跟踪acks。然而，有时候，在一个中央服务中进行这项工作是很有用的，它可以对数据进行更复杂的查询，或者将其转发给专门的追踪服务。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="8-广播自定义事件"\u003e8. 广播自定义事件\u003c/h2\u003e\n\u003cp\u003e总线可以携带任何类型的\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e的事件。默认的传输方式是JSON，反序列化器需要提前知道哪些类型将被使用。要注册一个新的类型，你必须把它放在\u003ccode\u003eorg.springframework.cloud.bus.event\u003c/code\u003e的一个子包中。\u003c/p\u003e\n\u003cp\u003e要自定义事件名称，你可以在你的自定义类上使用\u003ccode\u003e@JsonTypeName\u003c/code\u003e，或者依靠默认策略，即使用类的简单名称。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e生产者和消费者都需要访问该类的定义。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="81-在自定义包中注册事件"\u003e8.1. 在自定义包中注册事件\u003c/h3\u003e\n\u003cp\u003e如果你不能或不想为你的自定义事件使用\u003ccode\u003eorg.springframework.cloud.bus.event\u003c/code\u003e的子包，你必须通过使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e注解指定哪些包来扫描\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e类型的事件。用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e指定的包包括子包。\u003c/p\u003e\n\u003cp\u003e例如，考虑下面的自定义事件，称为\u003ccode\u003eMyEvent\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eMyEvent\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eRemoteApplicationEvent\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以通过以下方式向deserializer注册该事件:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="nd"\u003e@Configuration\u003c/span\u003e\n\u003cspan class="nd"\u003e@RemoteApplicationEventScan\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eBusConfiguration\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果没有指定值，则使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e的类的包被注册。在这个例子中，\u003ccode\u003ecom.acme\u003c/code\u003e是通过使用\u003ccode\u003eBusConfiguration\u003c/code\u003e的包注册的。\u003c/p\u003e\n\u003cp\u003e你也可以通过使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e上的\u003ccode\u003evalue\u003c/code\u003e、\u003ccode\u003ebasePackages\u003c/code\u003e或\u003ccode\u003ebasePackageClasses\u003c/code\u003e属性明确指定要扫描的包，如下例所示。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="nd"\u003e@Configuration\u003c/span\u003e\n\u003cspan class="c1"\u003e//@RemoteApplicationEventScan({\u0026#34;com.acme\u0026#34;, \u0026#34;foo.bar\u0026#34;})\n\u003c/span\u003e\u003cspan class="c1"\u003e//@RemoteApplicationEventScan(basePackages = {\u0026#34;com.acme\u0026#34;, \u0026#34;foo.bar\u0026#34;, \u0026#34;fizz.buzz\u0026#34;})\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e\u003cspan class="nd"\u003e@RemoteApplicationEventScan\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebasePackageClasses\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eBusConfiguration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eBusConfiguration\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所有前面的\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e的例子都是等同的，即通过明确指定\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e上的包来注册\u003ccode\u003ecom.acme\u003c/code\u003e包。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你可以指定多个base packages进行扫描\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="9-配置属性"\u003e9. 配置属性\u003c/h2\u003e\n\u003cp\u003e要查看所有与总线相关的配置属性列表，请查看\u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/appendix.html"\u003e附录页面\u003c/a\u003e。\u003c/p\u003e\n'}).add({id:2,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-circuit-breaker/",title:"Spring Cloud Circuit Breaker",description:"Spring Cloud Circuit breaker提供了一个跨越不同断路器实现的抽象。它提供了一个一致的API，可以在你的应用程序中使用，允许你的开发者选择最适合你的应用程序需求的断路器实现。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：2.0.2\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-circuitbreaker/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-circuitbreaker/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-circuitbreaker"\u003ehttps://github.com/spring-cloud/spring-cloud-circuitbreaker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Circuit breaker提供了一个跨越不同断路器实现的抽象。它提供了一个一致的API，可以在你的应用程序中使用，允许你的开发者选择最适合你的应用程序需求的断路器实现。\u003c/p\u003e\n\u003ch2 id="1-使用说明"\u003e1. 使用说明\u003c/h2\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker项目包含Resilience4J和Spring Retry的实现。Spring Cloud CircuitBreaker中实现的API在Spring Cloud Commons中存在。这些API的使用文档位于\u003ca href="https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-circuit-breaker"\u003eSpring Cloud Commons documentation\u003c/a\u003e中。\u003c/p\u003e\n\u003ch3 id="11-配置resilience4j断路器"\u003e1.1. 配置Resilience4J断路器\u003c/h3\u003e\n\u003ch4 id="111-starters"\u003e1.1.1. Starters\u003c/h4\u003e\n\u003cp\u003eResilience4J的实现有两个启动器，一个用于reactive应用，一个用于非reactive应用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j\u003c/code\u003e - 非reactive应用程序\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j\u003c/code\u003e - reactive应用程序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="112-自动配置"\u003e1.1.2. 自动配置\u003c/h4\u003e\n\u003cp\u003e你可以通过设置\u003ccode\u003espring.cloud.circuitbreaker.resilience4j.enabled\u003c/code\u003e为\u003ccode\u003efalse\u003c/code\u003e来禁用Resilience4J自动配置。\u003c/p\u003e\n\u003ch4 id="113-默认配置"\u003e1.1.3. 默认配置\u003c/h4\u003e\n\u003cp\u003e为了给所有的断路器提供一个默认的配置，创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，它被传递给\u003ccode\u003eResilience4JCircuitBreakerFactory\u003c/code\u003e或\u003ccode\u003eReactiveResilience4JCircuitBreakerFactory\u003c/code\u003e。\u003ccode\u003econfigureDefault\u003c/code\u003e方法可以用来提供一个默认的配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4JConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eReactive Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eReactiveResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4JConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="114-具体的断路器配置"\u003e1.1.4. 具体的断路器配置\u003c/h4\u003e\n\u003cp\u003e与提供默认配置类似，你可以创建一个\u003ccode\u003eCustomize\u003c/code\u003e Bean，它被传递给一个 \u003ccode\u003eResilience4JCircuitBreakerFactory\u003c/code\u003e 或 \u003ccode\u003eReactiveResilience4JCircuitBreakerFactory\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e2\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的断路器外，你还可以在断路器被创建后但被返回给调用者之前对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddCircuitBreakerCustomizer\u003c/code\u003e方法。这对于向Resilience4J断路器添加事件处理程序很有用。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddCircuitBreakerCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n    \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxErrorConsumer\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eonSuccess\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxSuccessConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;normalflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eReactive Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eReactiveResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e2\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddCircuitBreakerCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxErrorConsumer\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eonSuccess\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxSuccessConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;normalflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n     \u003cspan class="o"\u003e};\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="115-断路器属性配置"\u003e1.1.5. 断路器属性配置\u003c/h4\u003e\n\u003cp\u003e你可以在你的应用程序的配置属性文件中配置\u003ccode\u003eCircuitBreaker\u003c/code\u003e和\u003ccode\u003eTimeLimiter\u003c/code\u003e实例。属性配置比Java\u003ccode\u003eCustomizer\u003c/code\u003e配置具有更高的优先级。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003eresilience4j.circuitbreaker\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eregisterHealthIndicator\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e100\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eregisterHealthIndicator\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003epermittedNumberOfCallsInHalfOpenState\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowType\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eTIME_BASED\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003erecordFailurePredicate\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eio.github.robwin.exception.RecordFailurePredicate\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eresilience4j.timelimiter\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e2s\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003ecancelRunningFuture\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e1s\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003ecancelRunningFuture\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于Resilience4j属性配置的更多信息，见\u003ca href="https://resilience4j.readme.io/docs/getting-started-3#configuration"\u003eResilience4J Spring Boot 2配置\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id="116-隔离模式支持"\u003e1.1.6. 隔离模式支持\u003c/h4\u003e\n\u003cp\u003e如果\u003ccode\u003eresilience4j-bulkhead\u003c/code\u003e在classpath上，Spring Cloud CircuitBreaker将用Resilience4j Bulkhead来包装所有方法。你可以通过设置\u003ccode\u003espring.cluitbreaker.bulkhead.resilience4j.enabled\u003c/code\u003e为\u003ccode\u003efalse\u003c/code\u003e来禁用Resilience4j Bulkhead。\u003c/p\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker Resilience4j提供两种隔离模式的实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSemaphoreBulkhead\u003c/code\u003e，使用Semaphores。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFixedThreadPoolBulkhead\u003c/code\u003e，它使用一个有界队列和一个固定的线程池。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e默认情况下，Spring Cloud CircuitBreaker Resilience4j使用\u003ccode\u003eFixedThreadPoolBulkhead\u003c/code\u003e。更多关于实现Bulkhead模式的信息请参见\u003ca href="https://resilience4j.readme.io/docs/bulkhead"\u003eResilience4j Bulkhead\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eCustomizer\u0026lt;Resilience4jBulkheadProvider\u0026gt;\u003c/code\u003e可以用来提供默认的\u003ccode\u003eBulkhead\u003c/code\u003e和\u003ccode\u003eThreadPoolBulkhead\u003c/code\u003e配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4jBulkheadConfigurationBuilder\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eThreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003ecoreThreadPoolSize\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003emaxThreadPoolSize\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="117-具体的隔离配置"\u003e1.1.7. 具体的隔离配置\u003c/h4\u003e\n\u003cp\u003e与证明默认的\u0026rsquo;Bulkhead\u0026rsquo;或\u0026rsquo;ThreadPoolBulkhead\u0026rsquo;配置类似，你可以创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，这个bean被传递给\u003ccode\u003eResilience4jBulkheadProvider\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowBulkheadProviderCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eThreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的隔板外，你还可以在隔板和线程池被创建后，但在返回给调用者之前，对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddBulkheadCustomizer\u003c/code\u003e和\u003ccode\u003eaddThreadPoolBulkheadCustomizer\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003eBulkhead Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003ecustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebulkhead\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebulkhead\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallRejected\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowRejectedConsumer\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallFinished\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowFinishedConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThread Pool Bulkhead Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowThreadPoolBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddThreadPoolBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ethreadPoolBulkhead\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ethreadPoolBulkhead\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallRejected\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowThreadPoolRejectedConsumer\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallFinished\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowThreadPoolFinishedConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowThreadPoolBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="118-隔板属性配置"\u003e1.1.8. 隔板属性配置\u003c/h4\u003e\n\u003cp\u003e你可以在你的应用程序的配置属性文件中配置 ThreadPoolBulkhead 和 SemaphoreBulkhead 实例。属性配置比Java\u003ccode\u003eCustomizer\u003c/code\u003e配置具有更高的优先级。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003eresilience4j.thread-pool-bulkhead\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emaxThreadPoolSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ecoreThreadPoolSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eresilience4j.bulkhead\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于Resilience4j属性配置的更多信息，见\u003ca href="https://resilience4j.readme.io/docs/getting-started-3#configuration"\u003eResilience4J Spring Boot 2配置\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id="119-collecting-metrics"\u003e1.1.9. Collecting Metrics\u003c/h4\u003e\n\u003cp\u003eSpring Cloud Circuit Breaker Resilience4j包含自动配置功能，只要classpath上有正确的依赖项，就可以设置度量衡收集。要启用指标收集，你必须包括\u003ccode\u003eorg.springframework.boot:spring-boot-starter-actuator\u003c/code\u003e，和\u003ccode\u003eio.github.resilience4j:resilience4j-micrometer\u003c/code\u003e。关于存在这些依赖关系时产生的指标的更多信息，请参阅\u003ca href="https://resilience4j.readme.io/docs/micrometer"\u003eResilience4j文档\u003c/a\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你不必直接包括\u003ccode\u003emicrometer-core\u003c/code\u003e，因为它是由\u003ccode\u003espring-boot-starter-actuator\u003c/code\u003e带来的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="12-配置-spring-retry-circuit-breakers"\u003e1.2. 配置 Spring Retry Circuit Breakers\u003c/h3\u003e\n\u003cp\u003eSpring Retry为Spring应用程序提供声明式重试支持。该项目中的一个子集包括实现断路器功能的能力。Spring Retry通过它的\u003ca href="https://github.com/spring-projects/spring-retry/blob/master/src/main/java/org/springframework/retry/policy/CircuitBreakerRetryPolicy.java"\u003e\u003ccode\u003eCircuitBreakerRetryPolicy\u003c/code\u003e\u003c/a\u003e和\u003ca href="https://github.com/spring-projects/spring-retry#stateful-retry"\u003estateful retry\u003c/a\u003e的组合来提供断路器实现。所有使用Spring Retry创建的断路器将使用\u003ccode\u003eCircuitBreakerRetryPolicy\u003c/code\u003e和一个\u003ca href="https://github.com/spring-projects/spring-retry/blob/master/src/main/java/org/springframework/retry/support/DefaultRetryState.java"\u003e\u003ccode\u003eDefaultRetryState\u003c/code\u003e\u003c/a\u003e。这两个类都可以使用\u003ccode\u003eSpringRetryConfigBuilder\u003c/code\u003e进行配置。\u003c/p\u003e\n\u003ch4 id="121-默认配置"\u003e1.2.1. 默认配置\u003c/h4\u003e\n\u003cp\u003e为了给所有的断路器提供一个默认的配置，创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，它被传递给一个\u003ccode\u003eSpringRetryCircuitBreakerFactory\u003c/code\u003e。\u003ccode\u003econfigureDefault\u003c/code\u003e方法可以用来提供一个默认的配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringRetryConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eretryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eTimeoutRetryPolicy\u003c/span\u003e\u003cspan class="o"\u003e()).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="122-具体的断路器配置"\u003e1.2.2. 具体的断路器配置\u003c/h4\u003e\n\u003cp\u003e与提供默认配置类似，你可以创建一个 \u003ccode\u003eCustomize\u003c/code\u003e Bean，它被传递给一个 \u003ccode\u003eSpringRetryCircuitBreakerFactory\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eretryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSimpleRetryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e(),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的断路器外，你还可以在断路器被创建后但被返回给调用者之前对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddRetryTemplateCustomizers\u003c/code\u003e方法。这对于向\u003ccode\u003eRetryTemplate\u003c/code\u003e添加事件处理程序很有用。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddRetryTemplateCustomizers\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eretryTemplate\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eretryTemplate\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eregisterListener\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eRetryListener\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003eboolean\u003c/span\u003e \u003cspan class="nf"\u003eopen\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n            \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003eclose\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e \u003cspan class="n"\u003ethrowable\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e \u003cspan class="n"\u003ethrowable\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n    \u003cspan class="o"\u003e}));\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="2-构建"\u003e2. 构建\u003c/h2\u003e\n\u003ch3 id="21-基本编译和测试"\u003e2.1. 基本编译和测试\u003c/h3\u003e\n\u003cp\u003e要构建源代码，你需要安装JDK 1.8。\u003c/p\u003e\n\u003cp\u003eSpring Cloud使用Maven进行大多数构建相关活动，你可以通过克隆你感兴趣的项目并键入\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-bash" data-lang="bash"\u003e$ ./mvnw install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e您也可以自己安装Maven（\u0026gt;=3.3.3），运行\u003ccode\u003emvn\u003c/code\u003e命令来代替下面例子中的\u003ccode\u003e./mvnw\u003c/code\u003e。如果你这样做，如果你的本地Maven设置不包含spring预发布工件的仓库声明，你可能还需要添加\u003ccode\u003e-P spring\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e请注意，您可能需要通过设置\u003ccode\u003eMAVEN_OPTS\u003c/code\u003e环境变量，如\u003ccode\u003eXmx512m -XX:MaxPermSize=128m\u003c/code\u003e来增加Maven的可用内存量。我们试图在\u003ccode\u003e.mvn\u003c/code\u003e配置中涵盖这一点，所以如果你发现你必须这样做才能使构建成功，请提出一个票据，将设置添加到源控制中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e关于如何构建项目的提示，请看\u003ccode\u003e.travis.yml\u003c/code\u003e，如果有的话。应该有一个 \u0026ldquo;script\u0026rdquo;，也许还有 \u0026ldquo;install\u0026quot;命令。也可以看看 \u0026ldquo;services\u0026quot;部分，看看是否有任何服务需要在本地运行（例如mongo或rabbit）。忽略你可能在 \u0026ldquo;before_install\u0026quot;中发现的与git有关的部分，因为它们与设置git证书有关，而你已经有了这些证书。\u003c/p\u003e\n\u003cp\u003e需要中间件的项目通常包括\u003ccode\u003edocker-compose.yml\u003c/code\u003e，所以考虑使用\u003ca href="https://docs.docker.com/compose/"\u003eDocker Compose\u003c/a\u003e在Docker容器中运行中间件服务器。关于mongo、rabbit和redis的常见情况，请参见\u003ca href="https://github.com/spring-cloud-samples/scripts"\u003escripts demo repository\u003c/a\u003e中的README，以了解具体说明。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果其他都失败了，用\u003ccode\u003e.travis.yml\u003c/code\u003e的命令来构建（通常是\u003ccode\u003e./mvnw install\u003c/code\u003e）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="22-文档"\u003e2.2. 文档\u003c/h3\u003e\n\u003cp\u003espring-cloud-build模块有一个 \u0026ldquo;docs\u0026quot;配置文件，如果你打开它，它将尝试从\u003ccode\u003esrc/main/asciidoc\u003c/code\u003e构建asciidoc源。作为这个过程的一部分，它将寻找 \u0026ldquo;README.adoc\u0026rdquo;，并通过加载所有内容来处理它，但不解析或渲染它，只是将它复制到\u0026rdquo;${main.baseir}\u0026quot;（默认为\u0026rdquo;$/tmp/releaser-1622150702029-0/spring-cloud-circuitbreaker/docs\u0026rdquo;，即项目的根）。如果README有任何改动，在Maven构建后会在正确位置显示为修改过的文件。提交并推送修改内容即可。\u003c/p\u003e\n\u003ch3 id="23-使用代码工作"\u003e2.3. 使用代码工作\u003c/h3\u003e\n\u003cp\u003e如果你没有IDE的偏好，我们建议你在处理代码时使用\u003ca href="https://www.springsource.com/developer/sts"\u003eSpring Tools Suite\u003c/a\u003e或\u003ca href="https://eclipse.org/"\u003eEclipse\u003c/a\u003e。我们使用\u003ca href="https://eclipse.org/m2e/"\u003em2eclipse\u003c/a\u003e eclipse插件来支持maven。其他IDE和工具只要使用Maven 3.3.3或更高版本，也应能顺利工作。\u003c/p\u003e\n\u003ch4 id="231-激活spring-maven配置文件"\u003e2.3.1. 激活Spring Maven配置文件\u003c/h4\u003e\n\u003cp\u003eSpring Cloud项目需要激活 \u0026ldquo;spring\u0026rdquo; Maven配置文件，以解决spring里程碑和快照库的问题。使用你喜欢的IDE将该配置文件设置为激活状态，否则你可能会遇到构建错误。\u003c/p\u003e\n\u003ch4 id="232-用m2eclipse导入到eclipse中"\u003e2.3.2. 用m2eclipse导入到eclipse中\u003c/h4\u003e\n\u003cp\u003e在使用eclipse时，我们推荐\u003ca href="https://eclipse.org/m2e/"\u003em2eclipse\u003c/a\u003e eclipse插件。如果你还没有安装m2eclipse，它可以从 \u0026ldquo;eclipse marketplace\u0026quot;获得。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e旧版本的m2e不支持Maven 3.3，所以一旦项目被导入Eclipse，你还需要告诉m2eclipse为项目使用正确的配置文件。如果你看到项目中与POMs有关的许多不同的错误，请检查你是否有一个最新的安装。如果你不能升级m2e，在你的\u003ccode\u003esettings.xml\u003c/code\u003e中加入 \u0026ldquo;spring \u0026ldquo;配置文件。或者你可以从父pom的 \u0026ldquo;spring \u0026ldquo;配置文件中复制版本库设置到你的\u003ccode\u003esettings.xml\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id="233-在没有m2eclipse的情况下导入到eclipse中"\u003e2.3.3. 在没有m2eclipse的情况下导入到eclipse中\u003c/h4\u003e\n\u003cp\u003e如果你不愿意使用m2eclipse，你可以用以下命令生成eclipse项目元数据。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-bash" data-lang="bash"\u003e$ ./mvnw eclipse:eclipse\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成的eclipse项目可以通过在文件菜单中选择导入现有项目来导入。\u003c/p\u003e\n'}).add({id:3,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-netflix/",title:"Spring Cloud Netflix",description:"Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过实战考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：3.0.3\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix"\u003ehttps://github.com/spring-cloud/spring-cloud-netflix\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过实战考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。\u003c/p\u003e\n\u003ch2 id="1-服务发现eureka客户端"\u003e1 服务发现：Eureka客户端\u003c/h2\u003e\n\u003cp\u003e服务发现是基于微服务的体系结构的关键原则之一。尝试手动配置每个客户端或某种形式的约定可能很困难，而且可能易挂。Netflix的服务发现器和客户端Eureka，可以将服务器配置和部署为高可用性，每个服务器都可以将已注册服务的状态复制给其他服务器。\u003c/p\u003e\n\u003ch3 id="11-如何引入eureka客户端"\u003e1.1 如何引入Eureka客户端\u003c/h3\u003e\n\u003cp\u003e要在项目中包含Eureaka Client，请使用start中gruop ID为\u003ccode\u003eorg.springframework.cloud\u003c/code\u003e和artifact ID为\u003ccode\u003espring-cloud-starter-netflix-eureka-client\u003c/code\u003e的包，有关使用Spring cloud设置构建系统的详细信息，请参阅\u003ca href="https://spring.io/projects/spring-cloud"\u003eSpring Cloud Project\u003c/a\u003e\n页面。\u003c/p\u003e\n\u003ch3 id="12-向eureka注册服务"\u003e1.2 向Eureka注册服务\u003c/h3\u003e\n\u003cp\u003e当客户端向Eureka注册时，它会提供关于自身的元数据，例如主机、端口、健康状态URl、主页和其他详细信息。Eureka接收来自属于某个服务的每个实例的心跳消息。如果在可配置的时间内检测心跳失败，实例客户端通常会从注册中心删除。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了一个最小的Eureka客户端应用程序:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="nd"\u003e@RestController\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@RequestMapping\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;Hello world\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003emain\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e[]\u003c/span\u003e \u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringApplicationBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eApplication\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eweb\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003erun\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，上面的示例只是一个普通的Spring Boot应用程序。通过包管理文件引入\u003ccode\u003espring-cloud-starter-netflix-Eureka-client\u003c/code\u003e依赖，你的应用程序将自动注册到Eureka Server。定位 Eureka服务器需要配置，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:8761/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的示例中，\u003ccode\u003edefaultZone\u003c/code\u003e 是一个缺省字符串回调值，它为任何不填写注册中心地址的客户端提供一个默认值。(换句话说：不填此项，eureka使用http://localhost:8761/eureka/作为默认地址)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e📍 这个\u003ccode\u003edefaultZone\u003c/code\u003e属性是区分大小写的，并且需要驼峰命令法，因为\u003ccode\u003eserviceUrl\u003c/code\u003e属性是\u003ccode\u003eMap\u0026lt;String, String\u0026gt;\u003c/code\u003e。因此，\u003ccode\u003edefaultZone\u003c/code\u003e属性不遵循常规Spring Boot蛇形命名法约定。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e默认的应用程序名称(即服务 ID)、虚拟主机和非安全端口(取自环境)分别为\u003ccode\u003e${ spring.application.name }\u003c/code\u003e、\u003ccode\u003e${ spring.application.name }\u003c/code\u003e和\u003ccode\u003e${ server.port }\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在包管理工具中引入\u003ccode\u003espring-cloud-starter-netflix-Eureka-client\u003c/code\u003e,使得应用程序既成为Eureka示例，也成为客户端（它可以查询注册中心定位其他服务）。实例行为是由\u003ccode\u003eeuraka.instance.*\u003c/code\u003e配置驱动的，但是你要确保你的应用程序配置\u003ccode\u003espring.application.name\u003c/code\u003e值。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有关可配置选项的更多详细信息，请参阅\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix/tree/main/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java"\u003eEurekaInstanceConfigBean\u003c/a\u003e和\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix/tree/main/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java"\u003eEurekaClientConfigBean\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要禁用Eureka发现客户端，你可以将\u003ccode\u003eEureka.Client.enabled\u003c/code\u003e设置为\u003ccode\u003efalse\u003c/code\u003e。当 \u003ccode\u003espring.cloud.Discovery.enabled\u003c/code\u003e设置为\u003ccode\u003efalse\u003c/code\u003e时，Eureka发现客户端也将被禁用。\u003c/p\u003e\n\u003ch3 id="13-在eureka服务端上验证"\u003e1.3 在Eureka服务端上验证\u003c/h3\u003e\n\u003cp\u003e如果\u003ccode\u003eeureka.client.serviceur.defaultzone\u003c/code\u003e的Url中嵌入了凭据(curl样式的，示例：user: password@localhost: 8761/eureka)，HTTP的基本身份验证将自动添加到Eureka客户机中。对于更负载的需求，你可以创建类型为：\u003ccode\u003eDiscoveryClientOptionalArgs\u003c/code\u003e 的\u003ccode\u003e@bean\u003c/code\u003e，并将\u003ccode\u003eClientFilter\u003c/code\u003e实例插入其中，所有这些都应用于从客户机到服务器的调用。\u003c/p\u003e\n\u003cp\u003e当Eureka服务器需要客户端证书进行身份验证时，客户端证书和信任存储可以通过属性进行配置，如下例所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003etls\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eenabled\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;path-of-key-store\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-type\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePKCS12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;key-store-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;key-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;path-of-trust-store\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store-type\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePKCS12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;trust-store-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启用\u003ccode\u003eEureka.client.TLS.enabled \u003c/code\u003e要为true才能启用Eureka客户端的TLS。当省略\u003ccode\u003eeurea.client.tls.trust-store\u003c/code\u003e时，将使用JVM默认信任存储。\u003ccode\u003eEureka.client.tls.key-store-type\u003c/code\u003e和\u003ccode\u003eeureka.client.tls.trust-store-type\u003c/code\u003e的默认值是 PKCS12。如果省略密码属性，则假定为空密码。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于 Eureka 中的限制，不可能支持每个服务器的基本授权凭证，因此只使用找到的第一组凭证。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果你想定制Eureka HTTP客户端使用的\u003ccode\u003eRestTemplate\u003c/code\u003e，你可以创建一个 \u003ccode\u003eEurekaClientHttpRequestFactorySupplier\u003c/code\u003e，并编写自己的逻辑来生成\u003ccode\u003eClientHttpRequestFactory\u003c/code\u003e实例。\u003c/p\u003e\n\u003ch3 id="14-状态页和健康指示器"\u003e1.4 状态页和健康指示器\u003c/h3\u003e\n\u003cp\u003eEureka 实例的状态页面和健康状态指示器分别默认为\u003ccode\u003e/info\u003c/code\u003e 和\u003ccode\u003e/health\u003c/code\u003e，这是Spring Boot Actuator应用程序中有用的端点默认位置。如果使用非默认的上下文路径或servlet路径(比如 server.servletPath =/custom) ，那么即使对于实现的应用程序也需要修改这些路径。下面的示例显示了这两个设置的默认值:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003estatusPageUrlPath\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${server.servletPath}/info\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthCheckUrlPath\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${server.servletPath}/health\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这些链接显示在客户端使用的元数据中，并且在某些场景中用于决定是否向应用程序发送请求，因此如果这些请求是准确的，就很有帮助。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在Dalston(版本名字)中，当更改管理上下文路径时，还需要设置状态和运行状况检查url。这个要求从Edgware开始就被删除了\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="15-注册安全的应用程序"\u003e1.5 注册安全的应用程序\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序希望通过 HTTPS 进行联系，可以在EurekaInstanceConfigBean 中设置两个属性:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEureka.instance.[nonsecurtenabled]=[false]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEureka.instance.[securePortEnabled]=[true]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这样做使Eureka发布的实例信息显示了对安全通信的明确偏好。Spring Cloud \u003ccode\u003eDiscoveryClient\u003c/code\u003e 总是返回一个以 https开头的 URI，用于以这种方式配置的服务。类似地，当以这种方式配置服务时，Eureka (本机)实例信息具有一个安全的健康检查 URL。\u003c/p\u003e\n\u003cp\u003e由于Eureka内部的工作方式，它仍然为状态和主页发布一个不安全的URL，除非你也显式地覆盖这些内容。你可以使用占位符来配置eureka实例 url，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003estatusPageUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/info\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthCheckUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/health\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehomePageUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(注意 \u003ccode\u003e${Eureka.hostname}\u003c/code\u003e是一个本机占位符，只能在 Eureka 的后续版本中使用。对于Spring占位符也可以实现同样的功能ーー例如，使用 \u003ccode\u003e${eureka.instance.hostname}\u003c/code\u003e.)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你的应用程序运行在代理之后，并且SSL终止在代理中(例如，如果你作为服务运行在Cloud Foundry或其他平台上) ，然后，你需要确保“转发”的代理头被应用程序拦截和处理。如果在Spring Boot应用程序中嵌入的Tomcat容器对\u0026rsquo;X-Forwarded-* \u0026lsquo;头有显式配置，这将自动生效。应用程序呈现给自身的链接是错误的(错误的主机、端口或协议)，这是配置错误的标志。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="16-eureka的健康检查"\u003e1.6 Eureka的健康检查\u003c/h3\u003e\n\u003cp\u003e默认情况下，Eureka使用客户端心跳来确定客户端是否启动。除非另行指定，否则发现客户端不会根据Spring Boot执行器传播应用程序的当前运行状况检查状态。因此，在成功注册后，Eureka总是宣布应用程序处于\u003ccode\u003eUP\u003c/code\u003e状态。可以通过启用Eureka运行状况检查来更改此行为，这将导致将应用程序状态传播到Eureka。因此，每个其他应用程序不会向处于\u003ccode\u003eUP\u003c/code\u003e状态以外的应用程序发送流量。下面的示例显示如何为客户端启用运行状况检查。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthcheck\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eenabled\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eeureka.client.healthcheck.enabled=true\u003c/code\u003e应该只在\u003ccode\u003eapplication.yml\u003c/code\u003e中设置。在\u003ccode\u003ebootstrap.yml\u003c/code\u003e中设置这个值会引起不好的副作用。例如在Eureka以\u003ccode\u003eUNKNOWN\u003c/code\u003e状态注册。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果你需要对运行状况检查进行更多的控制，可以考虑实现自己的检查\u003ccode\u003ecom.netflix.appinfo.HealthCheckHandler\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="17-eureka客户端和实例的元数据"\u003e1.7 Eureka客户端和实例的元数据\u003c/h3\u003e\n\u003cp\u003e花点时间了解Eureka元数据是如何工作的是值得的，这样您就可以在您的平台上以一种有意义的方式使用它。对于主机名、IP地址、端口号、状态页和健康检查等信息，有标准的元数据。这些信息发布在服务注册中心中，客户端使用它们以一种简单的方式联系服务。附加的元数据可以添加到实例注册的\u003ccode\u003eeureka.instance.metadataMap\u003c/code\u003e中，该元数据可以在远程客户机中访问。一般来说，附加的元数据不会改变客户机的行为，除非客户机知道元数据的含义。在一些特殊情况下，Spring Cloud已经为元数据映射赋予了意义，本文稍后将对此进行描述。\u003c/p\u003e\n\u003ch4 id="171-在cloud-foundry上使用eureka"\u003e1.7.1 在Cloud Foundry上使用Eureka\u003c/h4\u003e\n\u003cp\u003eCloud Foundry有一个全局路由器，这样同一个应用的所有实例都有相同的主机名(其他具有类似架构的PaaS解决方案也有相同的安排)。这并不一定是使用Eureka的障碍。但是，如果你使用路由器(建议或强制使用，这取决于平台的设置方式)，则需要显式设置主机名和端口号(安全或不安全)，以便它们使用路由器。你可能还希望使用实例元数据，以便能够区分客户机上的实例(例如，在自定义负载平衡器中)。默认情况下，\u003ccode\u003eeureka.instance.instanceId\u003c/code\u003e是\u003ccode\u003evcap.application.Instance_id\u003c/code\u003e，示例如下:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${vcap.application.uris[0]}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003enonSecurePort\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e80\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据在Cloud Foundry实例中设置安全规则的方式，您能够注册并使用主机VM的IP地址来进行直接的服务到服务调用。这个特性在关键的Web服务(PWS)上还不可用。\u003c/p\u003e\n\u003ch3 id="172-在aws上使用eureka"\u003e1.7.2 在AWS上使用Eureka\u003c/h3\u003e\n\u003cp\u003e如果计划将应用部署到AWS云，则必须将Eureka实例配置为AWS感知。你可以通过如下方式定制\u003ccode\u003eEurekaInstanceConfigBean\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="nd"\u003e@Profile\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;!default\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e \u003cspan class="nf"\u003eeurekaInstanceConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eInetUtils\u003c/span\u003e \u003cspan class="n"\u003einetUtils\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e \u003cspan class="n"\u003ebean\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003einetUtils\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="n"\u003eAmazonInfo\u003c/span\u003e \u003cspan class="n"\u003einfo\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eAmazonInfo\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eBuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003enewBuilder\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eautoBuild\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;eureka\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="n"\u003ebean\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003esetDataCenterInfo\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003einfo\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebean\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="173-修改eureka的实例id"\u003e1.7.3 修改Eureka的实例ID\u003c/h3\u003e\n\u003cp\u003e一个普通的Netflix Eureka实例是用一个与它的主机名相等的ID注册的(也就是说，每个主机只有一个服务)。Spring Cloud Eureka提供了一个合理的默认值，定义如下:\n\u003ccode\u003e${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e一个例子是：\u003ccode\u003emyhost:myappname:8080\u003c/code\u003e。\n通过使用Spring Cloud，您可以通过在\u003ccode\u003eeureka.instance.instanceId\u003c/code\u003e中提供唯一的标识符来覆盖这个值。，如下例所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstanceId\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用前面示例中显示的元数据和部署在localhost上的多个服务实例，将插入随机值以使实例唯一。在Cloud Foundry中，\u003ccode\u003evcap.application.instance_id\u003c/code\u003e是在Spring Boot应用程序中自动填充的，因此不需要这个随机值。\u003c/p\u003e\n\u003ch3 id="18-使用eurekaclient"\u003e1.8 使用EurekaClient\u003c/h3\u003e\n\u003cp\u003e一旦你拥有了一个作为发现客户端的应用程序，您就可以使用它从\u003ccode\u003eEureka Server\u003c/code\u003e发现服务实例。一种方法是使用本机\u003ccode\u003ecom.netflix.discovery.EurekaClient\u003c/code\u003e(与Spring Cloud DiscoveryClient相反)，如下面的示例所示。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Autowired\u003c/span\u003e\n\u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eEurekaClient\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003eserviceUrl\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eInstanceInfo\u003c/span\u003e \u003cspan class="n"\u003einstance\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetNextServerFromEureka\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;STORES\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003einstance\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetHomePageUrl\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e不要在\u003ccode\u003e@PostConstruct\u003c/code\u003e方法或\u003ccode\u003e@Scheduled\u003c/code\u003e方法中使用\u003ccode\u003eeurekclient\u003c/code\u003e(或在\u003ccode\u003eApplicationContext\u003c/code\u003e可能还没有启动的任何地方)。它是在\u003ccode\u003eSmartLifecycle\u003c/code\u003e中初始化的(\u003ccode\u003ephase=0\u003c/code\u003e)，所以你最早可以依赖它是在另一个具有更高阶段的\u003ccode\u003eSmartLifecycle\u003c/code\u003e中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id="181-eurekacliet没有jersey"\u003e1.8.1 EurekaCliet没有Jersey\u003c/h4\u003e\n\u003cp\u003e默认情况下，eurekclient使用Spring的\u003ccode\u003eRestTemplate\u003c/code\u003e进行HTTP通信。如果您希望使用Jersey，则需要将Jersey依赖项添加到类路径中。下面的例子显示了你需要添加的包管理文件中:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003e\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-client\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-core\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey.contribs\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-apache-client4\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="19-替代原生netflix-eurakaclient"\u003e1.9 替代原生Netflix EurakaClient\u003c/h3\u003e\n\u003cp\u003e你不需要使用原始的\u003ccode\u003eNetflix eurekclient\u003c/code\u003e。在某种封装后面使用它通常更方便。Spring Cloud通过逻辑的Eureka服务标识符(VIPs)而不是物理url支持\u003ccode\u003eFeign\u003c/code\u003e(一个REST客户端构建器)和\u003ccode\u003eSpring RestTemplate\u003c/code\u003e的远程调用。你还可以使用\u003ccode\u003eorg.springframework.cloud.client.discovery.DiscoveryClient\u003c/code\u003e它为发现客户端提供了一个简单的API(不特定于Netflix)，如下面的示例所示:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Autowired\u003c/span\u003e\n\u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eDiscoveryClient\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003eserviceUrl\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eList\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eServiceInstance\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetInstances\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;STORES\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="k"\u003eif\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003elist\u003c/span\u003e \u003cspan class="o"\u003e!=\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e \u003cspan class="o"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003esize\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003e0\u003c/span\u003e \u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e0\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003egetUri\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="110-为什么注册服务如此缓慢"\u003e1.10 为什么注册服务如此缓慢\u003c/h3\u003e\n\u003cp\u003e作为一个实例还涉及到到注册中心的周期性心跳(通过客户机的serviceUrl)，默认持续时间为30秒。在实例、服务器和客户端本地缓存中都有相同的元数据之前，客户端无法发现服务(因此可能需要3次心跳)。可以通过设置\u003ccode\u003eeureka.instance.leaseRenewalIntervalInSeconds\u003c/code\u003e来修改周期。将其设置为小于30的值将加快使客户端连接到其他服务的过程。在生产中，使用默认值可能更好，因为服务器中的内部计算会对租期续期做出假设。\u003c/p\u003e\n\u003ch3 id="111-zones"\u003e1.11 Zones\u003c/h3\u003e\n\u003cp\u003e如果您已经将Eureka客户端部署到多个区域，您可能希望这些客户端在尝试其他区域中的服务之前先使用相同区域中的服务。要进行设置，需要正确配置Eureka客户端。\n首先，您需要确保将Eureka服务器部署到每个区域，并且它们彼此是对等的。有关更多信息，请参阅区域和地区一节。\u003c/p\u003e\n\u003cp\u003e接下来，你需要告诉Eureka你的服务在哪个区域。可以通过使用\u003ccode\u003emetadatmap\u003c/code\u003e属性来实现。例如，service 1同时部署在zone 1和zone 2，则需要在service 1中设置如下Eureka属性:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eService 1 in Zone 1\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="l"\u003eeureka.instance.metadataMap.zone = zone1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="l"\u003eeureka.client.preferSameZoneEureka = true\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eService 1 in Zone 2\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="l"\u003eeureka.instance.metadataMap.zone = zone2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="l"\u003eeureka.client.preferSameZoneEureka = true\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="112-刷新eureka客户端"\u003e1.12 刷新Eureka客户端\u003c/h3\u003e\n\u003cp\u003e默认情况下，\u003ccode\u003eEurekaClient bean\u003c/code\u003e是可刷新的，这意味着可以更改和刷新Eureka客户机属性。当刷新发生时，客户端将从Eureka服务器注销，并且可能有一段短暂的时间内给定服务的所有实例都不可用。消除这种情况的一种方法是禁用刷新Eureka客户机的功能。设置\u003ccode\u003eeureka.client.refresh.enable=false\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="113-使用springcloud负载均衡的eureka"\u003e1.13 使用SpringCloud负载均衡的Eureka\u003c/h3\u003e\n\u003cp\u003e我们提供对\u003ccode\u003eSpring CLoud LoadBalancer ZonePreferenceServiceInstanceListSupplier\u003c/code\u003e的支持。Eureka实例元数据(Eureka.instance. metadatmap zone)中的zone值用于设置spring-cloud-loadbalancer-zone属性的值，该属性用于按zone过滤服务实例。\u003c/p\u003e\n\u003cp\u003e如果没有这个属性，并且\u003ccode\u003espring.cloud.loadbalancer.eureka.approximateZoneFromHostname\u003c/code\u003e标志被设置为true，那么它可以使用服务器主机名中的域名作为区域的代理。\u003c/p\u003e\n\u003cp\u003e如果没有其他区域数据来源，则基于客户端配置（而不是实例配置）进行猜测。 我们采取\u003ccode\u003eeureka.client.availabilityZones\u003c/code\u003e，它是从区域名称到区域列表的地图，并释放了实例自己的区域的第一个区域（即\u003ccode\u003eeureka.client.region\u003c/code\u003e，默认为\u003ccode\u003eus-east-1\u003c/code\u003e，用于与本机Netflix的兼容性）。\u003c/p\u003e\n\u003ch2 id="2-服务发现eureka服务端"\u003e2 服务发现：Eureka服务端\u003c/h2\u003e\n\u003cp\u003e介绍搭建Eureka服务器的操作步骤。\u003c/p\u003e\n\u003ch3 id="21-如何包含eureka服务端"\u003e2.1 如何包含Eureka服务端\u003c/h3\u003e\n\u003cp\u003e要将\u003ccode\u003eEureka Server\u003c/code\u003e包含到您的项目中，使用gourp ID为\u003ccode\u003eorg.springframework.cloud\u003c/code\u003e和 artifact ID为\u003ccode\u003espring-cloud-start-netflix- Eureka-Server\u003c/code\u003e的启动器。有关使用当前\u003ccode\u003eSpring Cloud Release Train\u003c/code\u003e设置构建系统的详细信息，请参阅Spring Cloud Project页面。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果您的项目已经使用\u003ccode\u003eThymeleaf\u003c/code\u003e作为模板引擎，Eureka服务器的\u003ccode\u003eFreemarker\u003c/code\u003e模板可能无法正确加载。在这种情况下，有必要手动配置模板加载器:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003efreemarker\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003etemplate-loader-path\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eclasspath:/templates/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eprefer-file-system-access\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="22-如何运行eureka服务端"\u003e2.2 如何运行Eureka服务端\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了一个最小的Eureka服务器:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="nd"\u003e@EnableEurekaServer\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003emain\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e[]\u003c/span\u003e \u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringApplicationBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eApplication\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eweb\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003erun\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e服务器具有主页，其中包含UI界面和HTTP API端点，作用与/eureka/*。\u003c/p\u003e\n\u003cp\u003e以下链接有一些Eureka背景知识，\u003ca href="https://github.com/cfregly/fluxcapacitor/wiki/NetflixOSS-FAQ#eureka-service-discovery-load-balancer"\u003eflux capacitor\u003c/a\u003e and \u003ca href="https://groups.google.com/forum/?fromgroups#!topic/eureka_netflix/g3p2r7gHnN0"\u003egoogle group discussion\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e由于Gradle的依赖解析规则和缺少父bom特性，依赖\u003ccode\u003espring-cloud-start-netflix-eureka-server\u003c/code\u003e可能会导致应用启动失败。为了解决这个问题，添加\u003ccode\u003eSpring Boot Gradle\u003c/code\u003e插件，并导入Spring云启动器的父bom如下:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-gradle" data-lang="gradle"\u003e\u003cspan class="n"\u003ebuildscript\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003edependencies\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eclasspath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;org.springframework.boot:spring-boot-gradle-plugin:{spring-boot-docs-version}\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n  \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="n"\u003eapply\u003c/span\u003e \u003cspan class="nl"\u003eplugin:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring-boot\u0026#34;\u003c/span\u003e\n\n\u003cspan class="n"\u003edependencyManagement\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003eimports\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003emavenBom\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;org.springframework.cloud:spring-cloud-dependencies:{spring-cloud-version}\u0026#34;\u003c/span\u003e\n  \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="23-高可用区域和地区"\u003e2.3 高可用，区域和地区\u003c/h3\u003e\n\u003cp\u003eEureka服务器没有后端存储，但是注册中心中的服务实例都必须发送心跳以保持其状态的更新(所以这可以在内存中完成)。客户端也有一个Eureka注册的内存缓存(所以他们不必为每个服务请求都去注册中心)。\n默认情况下，每个Eureka服务器也是一个Eureka客户端，并且需要(至少一个)服务URL来定位对等点。如果你不提供它，服务也会运行并工作，但它会用许多关于无法注册进对等注册中心的信息记录填充你的日志。\u003c/p\u003e\n\u003ch3 id="24-独立模式"\u003e2.4 独立模式\u003c/h3\u003e\n\u003cp\u003e两个缓存(客户端和服务器)和心跳的结合使独立的Eureka服务器在故障时相当有弹性，只要有某种监控或弹性运行时(如Cloud Foundry)保持它的活力。在独立模式下，你可能更希望关闭客户端行为，这样它就不会一直尝试访问其他节点而失败。下面的例子展示了如何关闭客户端行为:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (独立的Eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eserver\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eport\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e8761\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elocalhost\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eregisterWithEureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003efetchRegistry\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://${eureka.instance.hostname}:${server.port}/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意\u003ccode\u003eserviceUrl\u003c/code\u003e指向与本地实例相同的主机。\u003c/p\u003e\n\u003ch3 id="25-对等模式"\u003e2.5 对等模式\u003c/h3\u003e\n\u003cp\u003e通过运行多个实例并要求它们相互注册，Eureka可以变得更加灵活和可用。事实上，这是默认的行为，所以你只需要向对等体添加一个有效的serviceUrl，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (两个对等的Eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer2/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer1/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在上面的示例中，我们有一个YAML文件，可以通过在不同的Spring文件中配置运行它来在两台主机(peer1和peer2)上运行相同的服务器。通过操作\u003ccode\u003e/etc/hosts\u003c/code\u003e解析主机名，您可以使用此配置在单个主机上测试对等感知(在生产中这样做没有多大价值)。事实上，如果运行在知道自己主机名的机器上(默认情况下，使用\u003ccode\u003ejava.net.InetAddress\u003c/code\u003e查找)，就不需要\u003ccode\u003eeureka.instance.hostname\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以在一个系统中添加多个对等体，只要它们彼此至少有一个连接，它们就会同步自己的注册。如果对等点在物理上是分离的(在一个数据中心内或多个数据中心之间)，那么系统原则上可以承受\u003ccode\u003esplit-brain\u003c/code\u003e类型的故障。你可以在一个系统中添加多个对等体，只要它们都是直接连接的，它们就会在自己之间同步注册。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (三个对等的eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer1/eureka/,http://peer2/eureka/,http://peer3/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="26-何时选择ip地址"\u003e2.6 何时选择IP地址\u003c/h3\u003e\n\u003cp\u003e在某些情况下，Eureka最好发布服务的IP地址而不是主机名。设置\u003ccode\u003eeureka.instance.preferipaddress=true\u003c/code\u003e，当应用程序向eureka注册时，它使用它的IP地址而不是它的主机名。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果主机名不能由Java确定，则将IP地址发送给Eureka。设置主机名的唯一方法是设置eureka.instance.hostname属性。你可以在运行时使用环境变量设置主机名—例如：\u003ccode\u003eeureka.instance.hostname=${HOST_NAME}\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="27-保护eureka服务器"\u003e2.7 保护Eureka服务器\u003c/h3\u003e\n\u003cp\u003e只需通过\u003ccode\u003eSpring-boot-starter-Security\u003c/code\u003e将\u003ccode\u003eSpring Security\u003c/code\u003e添加到服务器的包管理文件中，就可以保护Eureka服务器。默认情况下，当Spring Security在包管理文件中，它将要求一个有效的CSRF令牌被发送到应用程序。Eureka客户端通常不会拥有一个有效的跨站请求伪造(CSRF)令牌，你需要为\u003ccode\u003e/Eureka/**\u003c/code\u003e端点禁用这个要求。例如:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@EnableWebSecurity\u003c/span\u003e\n\u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eWebSecurityConfig\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eWebSecurityConfigurerAdapter\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003eprotected\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eHttpSecurity\u003c/span\u003e \u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="kd"\u003ethrows\u003c/span\u003e \u003cspan class="n"\u003eException\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecsrf\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eignoringAntMatchers\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/eureka/**\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="kd"\u003esuper\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有关CSRF的更多信息，请参阅\u003ca href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf"\u003eSpring Security\u003c/a\u003e文档。\n在Spring Cloud Samples \u003ca href="https://github.com/spring-cloud-samples/eureka/tree/Eureka-With-Security"\u003erepo\u003c/a\u003e中可以找到一个演示Eureka Server。\u003c/p\u003e\n\u003ch3 id="28-jdk11支持"\u003e2.8 JDK11支持\u003c/h3\u003e\n\u003cp\u003eJDK 11删除了Eureka服务器所依赖的JAXB模块。如果你想在运行Eureka服务器时使用JDK 11，你必须在你的POM或Gradle文件中包含这些依赖项。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003e\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;org.glassfish.jaxb\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jaxb-runtime\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="3-配置属性"\u003e3 配置属性\u003c/h2\u003e\n\u003cp\u003e要查看所有Spring Cloud Netflix相关配置属性的列表，请检查\u003ca href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/appendix.html"\u003e附录页面\u003c/a\u003e。\u003c/p\u003e\n'}).add({id:4,href:"https://www.springcloud.io/docs/",title:"Docs",description:"Docs Doks.",content:""}).add({id:5,href:"https://www.springcloud.io/docs/springcloud/",title:"SpringCloud",description:"SpringCloud中文文档",content:""}),userinput.addEventListener('input',c,!0),suggestions.addEventListener('click',e,!0);function c(){var h=this.value,f=b.search(h,{limit:5,index:["content"],enrich:!0}),g=suggestions.childNodes,e=0,i=f.length,c;for(suggestions.classList.remove('d-none'),f.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.result[e].doc.href,t.textContent=b.result[e].doc.title,d.textContent=b.result[e].doc.description,suggestions.appendChild(c)});g.length>i;)suggestions.removeChild(g[e])}function e(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()