var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});b.add({id:0,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-alibaba/",title:"Spring Cloud Alibaba",description:"Spring Cloud Alibaba为分布式应用开发提供了一个一站式解决方案。它包含了开发分布式应用所需的所有组件，使你能够轻松地使用Spring Cloud开发你的应用。",content:'\u003cp\u003eSpring Cloud Alibaba为分布式应用开发提供了一个一站式解决方案。它包含了开发分布式应用所需的所有组件，使你能够轻松地使用Spring Cloud开发你的应用。\u003c/p\u003e\n\u003cp\u003e通过Spring Cloud Alibaba，你只需要添加一些注释和少量的配置，就可以将Spring Cloud应用与阿里巴巴的分布式解决方案连接起来，并利用阿里巴巴的中间件建立一个分布式应用系统。\u003c/p\u003e\n\u003ch2 id="官方仓库"\u003e官方仓库\u003c/h2\u003e\n\u003cp\u003e\u003ca href="https://github.com/alibaba/spring-cloud-alibaba/wiki"\u003ehttps://github.com/alibaba/spring-cloud-alibaba/wiki\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e官方各个组件都有十分优秀的中文文档，这里就不翻译了。\u003c/p\u003e\n\u003c/blockquote\u003e\n'}).add({id:1,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-bus/",title:"Spring Cloud Bus",description:"Spring Cloud Bus将分布式系统的节点与一个轻量级的消息代理联系起来。然后，这可以用来广播状态变化（如配置变化）或其他管理指令。该项目包括AMQP和Kafka代理的实现。另外，在classpath上找到的任何Spring Cloud Stream绑定器都可以作为传输工具开箱即用。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：3.0.2\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-bus/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-bus"\u003ehttps://github.com/spring-cloud/spring-cloud-bus\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Bus将分布式系统的节点与一个轻量级的消息代理联系起来。然后，这可以用来广播状态变化（如配置变化）或其他管理指令。该项目包括AMQP和Kafka代理的实现。另外，在classpath上找到的任何Spring Cloud Stream绑定器都可以作为传输工具开箱即用。\u003c/p\u003e\n\u003ch2 id="1-快速开始"\u003e1. 快速开始\u003c/h2\u003e\n\u003cp\u003e如果Spring Cloud Bus在classpath上检测到自己，它就会通过添加Spring Boot自动配置来工作。要启用总线，请将\u003ccode\u003espring-cloud-starter-bus-amqp\u003c/code\u003e或\u003ccode\u003espring-cloud-starter-bus-kafka\u003c/code\u003e添加到您的依赖性管理中。Spring Cloud会处理剩下的事情。确保代理（RabbitMQ或Kafka）是可用的并已配置。当在本地主机上运行时，你不需要做任何事情。如果你远程运行，请使用Spring Cloud Connectors或Spring Boot约定来定义代理凭证，如下面Rabbit的例子所示。\u003c/p\u003e\n\u003cp\u003eapplication.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003erabbitmq\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emybroker.com\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eport\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e5672\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eusername\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003euser\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003epassword\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esecret\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e总线目前支持向所有监听的节点或某一特定服务的所有节点发送消息（由Eureka定义）。\u003ccode\u003e/bus/*\u003c/code\u003e执行器命名空间有一些HTTP端点。目前，有两个已经实现。第一个，\u003ccode\u003e/bus/env\u003c/code\u003e，发送键/值对以更新每个节点的Spring环境。第二个，\u003ccode\u003e/bus/refresh\u003c/code\u003e，重新加载每个应用程序的配置，就像它们都被ping到了\u003ccode\u003e/refresh\u003c/code\u003e端点一样。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpring Cloud Bus的启动程序涵盖了Rabbit和Kafka，因为这是最常见的两种实现方式。然而，Spring Cloud Stream是相当灵活的，而且该绑定器与\u003ccode\u003espring-cloud-bus\u003c/code\u003e一起使用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="2-actuator-端点"\u003e2. Actuator 端点\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Bus提供了两个端点，\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e和\u003ccode\u003e/actuator/busenv\u003c/code\u003e，分别对应于Spring Cloud Commons中的单个执行器端点\u003ccode\u003e/actuator/refresh\u003c/code\u003e和\u003ccode\u003e/actuator/env\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="21-refresh-endpoint"\u003e2.1. Refresh Endpoint\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e端点清除\u003ccode\u003eRefreshScope\u003c/code\u003e缓存并重新绑定\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e。更多信息请参见 \u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/#refresh-scope"\u003eRefresh Scope\u003c/a\u003e 文档。\u003c/p\u003e\n\u003cp\u003e为了暴露\u003ccode\u003e/actuator/busrefresh\u003c/code\u003e端点，你需要向你的应用程序添加以下配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003emanagement.endpoints.web.exposure.include=busrefresh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="22--env-endpoint"\u003e2.2.  Env Endpoint\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点用指定的键/值对在多个实例中更新每个实例环境。\u003c/p\u003e\n\u003cp\u003e为了暴露\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点，你需要在你的应用程序中添加以下配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003emanagement.endpoints.web.exposure.include=busenv\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e/actuator/busenv\u003c/code\u003e端点接受\u003ccode\u003ePOST\u003c/code\u003e请求，请求体格式如下。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;key1\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;value1\u0026#34;\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="3-对一个实例进行寻址"\u003e3. 对一个实例进行寻址\u003c/h2\u003e\n\u003cp\u003e应用程序的每个实例都有一个服务ID，其值可以用\u003ccode\u003espring.cloud.bus.id\u003c/code\u003e来设置，其值预计是一个用冒号分隔的标识符列表，从最不具体到最具体的顺序。默认值从环境中构建，作为\u003ccode\u003espring.application.name\u003c/code\u003e和\u003ccode\u003eserver.port\u003c/code\u003e的组合（或\u003ccode\u003espring.application.index\u003c/code\u003e，如果设置）。ID的默认值是以\u003ccode\u003eapp:index:id\u003c/code\u003e的形式构建的，其中。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eapp\u003c/code\u003e是\u003ccode\u003evcap.application.name\u003c/code\u003e，如果它存在的话，或者是\u003ccode\u003espring.application.name\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eindex\u003c/code\u003e是\u003ccode\u003evcap.application.instance_index\u003c/code\u003e，如果它存在的话，\u003ccode\u003espring.application.index\u003c/code\u003e，\u003ccode\u003elocal.server.port\u003c/code\u003e，\u003ccode\u003eserver.port\u003c/code\u003e或\u003ccode\u003e0\u003c/code\u003e（按顺序排列）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e是\u003ccode\u003evcap.application.instance_id\u003c/code\u003e，如果它存在，或者是一个随机值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHTTP 端点接受一个 \u0026ldquo;destination\u0026rdquo; 路径参数，如\u003ccode\u003e/busrefresh/customers:9000\u003c/code\u003e，其中\u003ccode\u003e目的地\u003c/code\u003e是一个服务 ID。如果该ID为总线上的一个实例所拥有，它就会处理该消息，而所有其他实例都会忽略它。\u003c/p\u003e\n\u003ch2 id="4-对一个服务的所有实例进行寻址"\u003e4. 对一个服务的所有实例进行寻址\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;destination\u0026quot;参数在Spring的\u003ccode\u003ePathMatcher\u003c/code\u003e中使用（路径分隔符为冒号 - \u003ccode\u003e:\u003c/code\u003e ），以确定一个实例是否处理该消息。使用前面的例子，\u003ccode\u003e/busenv/customers:**\u003c/code\u003e针对 \u0026ldquo;customers \u0026ldquo;服务的所有实例，而不管服务ID的其他部分。\u003c/p\u003e\n\u003ch2 id="5-service-id-必须唯一"\u003e5. Service ID 必须唯一\u003c/h2\u003e\n\u003cp\u003e总线尝试两次来消除对一个事件的处理\u0026ndash;一次来自原始的\u003ccode\u003eApplicationEvent\u003c/code\u003e，一次来自队列。为此，它检查发送的服务ID和当前的服务ID。如果一个服务的多个实例有相同的ID，事件就不会被处理。在本地机器上运行时，每个服务都在一个不同的端口上，该端口是 ID 的一部分。Cloud Foundry 提供了一个索引来进行区分。为确保 ID 在 Cloud Foundry 之外是唯一的，请将 \u003ccode\u003espring.application.index\u003c/code\u003e 设置为服务的每个实例的唯一内容。\u003c/p\u003e\n\u003ch2 id="6-定制消息代理"\u003e6. 定制消息代理\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Bus使用\u003ca href="https://cloud.spring.io/spring-cloud-stream"\u003eSpring Cloud Stream\u003c/a\u003e来广播消息。因此，为了让消息流动起来，你只需要在classpath中包含你选择的绑定器实现。对于使用AMQP（RabbitMQ）和Kafka（\u003ccode\u003espring-cloud-starter-bus-[amqp|kafka]\u003c/code\u003e）的总线，有一些方便的启动器。一般来说，Spring Cloud Stream依靠Spring Boot的自动配置约定来配置中间件。例如，AMQP代理地址可以通过\u003ccode\u003espring.rabbitmq.*\u003c/code\u003e配置属性来改变。Spring Cloud Bus在\u003ccode\u003espring.cloud.bus.*\u003c/code\u003e中拥有少量的本地配置属性（例如，\u003ccode\u003espring.cloud.bus.destination\u003c/code\u003e是用作外部中间件的主题名称）。通常情况下，默认值就足够了。\u003c/p\u003e\n\u003cp\u003e要了解更多关于如何定制消息代理的设置，请查阅Spring Cloud Stream文档。\u003c/p\u003e\n\u003ch2 id="7-追踪总线事件"\u003e7. 追踪总线事件\u003c/h2\u003e\n\u003cp\u003e总线事件（\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e的子类）可以通过设置\u003ccode\u003espring.cloud.bus.trace.enabled=true\u003c/code\u003e来追踪。如果你这样做，Spring Boot \u003ccode\u003eTraceRepository\u003c/code\u003e（如果它存在的话）会显示每个事件的发送情况和每个服务实例的所有acks。下面的例子来自\u003ccode\u003e/trace\u003c/code\u003e端点。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:44.411+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.ack\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;stores:8081\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\u003cspan class="err"\u003e,\u003c/span\u003e\n  \u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:41.864+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.sent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;customers:9000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\u003cspan class="err"\u003e,\u003c/span\u003e\n  \u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;2015-11-26T10:24:41.862+0000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;signal\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring.cloud.bus.ack\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;RefreshRemoteApplicationEvent\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;c4d374b7-58ea-4928-a312-31984def293b\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;customers:9000\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;*:**\u0026#34;\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e前面的跟踪显示，一个 \u0026ldquo;RefreshRemoteApplicationEvent\u0026quot;从\u003ccode\u003ecustomers:9000\u003c/code\u003e发出，广播到所有服务，并由\u003ccode\u003ecustomers:9000\u003c/code\u003e和\u003ccode\u003estores:8081\u003c/code\u003e接收（acked）。\u003c/p\u003e\n\u003cp\u003e要自己处理ack信号，你可以为\u003ccode\u003eAckRemoteApplicationEvent\u003c/code\u003e和\u003ccode\u003eSentApplicationEvent\u003c/code\u003e类型添加一个\u003ccode\u003e@EventListener\u003c/code\u003e到你的应用程序（并启用跟踪）。另外，你也可以进入\u003ccode\u003eTraceRepository\u003c/code\u003e，从那里挖掘数据。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e任何总线应用都可以跟踪acks。然而，有时候，在一个中央服务中进行这项工作是很有用的，它可以对数据进行更复杂的查询，或者将其转发给专门的追踪服务。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="8-广播自定义事件"\u003e8. 广播自定义事件\u003c/h2\u003e\n\u003cp\u003e总线可以携带任何类型的\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e的事件。默认的传输方式是JSON，反序列化器需要提前知道哪些类型将被使用。要注册一个新的类型，你必须把它放在\u003ccode\u003eorg.springframework.cloud.bus.event\u003c/code\u003e的一个子包中。\u003c/p\u003e\n\u003cp\u003e要自定义事件名称，你可以在你的自定义类上使用\u003ccode\u003e@JsonTypeName\u003c/code\u003e，或者依靠默认策略，即使用类的简单名称。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e生产者和消费者都需要访问该类的定义。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="81-在自定义包中注册事件"\u003e8.1. 在自定义包中注册事件\u003c/h3\u003e\n\u003cp\u003e如果你不能或不想为你的自定义事件使用\u003ccode\u003eorg.springframework.cloud.bus.event\u003c/code\u003e的子包，你必须通过使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e注解指定哪些包来扫描\u003ccode\u003eRemoteApplicationEvent\u003c/code\u003e类型的事件。用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e指定的包包括子包。\u003c/p\u003e\n\u003cp\u003e例如，考虑下面的自定义事件，称为\u003ccode\u003eMyEvent\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eMyEvent\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eRemoteApplicationEvent\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以通过以下方式向deserializer注册该事件:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="nd"\u003e@Configuration\u003c/span\u003e\n\u003cspan class="nd"\u003e@RemoteApplicationEventScan\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eBusConfiguration\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果没有指定值，则使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e的类的包被注册。在这个例子中，\u003ccode\u003ecom.acme\u003c/code\u003e是通过使用\u003ccode\u003eBusConfiguration\u003c/code\u003e的包注册的。\u003c/p\u003e\n\u003cp\u003e你也可以通过使用\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e上的\u003ccode\u003evalue\u003c/code\u003e、\u003ccode\u003ebasePackages\u003c/code\u003e或\u003ccode\u003ebasePackageClasses\u003c/code\u003e属性明确指定要扫描的包，如下例所示。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003epackage\u003c/span\u003e \u003cspan class="nn"\u003ecom.acme\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="nd"\u003e@Configuration\u003c/span\u003e\n\u003cspan class="c1"\u003e//@RemoteApplicationEventScan({\u0026#34;com.acme\u0026#34;, \u0026#34;foo.bar\u0026#34;})\n\u003c/span\u003e\u003cspan class="c1"\u003e//@RemoteApplicationEventScan(basePackages = {\u0026#34;com.acme\u0026#34;, \u0026#34;foo.bar\u0026#34;, \u0026#34;fizz.buzz\u0026#34;})\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e\u003cspan class="nd"\u003e@RemoteApplicationEventScan\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebasePackageClasses\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eBusConfiguration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eBusConfiguration\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="o"\u003e...\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所有前面的\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e的例子都是等同的，即通过明确指定\u003ccode\u003e@RemoteApplicationEventScan\u003c/code\u003e上的包来注册\u003ccode\u003ecom.acme\u003c/code\u003e包。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你可以指定多个base packages进行扫描\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="9-配置属性"\u003e9. 配置属性\u003c/h2\u003e\n\u003cp\u003e要查看所有与总线相关的配置属性列表，请查看\u003ca href="https://docs.spring.io/spring-cloud-bus/docs/current/reference/html/appendix.html"\u003e附录页面\u003c/a\u003e。\u003c/p\u003e\n'}).add({id:2,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-circuit-breaker/",title:"Spring Cloud Circuit Breaker",description:"Spring Cloud Circuit breaker提供了一个跨越不同断路器实现的抽象。它提供了一个一致的API，可以在你的应用程序中使用，允许你的开发者选择最适合你的应用程序需求的断路器实现。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：2.0.2\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-circuitbreaker/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-circuitbreaker/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-circuitbreaker"\u003ehttps://github.com/spring-cloud/spring-cloud-circuitbreaker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Circuit breaker提供了一个跨越不同断路器实现的抽象。它提供了一个一致的API，可以在你的应用程序中使用，允许你的开发者选择最适合你的应用程序需求的断路器实现。\u003c/p\u003e\n\u003ch2 id="1-使用说明"\u003e1. 使用说明\u003c/h2\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker项目包含Resilience4J和Spring Retry的实现。Spring Cloud CircuitBreaker中实现的API在Spring Cloud Commons中存在。这些API的使用文档位于\u003ca href="https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-circuit-breaker"\u003eSpring Cloud Commons documentation\u003c/a\u003e中。\u003c/p\u003e\n\u003ch3 id="11-配置resilience4j断路器"\u003e1.1. 配置Resilience4J断路器\u003c/h3\u003e\n\u003ch4 id="111-starters"\u003e1.1.1. Starters\u003c/h4\u003e\n\u003cp\u003eResilience4J的实现有两个启动器，一个用于reactive应用，一个用于非reactive应用。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j\u003c/code\u003e - 非reactive应用程序\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j\u003c/code\u003e - reactive应用程序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="112-自动配置"\u003e1.1.2. 自动配置\u003c/h4\u003e\n\u003cp\u003e你可以通过设置\u003ccode\u003espring.cloud.circuitbreaker.resilience4j.enabled\u003c/code\u003e为\u003ccode\u003efalse\u003c/code\u003e来禁用Resilience4J自动配置。\u003c/p\u003e\n\u003ch4 id="113-默认配置"\u003e1.1.3. 默认配置\u003c/h4\u003e\n\u003cp\u003e为了给所有的断路器提供一个默认的配置，创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，它被传递给\u003ccode\u003eResilience4JCircuitBreakerFactory\u003c/code\u003e或\u003ccode\u003eReactiveResilience4JCircuitBreakerFactory\u003c/code\u003e。\u003ccode\u003econfigureDefault\u003c/code\u003e方法可以用来提供一个默认的配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4JConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eReactive Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eReactiveResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4JConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="114-具体的断路器配置"\u003e1.1.4. 具体的断路器配置\u003c/h4\u003e\n\u003cp\u003e与提供默认配置类似，你可以创建一个\u003ccode\u003eCustomize\u003c/code\u003e Bean，它被传递给一个 \u003ccode\u003eResilience4JCircuitBreakerFactory\u003c/code\u003e 或 \u003ccode\u003eReactiveResilience4JCircuitBreakerFactory\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e2\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的断路器外，你还可以在断路器被创建后但被返回给调用者之前对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddCircuitBreakerCustomizer\u003c/code\u003e方法。这对于向Resilience4J断路器添加事件处理程序很有用。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddCircuitBreakerCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n    \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxErrorConsumer\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eonSuccess\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxSuccessConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;normalflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eReactive Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eReactiveResilience4JCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eTimeLimiterConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eDuration\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofSeconds\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e2\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCircuitBreakerConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddCircuitBreakerCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxErrorConsumer\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eonSuccess\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003enormalFluxSuccessConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;normalflux\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n     \u003cspan class="o"\u003e};\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="115-断路器属性配置"\u003e1.1.5. 断路器属性配置\u003c/h4\u003e\n\u003cp\u003e你可以在你的应用程序的配置属性文件中配置\u003ccode\u003eCircuitBreaker\u003c/code\u003e和\u003ccode\u003eTimeLimiter\u003c/code\u003e实例。属性配置比Java\u003ccode\u003eCustomizer\u003c/code\u003e配置具有更高的优先级。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003eresilience4j.circuitbreaker\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eregisterHealthIndicator\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e100\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eregisterHealthIndicator\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003epermittedNumberOfCallsInHalfOpenState\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003eslidingWindowType\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eTIME_BASED\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003erecordFailurePredicate\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eio.github.robwin.exception.RecordFailurePredicate\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eresilience4j.timelimiter\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e2s\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003ecancelRunningFuture\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003etimeoutDuration\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e1s\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e         \u003c/span\u003e\u003cspan class="nt"\u003ecancelRunningFuture\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于Resilience4j属性配置的更多信息，见\u003ca href="https://resilience4j.readme.io/docs/getting-started-3#configuration"\u003eResilience4J Spring Boot 2配置\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id="116-隔离模式支持"\u003e1.1.6. 隔离模式支持\u003c/h4\u003e\n\u003cp\u003e如果\u003ccode\u003eresilience4j-bulkhead\u003c/code\u003e在classpath上，Spring Cloud CircuitBreaker将用Resilience4j Bulkhead来包装所有方法。你可以通过设置\u003ccode\u003espring.cluitbreaker.bulkhead.resilience4j.enabled\u003c/code\u003e为\u003ccode\u003efalse\u003c/code\u003e来禁用Resilience4j Bulkhead。\u003c/p\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker Resilience4j提供两种隔离模式的实现。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSemaphoreBulkhead\u003c/code\u003e，使用Semaphores。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFixedThreadPoolBulkhead\u003c/code\u003e，它使用一个有界队列和一个固定的线程池。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e默认情况下，Spring Cloud CircuitBreaker Resilience4j使用\u003ccode\u003eFixedThreadPoolBulkhead\u003c/code\u003e。更多关于实现Bulkhead模式的信息请参见\u003ca href="https://resilience4j.readme.io/docs/bulkhead"\u003eResilience4j Bulkhead\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eCustomizer\u0026lt;Resilience4jBulkheadProvider\u0026gt;\u003c/code\u003e可以用来提供默认的\u003ccode\u003eBulkhead\u003c/code\u003e和\u003ccode\u003eThreadPoolBulkhead\u003c/code\u003e配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eResilience4jBulkheadConfigurationBuilder\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e4\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eThreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003ecoreThreadPoolSize\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003emaxThreadPoolSize\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="117-具体的隔离配置"\u003e1.1.7. 具体的隔离配置\u003c/h4\u003e\n\u003cp\u003e与证明默认的\u0026rsquo;Bulkhead\u0026rsquo;或\u0026rsquo;ThreadPoolBulkhead\u0026rsquo;配置类似，你可以创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，这个bean被传递给\u003ccode\u003eResilience4jBulkheadProvider\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowBulkheadProviderCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecustom\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eThreadPoolBulkheadConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eofDefaults\u003c/span\u003e\u003cspan class="o"\u003e()),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的隔板外，你还可以在隔板和线程池被创建后，但在返回给调用者之前，对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddBulkheadCustomizer\u003c/code\u003e和\u003ccode\u003eaddThreadPoolBulkheadCustomizer\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003eBulkhead Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003ecustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebulkhead\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebulkhead\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallRejected\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowRejectedConsumer\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallFinished\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowFinishedConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThread Pool Bulkhead Example\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResilience4jBulkheadProvider\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowThreadPoolBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eprovider\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddThreadPoolBulkheadCustomizer\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ethreadPoolBulkhead\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ethreadPoolBulkhead\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetEventPublisher\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallRejected\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowThreadPoolRejectedConsumer\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eonCallFinished\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eslowThreadPoolFinishedConsumer\u003c/span\u003e\u003cspan class="o"\u003e),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slowThreadPoolBulkhead\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="118-隔板属性配置"\u003e1.1.8. 隔板属性配置\u003c/h4\u003e\n\u003cp\u003e你可以在你的应用程序的配置属性文件中配置 ThreadPoolBulkhead 和 SemaphoreBulkhead 实例。属性配置比Java\u003ccode\u003eCustomizer\u003c/code\u003e配置具有更高的优先级。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003eresilience4j.thread-pool-bulkhead\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003ebackendA\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emaxThreadPoolSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ecoreThreadPoolSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eresilience4j.bulkhead\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstances\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003ebackendB\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emaxConcurrentCalls\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e关于Resilience4j属性配置的更多信息，见\u003ca href="https://resilience4j.readme.io/docs/getting-started-3#configuration"\u003eResilience4J Spring Boot 2配置\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id="119-collecting-metrics"\u003e1.1.9. Collecting Metrics\u003c/h4\u003e\n\u003cp\u003eSpring Cloud Circuit Breaker Resilience4j包含自动配置功能，只要classpath上有正确的依赖项，就可以设置度量衡收集。要启用指标收集，你必须包括\u003ccode\u003eorg.springframework.boot:spring-boot-starter-actuator\u003c/code\u003e，和\u003ccode\u003eio.github.resilience4j:resilience4j-micrometer\u003c/code\u003e。关于存在这些依赖关系时产生的指标的更多信息，请参阅\u003ca href="https://resilience4j.readme.io/docs/micrometer"\u003eResilience4j文档\u003c/a\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你不必直接包括\u003ccode\u003emicrometer-core\u003c/code\u003e，因为它是由\u003ccode\u003espring-boot-starter-actuator\u003c/code\u003e带来的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="12-配置-spring-retry-circuit-breakers"\u003e1.2. 配置 Spring Retry Circuit Breakers\u003c/h3\u003e\n\u003cp\u003eSpring Retry为Spring应用程序提供声明式重试支持。该项目中的一个子集包括实现断路器功能的能力。Spring Retry通过它的\u003ca href="https://github.com/spring-projects/spring-retry/blob/master/src/main/java/org/springframework/retry/policy/CircuitBreakerRetryPolicy.java"\u003e\u003ccode\u003eCircuitBreakerRetryPolicy\u003c/code\u003e\u003c/a\u003e和\u003ca href="https://github.com/spring-projects/spring-retry#stateful-retry"\u003estateful retry\u003c/a\u003e的组合来提供断路器实现。所有使用Spring Retry创建的断路器将使用\u003ccode\u003eCircuitBreakerRetryPolicy\u003c/code\u003e和一个\u003ca href="https://github.com/spring-projects/spring-retry/blob/master/src/main/java/org/springframework/retry/support/DefaultRetryState.java"\u003e\u003ccode\u003eDefaultRetryState\u003c/code\u003e\u003c/a\u003e。这两个类都可以使用\u003ccode\u003eSpringRetryConfigBuilder\u003c/code\u003e进行配置。\u003c/p\u003e\n\u003ch4 id="121-默认配置"\u003e1.2.1. 默认配置\u003c/h4\u003e\n\u003cp\u003e为了给所有的断路器提供一个默认的配置，创建一个\u003ccode\u003eCustomize\u003c/code\u003e bean，它被传递给一个\u003ccode\u003eSpringRetryCircuitBreakerFactory\u003c/code\u003e。\u003ccode\u003econfigureDefault\u003c/code\u003e方法可以用来提供一个默认的配置。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003edefaultCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigureDefault\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringRetryConfigBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eid\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eretryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eTimeoutRetryPolicy\u003c/span\u003e\u003cspan class="o"\u003e()).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="122-具体的断路器配置"\u003e1.2.2. 具体的断路器配置\u003c/h4\u003e\n\u003cp\u003e与提供默认配置类似，你可以创建一个 \u003ccode\u003eCustomize\u003c/code\u003e Bean，它被传递给一个 \u003ccode\u003eSpringRetryCircuitBreakerFactory\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eretryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSimpleRetryPolicy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e(),\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;slow\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e除了配置被创建的断路器外，你还可以在断路器被创建后但被返回给调用者之前对其进行自定义。要做到这一点，你可以使用\u003ccode\u003eaddRetryTemplateCustomizers\u003c/code\u003e方法。这对于向\u003ccode\u003eRetryTemplate\u003c/code\u003e添加事件处理程序很有用。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eCustomizer\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eSpringRetryCircuitBreakerFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eslowCustomizer\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003efactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddRetryTemplateCustomizers\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eretryTemplate\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eretryTemplate\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eregisterListener\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eRetryListener\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003eboolean\u003c/span\u003e \u003cspan class="nf"\u003eopen\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n            \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003eclose\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e \u003cspan class="n"\u003ethrowable\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n\n        \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n        \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003eonError\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRetryContext\u003c/span\u003e \u003cspan class="n"\u003econtext\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eRetryCallback\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eT\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eE\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ecallback\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eThrowable\u003c/span\u003e \u003cspan class="n"\u003ethrowable\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n        \u003cspan class="o"\u003e}\u003c/span\u003e\n    \u003cspan class="o"\u003e}));\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="2-构建"\u003e2. 构建\u003c/h2\u003e\n\u003ch3 id="21-基本编译和测试"\u003e2.1. 基本编译和测试\u003c/h3\u003e\n\u003cp\u003e要构建源代码，你需要安装JDK 1.8。\u003c/p\u003e\n\u003cp\u003eSpring Cloud使用Maven进行大多数构建相关活动，你可以通过克隆你感兴趣的项目并键入\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-bash" data-lang="bash"\u003e$ ./mvnw install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e您也可以自己安装Maven（\u0026gt;=3.3.3），运行\u003ccode\u003emvn\u003c/code\u003e命令来代替下面例子中的\u003ccode\u003e./mvnw\u003c/code\u003e。如果你这样做，如果你的本地Maven设置不包含spring预发布工件的仓库声明，你可能还需要添加\u003ccode\u003e-P spring\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e请注意，您可能需要通过设置\u003ccode\u003eMAVEN_OPTS\u003c/code\u003e环境变量，如\u003ccode\u003eXmx512m -XX:MaxPermSize=128m\u003c/code\u003e来增加Maven的可用内存量。我们试图在\u003ccode\u003e.mvn\u003c/code\u003e配置中涵盖这一点，所以如果你发现你必须这样做才能使构建成功，请提出一个票据，将设置添加到源控制中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e关于如何构建项目的提示，请看\u003ccode\u003e.travis.yml\u003c/code\u003e，如果有的话。应该有一个 \u0026ldquo;script\u0026rdquo;，也许还有 \u0026ldquo;install\u0026quot;命令。也可以看看 \u0026ldquo;services\u0026quot;部分，看看是否有任何服务需要在本地运行（例如mongo或rabbit）。忽略你可能在 \u0026ldquo;before_install\u0026quot;中发现的与git有关的部分，因为它们与设置git证书有关，而你已经有了这些证书。\u003c/p\u003e\n\u003cp\u003e需要中间件的项目通常包括\u003ccode\u003edocker-compose.yml\u003c/code\u003e，所以考虑使用\u003ca href="https://docs.docker.com/compose/"\u003eDocker Compose\u003c/a\u003e在Docker容器中运行中间件服务器。关于mongo、rabbit和redis的常见情况，请参见\u003ca href="https://github.com/spring-cloud-samples/scripts"\u003escripts demo repository\u003c/a\u003e中的README，以了解具体说明。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果其他都失败了，用\u003ccode\u003e.travis.yml\u003c/code\u003e的命令来构建（通常是\u003ccode\u003e./mvnw install\u003c/code\u003e）。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="22-文档"\u003e2.2. 文档\u003c/h3\u003e\n\u003cp\u003espring-cloud-build模块有一个 \u0026ldquo;docs\u0026quot;配置文件，如果你打开它，它将尝试从\u003ccode\u003esrc/main/asciidoc\u003c/code\u003e构建asciidoc源。作为这个过程的一部分，它将寻找 \u0026ldquo;README.adoc\u0026rdquo;，并通过加载所有内容来处理它，但不解析或渲染它，只是将它复制到\u0026rdquo;${main.baseir}\u0026quot;（默认为\u0026rdquo;$/tmp/releaser-1622150702029-0/spring-cloud-circuitbreaker/docs\u0026rdquo;，即项目的根）。如果README有任何改动，在Maven构建后会在正确位置显示为修改过的文件。提交并推送修改内容即可。\u003c/p\u003e\n\u003ch3 id="23-使用代码工作"\u003e2.3. 使用代码工作\u003c/h3\u003e\n\u003cp\u003e如果你没有IDE的偏好，我们建议你在处理代码时使用\u003ca href="https://www.springsource.com/developer/sts"\u003eSpring Tools Suite\u003c/a\u003e或\u003ca href="https://eclipse.org/"\u003eEclipse\u003c/a\u003e。我们使用\u003ca href="https://eclipse.org/m2e/"\u003em2eclipse\u003c/a\u003e eclipse插件来支持maven。其他IDE和工具只要使用Maven 3.3.3或更高版本，也应能顺利工作。\u003c/p\u003e\n\u003ch4 id="231-激活spring-maven配置文件"\u003e2.3.1. 激活Spring Maven配置文件\u003c/h4\u003e\n\u003cp\u003eSpring Cloud项目需要激活 \u0026ldquo;spring\u0026rdquo; Maven配置文件，以解决spring里程碑和快照库的问题。使用你喜欢的IDE将该配置文件设置为激活状态，否则你可能会遇到构建错误。\u003c/p\u003e\n\u003ch4 id="232-用m2eclipse导入到eclipse中"\u003e2.3.2. 用m2eclipse导入到eclipse中\u003c/h4\u003e\n\u003cp\u003e在使用eclipse时，我们推荐\u003ca href="https://eclipse.org/m2e/"\u003em2eclipse\u003c/a\u003e eclipse插件。如果你还没有安装m2eclipse，它可以从 \u0026ldquo;eclipse marketplace\u0026quot;获得。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e旧版本的m2e不支持Maven 3.3，所以一旦项目被导入Eclipse，你还需要告诉m2eclipse为项目使用正确的配置文件。如果你看到项目中与POMs有关的许多不同的错误，请检查你是否有一个最新的安装。如果你不能升级m2e，在你的\u003ccode\u003esettings.xml\u003c/code\u003e中加入 \u0026ldquo;spring \u0026ldquo;配置文件。或者你可以从父pom的 \u0026ldquo;spring \u0026ldquo;配置文件中复制版本库设置到你的\u003ccode\u003esettings.xml\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id="233-在没有m2eclipse的情况下导入到eclipse中"\u003e2.3.3. 在没有m2eclipse的情况下导入到eclipse中\u003c/h4\u003e\n\u003cp\u003e如果你不愿意使用m2eclipse，你可以用以下命令生成eclipse项目元数据。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-bash" data-lang="bash"\u003e$ ./mvnw eclipse:eclipse\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成的eclipse项目可以通过在文件菜单中选择导入现有项目来导入。\u003c/p\u003e\n'}).add({id:3,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-gateway/",title:"Spring Cloud Gateway",description:"该项目提供了一个库，用于在Spring WebFlux之上构建API网关。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到API，并为其提供交叉关注，如：安全、监控/指标和弹性。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：3.0.3\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月23日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-gateway"\u003ehttps://github.com/spring-cloud/spring-cloud-gateway\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这个项目提供了一个建立在Spring生态系统之上的API网关，包括。Spring 5、Spring Boot 2和Project Reactor。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到API，并提供跨领域的关注，如：安全、监控/指标和弹性。\u003c/p\u003e\n\u003ch2 id="1-添加spring-cloud-gateway"\u003e1. 添加Spring Cloud Gateway\u003c/h2\u003e\n\u003cp\u003e要在你的项目中包含Spring Cloud Gateway，请使用grup ID为\u003ccode\u003eorg.springframework.cloud\u003c/code\u003e和artifact ID为\u003ccode\u003espring-cloud-starter-gateway\u003c/code\u003e的starter。请参阅\u003ca href="https://projects.spring.io/spring-cloud/"\u003eSpring Cloud项目页面\u003c/a\u003e，了解关于使用当前Spring Cloud发布列车设置构建系统的详细信息。\u003c/p\u003e\n\u003cp\u003e如果你包含了starter，但你不希望启用网关，请设置\u003ccode\u003espring.cloud.gateway.enabled=false\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpring Cloud Gateway建立在\u003ca href="https://spring.io/projects/spring-boot#learn"\u003eSpring Boot 2.x\u003c/a\u003e、\u003ca href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"\u003eSpring WebFlux\u003c/a\u003e和\u003ca href="https://projectreactor.io/docs"\u003eProject Reactor\u003c/a\u003e之上。因此，你所熟悉的许多同步库（例如Spring Data和Spring Security）和模式在你使用Spring Cloud Gateway时可能不适用。如果你不熟悉这些项目，我们建议你在使用Spring Cloud Gateway之前先阅读它们的文档，熟悉一些新的概念。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpring Cloud Gateway需要Spring Boot和Spring Webflux提供的Netty运行时间。它不能在传统的Servlet容器中工作，也不能以WAR的形式构建。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="2-术语表"\u003e2. 术语表\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRoute\u003c/strong\u003e。网关的基本构造块。它由一个ID、一个目的地URI、一个谓词集合和一个过滤器集合定义。如果集合谓词为真，则路由被匹配。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePredicate\u003c/strong\u003e。这是一个\u003ca href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"\u003eJava 8 Function Predicate\u003c/a\u003e。输入类型是一个\u003ca href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html"\u003eSpring Framework \u003ccode\u003eServerWebExchange\u003c/code\u003e\u003c/a\u003e。这让你可以匹配HTTP请求中的任何内容，如头文件或参数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilter\u003c/strong\u003e。这些是\u003ca href="https://github.com/spring-cloud/spring-cloud-gateway/tree/main/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java"\u003e\u003ccode\u003eGatewayFilter\u003c/code\u003e\u003c/a\u003e的实例，已经用特定的工厂构建。在这里，你可以在发送下游请求之前或之后修改请求和响应。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="3-它是如何工作的"\u003e3. 它是如何工作的\u003c/h2\u003e\n\u003cp\u003e下图提供了一个关于Spring Cloud Gateway如何工作的高层次概述。\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://cdn.jsdelivr.net/gh/KevinBlandy/springcloud-images/2021/07/23/6026b5a0b1ad41a68dee61d1af1ff5d0.png" alt="springcloud"\u003e\u003c/p\u003e\n\u003cp\u003e客户端向Spring Cloud Gateway发出请求。如果Gateway处理程序映射确定一个请求与路由相匹配，它将被发送到Gateway Web处理程序。这个处理程序通过一个特定于该请求的过滤器链来运行该请求。过滤器被虚线划分的原因是，过滤器可以在代理请求发送之前和之后运行逻辑。所有的 \u0026ldquo;pre\u0026quot;过滤器逻辑都被执行。然后发出代理请求。在代理请求发出后，\u0026ldquo;post\u0026quot;过滤器逻辑被运行。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在路由中定义的没有端口的URI，其HTTP和HTTPS URI的默认端口值分别为80和443。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="4-配置-route-predicate-和-gateway-filter"\u003e4. 配置 Route Predicate 和 Gateway Filter\u003c/h2\u003e\n\u003cp\u003e有两种方式可以配置谓词和过滤器：快捷方式和完全展开参数。下面的大多数例子使用的是快捷方式。\u003c/p\u003e\n\u003cp\u003e名称和参数名称将在每个部分的第一或第二句中以\u003ccode\u003ecode\u003c/code\u003e的形式列出。参数通常按照快捷方式配置所需的顺序列出。\u003c/p\u003e\n\u003ch3 id="41-快捷配置"\u003e4.1. 快捷配置\u003c/h3\u003e\n\u003cp\u003e捷径配置是由过滤器名称识别的，后面是等号（\u003ccode\u003e=\u003c/code\u003e），后面是由逗号（\u003ccode\u003e,\u003c/code\u003e）分隔的参数值。\u003c/p\u003e\n\u003cp\u003eapplication.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eafter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eCookie=mycookie,mycookievalue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e前面的例子定义了\u003ccode\u003eCookie\u003c/code\u003e路由谓词工厂，有两个参数，cookie名称\u003ccode\u003emycookie\u003c/code\u003e和要匹配的值\u003ccode\u003emycookievalue\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="42-完整展开的参数配置"\u003e4.2. 完整展开的参数配置\u003c/h3\u003e\n\u003cp\u003e完全展开的参数看起来更像标准的yaml配置，有name/vlue键值对。一般来说，会有一个\u003ccode\u003ename\u003c/code\u003e键和一个\u003ccode\u003eargs\u003c/code\u003e键。\u003ccode\u003eargs\u003c/code\u003e键是一个键值对的映射，用于配置谓词或过滤器。\u003c/p\u003e\n\u003cp\u003eapplication.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eafter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eCookie\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emycookie\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eregexp\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emycookievalue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这是上面显示的\u003ccode\u003eCookie\u003c/code\u003e谓词的快捷配置的完整配置。\u003c/p\u003e\n\u003ch2 id="5-路由-predicate-工厂"\u003e5. 路由 Predicate 工厂\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Gateway将路由作为Spring WebFlux \u003ccode\u003eHandlerMapping\u003c/code\u003e基础设施的一部分进行匹配。Spring Cloud Gateway包括许多内置的路由谓词工厂。所有这些谓词都与HTTP请求的不同属性相匹配。你可以用逻辑上的 \u0026ldquo;and \u0026ldquo;语句组合多个路由谓词工厂。\u003c/p\u003e\n\u003ch3 id="51-the-after-route-predicate-factory"\u003e5.1. The After Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u0026ldquo;After\u0026rdquo; 路由谓词工厂需要一个参数，即 \u0026ldquo;datetime\u0026rdquo;（它是java的 \u0026ldquo;ZonedDateTime\u0026rdquo;）。这个谓词匹配发生在指定日期时间之后的请求。下面的例子配置了一个after路线谓词。\u003c/p\u003e\n\u003cp\u003eExample 1. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eafter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAfter=2017-01-20T17:42:47.789-07:00[America/Denver]\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请求的时间只有在 \u003ccode\u003e2017-01-20T17:42:47.789-07:00[America/Denver]\u003c/code\u003e 之后才会路由请求。\u003c/p\u003e\n\u003ch3 id="52-the-before-route-predicate-factory"\u003e5.2. The Before Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u0026ldquo;Before\u0026quot;路由谓词工厂需要一个参数，即 \u0026ldquo;datetime\u0026rdquo;（它是一个java的 \u0026ldquo;ZonedDateTime\u0026rdquo;）。这个谓词匹配发生在指定的\u003ccode\u003edatetime\u003c/code\u003e之前的请求。下面的例子配置了一个before路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 2. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ebefore_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eBefore=2017-01-20T17:42:47.789-07:00[America/Denver]\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请求的时间只有在 \u003ccode\u003e2017-01-20T17:42:47.789-07:00[America/Denver]\u003c/code\u003e 之前才会路由请求。\u003c/p\u003e\n\u003ch3 id="53-the-between-route-predicate-factory"\u003e5.3. The Between Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eBetween\u003c/code\u003e路由谓词工厂需要两个参数，\u003ccode\u003edatetime1\u003c/code\u003e和\u003ccode\u003edatetime2\u003c/code\u003e，它们是java\u003ccode\u003eZonedDateTime\u003c/code\u003e对象。这个谓词匹配发生在\u003ccode\u003edatetime1\u003c/code\u003e之后和\u003ccode\u003edatetime2\u003c/code\u003e之前的请求。参数\u003ccode\u003edatetime2\u003c/code\u003e必须在\u003ccode\u003edatetime1\u003c/code\u003e之后。下面的例子配置了一个路由谓词之间。\u003c/p\u003e\n\u003cp\u003eExample 3. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ebetween_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eBetween=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这条路线匹配任何在\u003ccode\u003e2017-01-20T17:42:47.789-07:00[America/Denver]\u003c/code\u003e之后和\u003ccode\u003e2017-01-21T17:42:47.789-07:00[America/Denver]\u003c/code\u003e之前发起的请求。这对维护窗口可能是有用的。\u003c/p\u003e\n\u003ch3 id="54-the-cookie-route-predicate-factory"\u003e5.4. The Cookie Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eCookie\'路由谓词工厂接受两个参数，即cookie\u003c/code\u003e名称\u0026rsquo;和\u003ccode\u003eregexp\u003c/code\u003e（这是一个Java正则表达式）。这个谓词匹配具有给定名称且其值符合正则表达式的cookie。下面的例子配置了一个cookie路由谓词工厂。\u003c/p\u003e\n\u003cp\u003eExample 4. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ecookie_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eCookie=chocolate, ch.p\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个路由匹配有一个名为 \u0026ldquo;chocolate\u0026quot;的cookie的请求，其值与 \u0026ldquo;ch.p\u0026quot;正则表达式匹配。\u003c/p\u003e\n\u003ch3 id="55-the-header-route-predicate-factory"\u003e5.5. The Header Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e路由谓词工厂 \u0026ldquo;Header\u0026rdquo; 需要两个参数，header的 \u0026ldquo;name\u0026rdquo; 和 \u0026ldquo;regexp\u0026rdquo;（这是一个Java正则表达式）。这个谓词与具有给定名称且其值符合正则表达式的头匹配。下面的例子配置了一个hear的路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 5. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eHeader=X-Request-Id, \\d+\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求有一个名为\u003ccode\u003eX-Request-Id\u003c/code\u003e的头，其值与\u003ccode\u003ed+\u003c/code\u003e正则表达式相匹配（即，它有一个或多个数字的值），则该路由匹配。\u003c/p\u003e\n\u003ch3 id="56-the-host-route-predicate-factory"\u003e5.6. The Host Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eHost\u003c/code\u003e路由谓词工厂接受一个参数：一个主机名称\u003ccode\u003epatterns\u003c/code\u003e的列表。模式是一个Ant风格的模式，以\u003ccode\u003e.\u003c/code\u003e作为分隔符。这个谓词匹配符合该模式的\u003ccode\u003eHost\u003c/code\u003e头。下面的例子配置了一个主机路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 6. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehost_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eHost=**.somehost.org,**.anotherhost.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也支持URI模板变量（如\u003ccode\u003e{sub}.myhost.org\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e如果请求有一个\u003ccode\u003eHost\u003c/code\u003e头，其值为\u003ccode\u003ewww.somehost.org\u003c/code\u003e或\u003ccode\u003ebeta.somehost.org\u003c/code\u003e或\u003ccode\u003ewww.anotherhost.org\u003c/code\u003e，则该路由匹配。\u003c/p\u003e\n\u003cp\u003e这个谓词提取URI模板变量（如\u003ccode\u003esub\u003c/code\u003e，在前面的例子中定义）作为名称和值的映射，并将其放在\u003ccode\u003eServerWebExchange.getAttributes()\u003c/code\u003e中，其键定义在\u003ccode\u003eServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE\u003c/code\u003e。然后，这些值可供\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-route-filters"\u003e\u003ccode\u003eGatewayFilter\u003c/code\u003e factories\u003c/a\u003e 使用。\u003c/p\u003e\n\u003ch3 id="57-the-method-route-predicate-factory"\u003e5.7. The Method Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e\u0026ldquo;Method\u0026quot;路由谓词工厂接受一个 \u0026ldquo;methods\u0026quot;参数，这是一个或多个参数：要匹配的HTTP方法。下面的例子配置了一个方法路径谓词。\u003c/p\u003e\n\u003cp\u003eExample 7. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e   \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e     \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emethod_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e       \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e       \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e       \u003c/span\u003e- \u003cspan class="l"\u003eMethod=GET,POST\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求方法是 \u0026ldquo;GET \u0026ldquo;或 \u0026ldquo;POST\u0026rdquo;，则该路由匹配。\u003c/p\u003e\n\u003ch3 id="58-the-path-route-predicate-factory"\u003e5.8. The Path Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003ePath Route Predicate Factory需要两个参数：一个Spring \u003ccode\u003ePathMatcher\u003c/code\u003e模式的列表和一个可选的标志\u003ccode\u003ematchTrailingSlash\u003c/code\u003e（默认为\u003ccode\u003etrue\u003c/code\u003e）。下面的例子配置了一个路径路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 8. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epath_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/red/{segment},/blue/{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求路径是，例如：\u003ccode\u003e/red/1\u003c/code\u003e或\u003ccode\u003e/red/1/\u003c/code\u003e或\u003ccode\u003e/red/blue\u003c/code\u003e或\u003ccode\u003e/blue/green\u003c/code\u003e，则该路径匹配。\u003c/p\u003e\n\u003cp\u003e如果\u003ccode\u003ematchTrailingSlash\u003c/code\u003e被设置为\u003ccode\u003efalse\u003c/code\u003e，那么请求路径\u003ccode\u003e/red/1/\u003c/code\u003e将不被匹配。\u003c/p\u003e\n\u003cp\u003e这个谓词提取URI模板变量（如\u003ccode\u003esegment\u003c/code\u003e，在前面的例子中定义）作为名称和值的映射，并将其放在\u003ccode\u003eServerWebExchange.getAttributes()\u003c/code\u003e中，其键定义在\u003ccode\u003eServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE\u003c/code\u003e。这些值然后可供\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-route-filters"\u003e\u003ccode\u003eGatewayFilter\u003c/code\u003e factories\u003c/a\u003e使用。\u003c/p\u003e\n\u003cp\u003e有一个实用的方法（称为 \u0026ldquo;get\u0026rdquo;），以使访问这些变量更加容易。下面的例子显示了如何使用\u003ccode\u003eget\u003c/code\u003e方法。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="n"\u003eMap\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003euriVariables\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eServerWebExchangeUtils\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetPathPredicateVariables\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\n\u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="n"\u003esegment\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003euriVariables\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;segment\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="59-the-query-route-predicate-factory"\u003e5.9. The Query Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003e查询路由谓词工厂需要两个参数：一个必需的param和一个可选的regexp（这是一个Java正则表达式）。下面的例子配置了一个查询路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 9. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003equery_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eQuery=green\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求包含一个\u0026quot;green\u0026quot;的查询参数，前面的路由就会匹配。\u003c/p\u003e\n\u003cp\u003eapplication.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003equery_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eQuery=red, gree.\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求中包含一个\u003ccode\u003ered\u003c/code\u003e的查询参数，其值与\u003ccode\u003egree.\u003c/code\u003e的重合表达式相匹配，那么前面的路由就会匹配，所以\u003ccode\u003egreen\u003c/code\u003e和\u003ccode\u003egreet\u003c/code\u003e会匹配。\u003c/p\u003e\n\u003ch3 id="510-the-remoteaddr-route-predicate-factory"\u003e5.10. The RemoteAddr Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003eRemoteAddr路由谓词工厂接受一个来源列表（最小尺寸为1），它是CIDR-注解（IPv4或IPv6）字符串，如192.168.0.1/16（其中192.168.0.1是一个IP地址，16是子网掩码）。下面的例子配置了一个RemoteAddr路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 10. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eremoteaddr_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRemoteAddr=192.168.1.1/24\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果请求的远程地址是，例如，192.168.1.10，则该路由匹配。\u003c/p\u003e\n\u003ch3 id="511-the-weight-route-predicate-factory"\u003e5.11. The Weight Route Predicate Factory\u003c/h3\u003e\n\u003cp\u003eWeight路线谓语工厂需要两个参数：group 和weight （一个int）。weight 是按group计算的。下面的例子配置了一个权重路由谓词。\u003c/p\u003e\n\u003cp\u003eExample 11. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eweight_high\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://weighthigh.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eWeight=group1, 8\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eweight_low\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://weightlow.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eWeight=group1, 2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e此路由将转发~80%的流量到 \u003ccode\u003eweighthigh.org\u003c/code\u003e，~20%的流量到\u003ccode\u003eweightlow.org\u003c/code\u003e。\u003c/p\u003e\n\u003ch4 id="5111-modifying-the-way-remote-addresses-are-resolved"\u003e5.11.1. Modifying the Way Remote Addresses Are Resolved\u003c/h4\u003e\n\u003cp\u003e默认情况下，RemoteAddr路由谓语工厂使用传入请求中的远程地址。如果Spring Cloud Gateway位于代理层后面，这可能与实际的客户端IP地址不一致。\u003c/p\u003e\n\u003cp\u003e你可以通过设置自定义的\u003ccode\u003eRemoteAddressResolver\u003c/code\u003e来定制远程地址的解析方式。Spring Cloud Gateway有一个非默认的远程地址解析器，基于\u003ca href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For"\u003eX-Forwarded-For header\u003c/a\u003e，\u003ccode\u003eXForwardedRemoteAddressResolver\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eXForwardedRemoteAddressResolver\u003c/code\u003e有两个静态构造方法，它们采取不同的安全方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eXForwardedRemoteAddressResolver::trustAll\u003c/code\u003e返回一个\u003ccode\u003eRemoteAddressResolver\u003c/code\u003e，它总是采取在\u003ccode\u003eX-Forwarded-For\u003c/code\u003e头中发现的第一个IP地址。这种方法容易受到欺骗，因为恶意的客户可以为\u003ccode\u003eX-Forwarded-For\u003c/code\u003e设置一个初始值，这将被解析器所接受。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXForwardedRemoteAddressResolver::maxTrustedIndex\u003c/code\u003e采取一个与Spring Cloud Gateway前面运行的受信任基础设施数量相关的索引。例如，如果Spring Cloud Gateway只能通过HAProxy访问，那么应该使用1的值。如果在Spring Cloud Gateway被访问之前需要两跳受信任的基础设施，那么应该使用2的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e考虑一下下面的标头值。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-text" data-lang="text"\u003eX-Forwarded-For: 0.0.0.1, 0.0.0.2, 0.0.0.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下\u003ccode\u003emaxTrustedIndex\u003c/code\u003e值产生以下远程地址。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003ccode\u003emaxTrustedIndex\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003eresult\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e[ \u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e ,0]\u003c/td\u003e\n\u003ctd\u003e(invalid, \u003ccode\u003eIllegalArgumentException\u003c/code\u003e during initialization)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e0.0.0.3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e0.0.0.2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e0.0.0.1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[4, \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e ]\u003c/td\u003e\n\u003ctd\u003e0.0.0.1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e下面的例子显示了如何用Java实现同样的配置。\u003c/p\u003e\n\u003cp\u003eExample 12. GatewayConfig.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="n"\u003eRemoteAddressResolver\u003c/span\u003e \u003cspan class="n"\u003eresolver\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eXForwardedRemoteAddressResolver\u003c/span\u003e\n    \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emaxTrustedIndex\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\n\u003cspan class="o"\u003e...\u003c/span\u003e\n\n\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;direct-route\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n    \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eremoteAddr\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;10.1.1.1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;10.10.1.1/24\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;https://downstream1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;proxied-route\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n    \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eremoteAddr\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eresolver\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;10.10.1.1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;10.10.1.1/24\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;https://downstream2\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="6-gatewayfilter-工厂"\u003e6. GatewayFilter 工厂\u003c/h2\u003e\n\u003cp\u003e路由过滤器允许以某种方式修改传入的 HTTP 请求或传出的 HTTP 响应。路由过滤器的范围是一个特定的路由。Spring Cloud Gateway包括许多内置的GatewayFilter Factories。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关于如何使用以下任何过滤器的更详细的例子，请看\u003ca href="https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory"\u003e单元测试\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="61-the-addrequestheader-gatewayfilter-factory"\u003e6.1. The AddRequestHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eAddRequestHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂需要一个\u003ccode\u003ename\u003c/code\u003e和\u003ccode\u003evalue\u003c/code\u003e参数。下面的例子配置了一个\u003ccode\u003eAddRequestHeader\u003c/code\u003e的\u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 13. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_request_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddRequestHeader=X-Request-red, blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个列表将\u003ccode\u003eX-Request-red:blue\u003c/code\u003e头添加到所有匹配请求的下游请求的头文件中。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAddRequestHeader\u003c/code\u003e知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时被扩展。下面的例子配置了一个\u003ccode\u003eAddRequestHeader``GatewayFilter\u003c/code\u003e，使用了一个变量。\u003c/p\u003e\n\u003cp\u003eExample 14. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_request_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/red/{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddRequestHeader=X-Request-Red, Blue-{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="62-the-addrequestparameter-gatewayfilter-factory"\u003e6.2. The AddRequestParameter GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eAddRequestParameter GatewayFilter Factory需要一个名称和值参数。下面的例子配置了一个AddRequestParameter GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 15. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_request_parameter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddRequestParameter=red, blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将为所有匹配的请求在下游请求的查询字符串中添加\u003ccode\u003ered=blue\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAddRequestParameter\u003c/code\u003e知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时被扩展。下面的例子配置了一个\u003ccode\u003eAddRequestParameter``GatewayFilter\u003c/code\u003e，使用了一个变量。\u003c/p\u003e\n\u003cp\u003eExample 16. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_request_parameter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003eHost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e{\u003cspan class="l"\u003esegment}.myhost.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddRequestParameter=foo, bar-{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="63-the-addresponseheader-gatewayfilter-factory"\u003e6.3. The AddResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eAddResponseHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂需要一个\u003ccode\u003ename\u003c/code\u003e和\u003ccode\u003evalue\u003c/code\u003e参数。下面的例子配置了一个\u003ccode\u003eAddResponseHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 17. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_response_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddResponseHeader=X-Response-Red, Blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将把\u003ccode\u003eX-Response-Foo:Bar\u003c/code\u003e头添加到所有匹配请求的下游响应的头文件中。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAddResponseHeader\u003c/code\u003e知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时被扩展。下面的例子配置了一个\u003ccode\u003eAddResponseHeader``GatewayFilter\u003c/code\u003e，使用了一个变量。\u003c/p\u003e\n\u003cp\u003eExample 18. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eadd_response_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003eHost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e{\u003cspan class="l"\u003esegment}.myhost.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eAddResponseHeader=foo, bar-{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="64-the-deduperesponseheader-gatewayfilter-factory"\u003e6.4. The DedupeResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eDedupeResponseHeader GatewayFilter工厂接收一个\u003ccode\u003ename\u003c/code\u003e参数和一个可选的\u003ccode\u003estrategy\u003c/code\u003e参数。\u003ccode\u003ename\u003c/code\u003e可以包含一个以空格分隔的头名称列表。下面的例子配置了一个\u003ccode\u003eDedupeResponseHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ededupe_response_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eDedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在网关CORS逻辑和下游逻辑都添加了\u003ccode\u003eAccess-Control-Allow-Credentials\u003c/code\u003e和\u003ccode\u003eAccess-Control-Allow-Origin\u003c/code\u003e响应头的情况下，这将删除重复的值。\u003c/p\u003e\n\u003cp\u003eDedupeResponseHeader 过滤器还接受一个可选的 \u003ccode\u003estrategy\u003c/code\u003e 参数。接受的值是\u003ccode\u003eRETAIN_FIRST\u003c/code\u003e（默认），\u003ccode\u003eRETAIN_LAST\u003c/code\u003e，和\u003ccode\u003eRETAIN_UNIQUE\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="65-spring-cloud-circuitbreaker-gatewayfilter-factory"\u003e6.5. Spring Cloud CircuitBreaker GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker GatewayFilter工厂使用Spring Cloud CircuitBreaker APIs将Gateway路由包裹在一个断路器中。Spring Cloud CircuitBreaker支持多个可与Spring Cloud Gateway一起使用的库。Spring Cloud支持Resilience4J开箱即用。\u003c/p\u003e\n\u003cp\u003e要启用Spring Cloud CircuitBreaker过滤器，你需要将\u003ccode\u003espring-cloud-starter-circuitbreaker-reactor-resilience4j\u003c/code\u003e放在classpath上。下面的例子配置了一个Spring Cloud CircuitBreaker \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 20. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ecircuitbreaker_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eCircuitBreaker=myCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e要配置断路器，请参阅你所使用的底层断路器实现的配置。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://cloud.spring.io/spring-cloud-circuitbreaker/reference/html/spring-cloud-circuitbreaker.html"\u003eResilience4J Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud CircuitBreaker过滤器也可以接受一个可选的\u003ccode\u003efallbackUri\u003c/code\u003e参数。目前，只支持\u003ccode\u003eforward:\u003c/code\u003e模式化的URI。如果回退被调用，请求将被转发到URI所匹配的控制器。下面的例子配置了这样一个fallback。\u003c/p\u003e\n\u003cp\u003eExample 21. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ecircuitbreaker_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elb://backing-service:8088\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/consumingServiceEndpoint\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emyCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003efallbackUri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eforward:/inCaseOfFailureUseThis\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRewritePath=/consumingServiceEndpoint, /backingServiceEndpoint\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面的列表在Java中做同样的事情。\u003c/p\u003e\n\u003cp\u003eExample 22. Application.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;circuitbreaker_route\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/consumingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ec\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ec\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ename\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;myCircuitBreaker\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003efallbackUri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;forward:/inCaseOfFailureUseThis\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003erewritePath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/consumingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;/backingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;lb://backing-service:8088\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e本例在调用断路器回退时转发到\u003ccode\u003e/inCaseofFailureUseThis\u003c/code\u003e URI。请注意，这个例子还演示了（可选）Spring Cloud LoadBalancer的负载均衡（由目标URI上的\u003ccode\u003elb\u003c/code\u003e前缀定义）。\u003c/p\u003e\n\u003cp\u003e主要情况是使用\u003ccode\u003efallbackUri\u003c/code\u003e来定义网关应用中的内部控制器或处理器。然而，你也可以将请求重新路由到外部应用程序的控制器或处理程序，如下所示。\u003c/p\u003e\n\u003cp\u003eExample 23. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eingredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elb://ingredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=//ingredients/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003efetchIngredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003efallbackUri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eforward:/fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eingredients-fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:9994\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，网关应用程序中没有 \u003ccode\u003efallback\u003c/code\u003e 端点或处理程序。然而，在另一个应用程序中有一个，在\u003ccode\u003elocalhost:9994\u003c/code\u003e下注册。\u003c/p\u003e\n\u003cp\u003e在请求被转发到回退的情况下，Spring Cloud CircuitBreaker Gateway过滤器也提供了引起该请求的\u003ccode\u003eThrowable\u003c/code\u003e。它作为 \u003ccode\u003eServerWebExchangeUtils.CIRCUITBREAKER_EXECUTION_EXCEPTION_ATTR\u003c/code\u003e 属性被添加到 \u003ccode\u003eServerWebExchange\u003c/code\u003e 中，在网关应用程序中处理fallback时可以使用。\u003c/p\u003e\n\u003cp\u003e对于外部控制器/处理程序的情况，可以添加带有异常细节的头文件。你可以在\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers"\u003eFallbackHeaders GatewayFilter Factory section\u003c/a\u003e 中找到更多关于这样做的信息。\u003c/p\u003e\n\u003ch4 id="651-状态码中的断路器熔断"\u003e6.5.1. 状态码中的断路器熔断\u003c/h4\u003e\n\u003cp\u003e在某些情况下，你可能想根据它所包裹的路由返回的状态代码来熔断。断路器配置对象需要一个状态代码列表，如果返回这些代码将导致断路器熔断。当设置你想让断路器熔断的状态代码时，你可以使用一个带有状态代码值的整数或HttpStatus枚举的字符串表示。\u003c/p\u003e\n\u003cp\u003eExample 24. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ecircuitbreaker_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elb://backing-service:8088\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/consumingServiceEndpoint\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emyCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003efallbackUri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eforward:/inCaseOfFailureUseThis\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003estatusCodes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e- \u003cspan class="m"\u003e500\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e- \u003cspan class="s2"\u003e\u0026#34;NOT_FOUND\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExample 25. Application.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;circuitbreaker_route\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/consumingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecircuitBreaker\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ec\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ec\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ename\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;myCircuitBreaker\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003efallbackUri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;forward:/inCaseOfFailureUseThis\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eaddStatusCode\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;INTERNAL_SERVER_ERROR\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003erewritePath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/consumingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;/backingServiceEndpoint\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)).\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;lb://backing-service:8088\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="66-the-fallbackheaders-gatewayfilter-factory"\u003e6.6. The FallbackHeaders GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e通过\u003ccode\u003eFallbackHeaders\u003c/code\u003e工厂，你可以在转发到外部应用程序中的\u003ccode\u003efallbackUri\u003c/code\u003e的请求的标题中添加\u003ccode\u003eSpring Cloud CircuitBreaker\u003c/code\u003e的执行异常细节，如以下场景。\u003c/p\u003e\n\u003cp\u003eExample 26. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eingredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elb://ingredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=//ingredients/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eCircuitBreaker\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003efetchIngredients\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003efallbackUri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eforward:/fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eingredients-fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:9994\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/fallback\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eFallbackHeaders\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eexecutionExceptionTypeHeaderName\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eTest-Header\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这个例子中，在运行断路器时发生执行异常后，请求被转发到运行在\u003ccode\u003elocalhost:9994\u003c/code\u003e的应用程序中的\u003ccode\u003efallback\u003c/code\u003e端点或处理器。带有异常类型、消息和（如果有）根本原因的异常类型和消息的头文件被\u003ccode\u003eFallbackHeaders\u003c/code\u003e过滤器添加到该请求中。\u003c/p\u003e\n\u003cp\u003e你可以通过设置以下参数的值来覆盖配置中的头文件名称（显示为默认值）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eexecutionExceptionTypeHeaderName\u003c/code\u003e ( \u003ccode\u003e\u0026quot;Execution-Exception-Type\u0026quot;\u003c/code\u003e )\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexecutionExceptionMessageHeaderName\u003c/code\u003e ( \u003ccode\u003e\u0026quot;Execution-Exception-Message\u0026quot;\u003c/code\u003e )\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erootCauseExceptionTypeHeaderName\u003c/code\u003e ( \u003ccode\u003e\u0026quot;Root-Cause-Exception-Type\u0026quot;\u003c/code\u003e )\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erootCauseExceptionMessageHeaderName\u003c/code\u003e ( \u003ccode\u003e\u0026quot;Root-Cause-Exception-Message\u0026quot;\u003c/code\u003e )\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e关于断路器和网关的更多信息，请参阅\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#spring-cloud-circuitbreaker-filter-factory"\u003eSpring Cloud CircuitBreaker Factory部分\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id="67-the-maprequestheader-gatewayfilter-factory"\u003e6.7. The MapRequestHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eMapRequestHeader GatewayFilter工厂接受fromHeader和toHeader参数。它创建一个新的命名头（toHeader），并从传入的http请求的现有命名头（fromHeader）中提取值。如果输入的头不存在，过滤器没有任何影响。如果新的命名头信息已经存在，它的值就会被增加新的值。下面的例子配置了一个MapRequestHeader。\u003c/p\u003e\n\u003cp\u003eExample 27. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emap_request_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eMapRequestHeader=Blue, X-Request-Red\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将在下游请求中添加\u003ccode\u003eX-Request-Red:\u0026lt;values\u0026gt;\u003c/code\u003e头，并从传入的HTTP请求的\u003ccode\u003eBlue\u003c/code\u003e头中更新数值。\u003c/p\u003e\n\u003ch3 id="68-the-prefixpath-gatewayfilter-factory"\u003e6.8. The PrefixPath GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003ePrefixPath GatewayFilter工厂需要一个前缀参数。下面的例子配置了一个PrefixPath GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 28. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eprefixpath_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePrefixPath=/mypath\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将把\u003ccode\u003e/mypath\u003c/code\u003e作为所有匹配请求的路径的前缀。因此，一个到\u003ccode\u003e/hello\u003c/code\u003e的请求将被发送到\u003ccode\u003e/mypath/hello\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="69-the-preservehostheader-gatewayfilter-factory"\u003e6.9. The PreserveHostHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003ePreserveHostHeader GatewayFilter工厂没有参数。这个过滤器设置一个请求属性，路由过滤器会检查该属性，以确定是否应该发送原始的主机头，而不是由HTTP客户端确定的主机头。下面的例子配置了一个PreserveHostHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 29. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epreserve_host_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePreserveHostHeader\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="610-the-requestratelimiter-gatewayfilter-factory"\u003e6.10. The RequestRateLimiter GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRequestRateLimiter``GatewayFilter\u003c/code\u003e工厂使用\u003ccode\u003eRateLimiter\u003c/code\u003e实现来确定是否允许当前请求继续进行。如果不允许，将返回 \u0026ldquo;HTTP 429 - Too Many Requests\u0026rdquo;（默认）的状态。\u003c/p\u003e\n\u003cp\u003e这个过滤器需要一个可选的\u003ccode\u003ekeyResolver\u003c/code\u003e参数和特定于速率限制器的参数（在本节后面描述）。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ekeyResolver\u003c/code\u003e是一个实现\u003ccode\u003eKeyResolver\u003c/code\u003e接口的bean。在配置中，使用SpEL来引用Bean的名字。\u003ccode\u003e#{@myKeyResolver}\u003c/code\u003e是一个SpEL表达式，它引用了一个名为\u003ccode\u003emyKeyResolver\u003c/code\u003e的bean。下面的列表显示了\u003ccode\u003eKeyResolver\u003c/code\u003e的接口。\u003c/p\u003e\n\u003cp\u003eExample 30. KeyResolver.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003einterface\u003c/span\u003e \u003cspan class="nc"\u003eKeyResolver\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eresolve\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eServerWebExchange\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eKeyResolver\u003c/code\u003e接口让可插拔的策略得出限制请求的密钥。在未来的里程碑版本中，会有一些\u003ccode\u003eKeyResolver\u003c/code\u003e的实现。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eKeyResolver\u003c/code\u003e的默认实现是\u003ccode\u003ePrincipalNameKeyResolver\u003c/code\u003e，它从\u003ccode\u003eServerWebExchange\u003c/code\u003e中检索\u003ccode\u003ePrincipal\u003c/code\u003e并调用\u003ccode\u003ePrincipal.getName()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e默认情况下，如果\u003ccode\u003eKeyResolver\u003c/code\u003e没有找到一个密钥，请求将被拒绝。你可以通过设置\u003ccode\u003espring.cloud.gateway.filter.request-rate-limiter.deny-empty-key\u003c/code\u003e（\u003ccode\u003etrue\u003c/code\u003e或\u003ccode\u003efalse\u003c/code\u003e）和\u003ccode\u003espring.cloud.gateway.filter.request-rate-limiter.empty-key-status-code\u003c/code\u003e属性调整这种行为。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRequestRateLimiter\u003c/code\u003e 不能用 \u0026ldquo;快捷方式\u0026rdquo; 符号来配置。下面的例子是无效的\u003c/p\u003e\n\u003cp\u003eExample 31. application.properties\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003e# INVALID SHORTCUT CONFIGURATION\nspring.cloud.gateway.routes[0].filters[0]=RequestRateLimiter=2, 2, #{@userkeyresolver}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="6101-redis-ratelimiter"\u003e6.10.1. Redis RateLimiter\u003c/h4\u003e\n\u003cp\u003eRedis的实现是基于\u003ca href="https://stripe.com/blog/rate-limiters"\u003eStripe\u003c/a\u003e的工作。它需要使用\u003ccode\u003espring-boot-starter-data-redis-reactive\u003c/code\u003e Spring Boot启动器。\u003c/p\u003e\n\u003cp\u003e使用的算法是\u003ca href="https://en.wikipedia.org/wiki/Token_bucket"\u003eToken Bucket Algorithm\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eredis-rate-limiter.replenishRate\u003c/code\u003e属性是你希望用户每秒可以做多少个请求，而不允许有任何放弃的请求。这就是代币桶被填充的速度。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eredis-rate-limiter.burstCapacity\u003c/code\u003e属性是允许一个用户在一秒钟内完成的最大请求数。这是代币桶可以容纳的代币数量。将此值设置为零，可以阻止所有请求。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eredis-rate-limiter.requestedTokens\u003c/code\u003e属性是一个请求需要花费多少代币。这是每次请求时从桶中取出的代币数量，默认为\u003ccode\u003e1\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e稳定的速率是通过在\u003ccode\u003ereplenishRate\u003c/code\u003e和\u003ccode\u003eburstCapacity\u003c/code\u003e中设置相同的值来完成的。通过设置\u003ccode\u003eburstCapacity\'高于\u003c/code\u003ereplenishRate\'，可以允许临时的突发。在这种情况下，速率限制器需要在突发之间允许一些时间（根据\u003ccode\u003ereplenishRate\u003c/code\u003e），因为连续两次突发将导致请求被放弃（\u003ccode\u003eHTTP 429 - Too Many Requests\u003c/code\u003e）。下面的列表配置了一个\u003ccode\u003eredis-rate-limiter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e通过设置 \u003ccode\u003ereplenishRate\u003c/code\u003e 为想要的请求数，\u003ccode\u003erequestedTokens\u003c/code\u003e 为秒数，\u003ccode\u003eburstCapacity\u003c/code\u003e 为 \u003ccode\u003ereplenishRate\u003c/code\u003e 和 \u003ccode\u003erequestedTokens\u003c/code\u003e 的乘积，来实现低于 \u003ccode\u003e1 request/s\u003c/code\u003e 的速率限制，例如，设置 \u003ccode\u003ereplenishRate=1\u003c/code\u003e，\u003ccode\u003erequestedTokens=60\u003c/code\u003e 和 \u003ccode\u003eburstCapacity=60\u003c/code\u003e 将导致限制为 \u003ccode\u003e1 request/min\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 32. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erequestratelimiter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eRequestRateLimiter\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eredis-rate-limiter.replenishRate\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eredis-rate-limiter.burstCapacity\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e20\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eredis-rate-limiter.requestedTokens\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面的例子在Java中配置了一个KeyResolver。\u003c/p\u003e\n\u003cp\u003eExample 33. Config.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="n"\u003eKeyResolver\u003c/span\u003e \u003cspan class="nf"\u003euserKeyResolver\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ejust\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetRequest\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003egetQueryParams\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003egetFirst\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e));\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这定义了每个用户的请求率限制为10。爆发20次是允许的，但是，在下一秒，只有10个请求可以使用。\u003ccode\u003eKeyResolver\u003c/code\u003e 是一个简单的，获得 \u003ccode\u003euser\u003c/code\u003e 请求参数（注意，不建议在生产中这样做）。\u003c/p\u003e\n\u003cp\u003e你也可以把速率限制器定义为一个实现\u003ccode\u003eRateLimiter\u003c/code\u003e接口的bean。在配置中，你可以用SpEL来引用bean的名字。\u003ccode\u003e#{@myRateLimiter}\u003c/code\u003e是一个SpEL表达式，引用一个名为\u003ccode\u003emyRateLimiter\u003c/code\u003e的bean。下面的列表定义了一个速率限制器，它使用了前面列表中定义的\u003ccode\u003eKeyResolver\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 34. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erequestratelimiter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eRequestRateLimiter\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003erate-limiter\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;#{@myRateLimiter}\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ekey-resolver\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;#{@userKeyResolver}\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="611-the-redirectto-gatewayfilter-factory"\u003e6.11. The RedirectTo GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRedirectTo\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂需要两个参数，\u003ccode\u003estatus\u003c/code\u003e和\u003ccode\u003eurl\u003c/code\u003e。\u003ccode\u003estatus\u003c/code\u003e参数应该是一个300系列的重定向HTTP代码，如301。\u003ccode\u003eurl\u003c/code\u003e参数应该是一个有效的URL。这是\u003ccode\u003eLocation\u003c/code\u003e头的值。对于相对重定向，你应该使用\u003ccode\u003euri: no://op\u003c/code\u003e作为路由定义的URI。下面的列表配置了一个\u003ccode\u003eRedirectTo\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 35. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eprefixpath_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRedirectTo=302, https://acme.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将发送一个带有\u003ccode\u003eLocation:https://acme.org\u003c/code\u003e头的状态302来执行重定向。\u003c/p\u003e\n\u003ch3 id="612-the-removerequestheader-gatewayfilter-factory"\u003e6.12. The RemoveRequestHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eRemoveRequestHeader GatewayFilter工厂需要一个name参数。它是要删除的头的名称。下面的列表配置了一个RemoveRequestHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 36. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eremoverequestheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRemoveRequestHeader=X-Request-Foo\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这在向下游发送之前删除了\u003ccode\u003eX-Request-Foo\u003c/code\u003e标头。\u003c/p\u003e\n\u003ch3 id="613-removeresponseheader-gatewayfilter-factory"\u003e6.13. RemoveResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eRemoveResponseHeader GatewayFilter工厂需要一个name参数。它是要删除的头的名称。下面的列表配置了一个RemoveResponseHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 37. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eremoveresponseheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRemoveResponseHeader=X-Response-Foo\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e他将在响应返回到网关客户端之前从响应中删除\u003ccode\u003eX-Response-Foo\u003c/code\u003e头。\u003c/p\u003e\n\u003cp\u003e要删除任何种类的敏感头，你应该为任何你可能想这样做的路由配置这个过滤器。此外，你可以通过使用\u003ccode\u003espring.cloud.gateway.default-filters\u003c/code\u003e来配置一次这个过滤器，并让它应用于所有路由。\u003c/p\u003e\n\u003ch3 id="614-the-removerequestparameter-gatewayfilter-factory"\u003e6.14. The RemoveRequestParameter GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eRemoveRequestParameter GatewayFilter工厂需要一个名称参数。它是要删除的查询参数的名称。下面的例子配置了一个RemoveRequestParameter GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 38. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eremoverequestparameter_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRemoveRequestParameter=red\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这将在向下游发送之前删除\u003ccode\u003ered\u003c/code\u003e参数。\u003c/p\u003e\n\u003ch3 id="615-the-rewritepath-gatewayfilter-factory"\u003e6.15. The RewritePath GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRewritePath\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂接收一个路径\u003ccode\u003eregexp\u003c/code\u003e参数和一个\u003ccode\u003ereplacement\u003c/code\u003e参数。这是用Java正则表达式来重写请求路径的一种灵活方式。下面的列表配置了一个\u003ccode\u003eRewritePath\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 39. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erewritepath_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/red/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRewritePath=/red/?(?\u0026lt;segment\u0026gt;.*), /$\\{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于一个\u003ccode\u003e/red/blue\u003c/code\u003e的请求路径，在进行下游请求之前将路径设置为\u003ccode\u003e/blue\u003c/code\u003e。注意，由于YAML规范，\u003ccode\u003e$\u003c/code\u003e应该被替换成\u003ccode\u003e$\\\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="616-rewritelocationresponseheader-gatewayfilter-factory"\u003e6.16. RewriteLocationResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eRewriteLocationResponseHeader GatewayFilter工厂修改Location响应头的值，通常是为了去掉后台的特定细节。它需要 \u003ccode\u003estripVersionMode\u003c/code\u003e、\u003ccode\u003elocationHeaderName\u003c/code\u003e、\u003ccode\u003ehostValue\u003c/code\u003e 和 \u003ccode\u003eprotocolsRegex\u003c/code\u003e 参数。下面的列表配置了一个RewriteLocationResponseHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 40. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erewritelocationresponseheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRewriteLocationResponseHeader=AS_IN_REQUEST, Location, ,\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如，对于一个\u003ccode\u003ePOST api.example.com/some/object/name\u003c/code\u003e的请求，\u003ccode\u003eLocation\u003c/code\u003e的响应头值\u003ccode\u003eobject-service.prod.example.net/v2/some/object/id\u003c/code\u003e被改写为\u003ccode\u003eapi.example.com/some/object/id\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estripVersionMode\u003c/code\u003e参数有以下可能的值。\u003ccode\u003eNEVER_STRIP\u003c/code\u003e, \u003ccode\u003eAS_IN_REQUEST\u003c/code\u003e (默认), 和 \u003ccode\u003eALWAYS_STRIP\u003c/code\u003e 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNEVER_STRIP\u003c/code\u003e : 即使原始请求路径不包含版本，版本也不会被剥离。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAS_IN_REQUEST\u003c/code\u003e 只有在原始请求路径不包含版本的情况下，版本才会被剥离。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALWAYS_STRIP\u003c/code\u003e 即使原始请求路径包含版本，版本也会被剥离。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ehostValue\u003c/code\u003e参数，如果提供的话，用于替换响应\u003ccode\u003eLocation\u003c/code\u003e头的\u003ccode\u003ehost:port\u003c/code\u003e部分。如果没有提供，则使用\u003ccode\u003eHost\u003c/code\u003e请求头的值。\u003c/p\u003e\n\u003cp\u003e参数 \u003ccode\u003eprotocolsRegex\u003c/code\u003e 必须是一个有效的正则 \u003ccode\u003eString\u003c/code\u003e，与协议名称相匹配。如果没有匹配，过滤器不做任何事情。默认是\u003ccode\u003ehttp|https|ftp|ftps\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="617-the-rewriteresponseheader-gatewayfilter-factory"\u003e6.17. The RewriteResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eRewriteResponseHeader GatewayFilter工厂接受名称、regexp和替换参数。它使用Java正则表达式，以一种灵活的方式重写响应头的值。下面的例子配置了一个RewriteResponseHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 41. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erewriteresponseheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eRewriteResponseHeader=X-Response-Red, , password=[^\u0026amp;]+, password=***\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于一个头值为\u003ccode\u003e/42?user=ford\u0026amp;password=omg!what\u0026amp;flag=true\u003c/code\u003e，它在发出下游请求后被设置为\u003ccode\u003e/42?user=ford\u0026amp;password=***\u0026amp;flag=true\u003c/code\u003e。由于YAML的规范，你必须用\u003ccode\u003e$\\\u003c/code\u003e来表示\u003ccode\u003e$\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="618-the-savesession-gatewayfilter-factory"\u003e6.18. The SaveSession GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eSaveSession GatewayFilter工厂在转发下游调用之前强制进行\u003ccode\u003eWebSession::save\u003c/code\u003e操作。这在使用类似\u003ccode\u003eSpring Session\u003c/code\u003e的懒惰数据存储时特别有用，因为你需要确保在进行转发调用之前已经保存了会话状态。下面的例子配置了一个SaveSession GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 42. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esave_session\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/foo/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSaveSession\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你将\u003ca href="https://projects.spring.io/spring-security/"\u003eSpring Security\u003c/a\u003e与Spring Session集成，并希望确保安全细节已被转发给远程进程，这一点至关重要。\u003c/p\u003e\n\u003ch3 id="619-the-secureheaders-gatewayfilter-factory"\u003e6.19. The SecureHeaders GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eSecureHeaders\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂根据\u003ca href="https://blog.appcanary.com/2017/http-security-headers.html"\u003e本博文\u003c/a\u003e的建议，在响应中添加了一些头信息。\u003c/p\u003e\n\u003cp\u003e添加了以下标题（显示的是其默认值）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eX-Xss-Protection:1 (mode=block\u003c/code\u003e )\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eStrict-Transport-Security (max-age=631138519\u003c/code\u003e )\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eX-Frame-Options (DENY)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eX-Content-Type-Options (nosniff)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReferrer-Policy (no-referrer)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eContent-Security-Policy (default-src \'self\' https:; font-src \'self\' https: data:; img-src \'self\' https: data:; object-src \'none\'; script-src https:; style-src \'self\' https: \'unsafe-inline)\'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eX-Download-Options (noopen)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eX-Permitted-Cross-Domain-Policies (none)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要改变默认值，请在\u003ccode\u003espring.cloud.gateway.filter.secure-headers\u003c/code\u003e命名空间中设置相应的属性。以下属性是可用的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003exss-protection-header\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estrict-transport-security\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex-frame-options\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex-content-type-options\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereferrer-policy\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econtent-security-policy\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex-download-options\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex-permitted-cross-domain-policies\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要禁用默认值，请用逗号分隔的值设置\u003ccode\u003espring.cloud.gateway.filter.secure-headers.disable\u003c/code\u003e属性。下面的例子显示了如何做到这一点。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003espring.cloud.gateway.filter.secure-headers.disable=x-frame-options,strict-transport-security\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e需要使用安全头的小写全名来禁用它。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="620-the-setpath-gatewayfilter-factory"\u003e6.20. The SetPath GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eSetPath GatewayFilter工厂接受一个路径模板参数。它提供了一种简单的方法，通过允许模板化的路径段来操作请求路径。这使用了Spring Framework的URI模板。允许多个匹配段。下面的例子配置了一个SetPath GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 43. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetpath_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/red/{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetPath=/{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于请求路径为\u003ccode\u003e/red/blue\u003c/code\u003e的情况，在进行下游请求前将路径设置为\u003ccode\u003e/blue\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="621-the-setrequestheader-gatewayfilter-factory"\u003e6.21. The SetRequestHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eSetRequestHeader GatewayFilter工厂接受name和value参数。下面的列表配置了一个SetRequestHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 44. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetrequestheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetRequestHeader=X-Request-Red, Blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个\u003ccode\u003eGatewayFilter\u003c/code\u003e替换（而不是添加）所有给定名称的头信息。因此，如果下游服务器响应的是\u003ccode\u003eX-Request-Red:1234\u003c/code\u003e，这将被替换为\u003ccode\u003eX-Request-Red:Blue\u003c/code\u003e，这就是下游服务将收到的内容。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSetRequestHeader\u003c/code\u003e知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并在运行时被扩展。下面的例子配置了一个使用变量的\u003ccode\u003eSetRequestHeader``GatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 45. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetrequestheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003eHost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e{\u003cspan class="l"\u003esegment}.myhost.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetRequestHeader=foo, bar-{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="622-the-setresponseheader-gatewayfilter-factory"\u003e6.22. The SetResponseHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eSetResponseHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂接受\u003ccode\u003ename\u003c/code\u003e和\u003ccode\u003evalue\u003c/code\u003e参数。下面的列表配置了一个\u003ccode\u003eSetResponseHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 46. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetresponseheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetResponseHeader=X-Response-Red, Blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个GatewayFilter会替换（而不是添加）所有给定名称的头信息。因此，如果下游服务器响应的是\u003ccode\u003eX-Response-Red:1234\u003c/code\u003e，这将被替换为\u003ccode\u003eX-Response-Red:Blue\u003c/code\u003e，这就是网关客户端将收到的内容。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSetResponseHeader\u003c/code\u003e知道用于匹配路径或主机的URI变量。URI变量可以在值中使用，并将在运行时被扩展。下面的例子配置了一个\u003ccode\u003eSetResponseHeader``GatewayFilter\u003c/code\u003e，使用了一个变量。\u003c/p\u003e\n\u003cp\u003eExample 47. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetresponseheader_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003eHost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e{\u003cspan class="l"\u003esegment}.myhost.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetResponseHeader=foo, bar-{segment}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="623-the-setstatus-gatewayfilter-factory"\u003e6.23. The SetStatus GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eSetStatus GatewayFilter工厂只接受一个参数，即status。它必须是一个有效的Spring HttpStatus。它可以是\u003ccode\u003e404\u003c/code\u003e的整数值或枚举的字符串表示。\u003ccode\u003eNOT_FOUND\u003c/code\u003e。下面的列表配置了一个SetStatus GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 48. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetstatusstring_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetStatus=BAD_REQUEST\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetstatusint_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetStatus=401\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在这两种情况下，响应的HTTP状态被设置为401。\u003c/p\u003e\n\u003cp\u003e你可以配置\u003ccode\u003eSetStatus\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e，在响应中的一个头中返回代理请求的原始HTTP状态代码。如果配置了以下属性，该头会被添加到响应中。\u003c/p\u003e\n\u003cp\u003eExample 49. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eset-status\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003eoriginal-status-header-name\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eoriginal-http-status\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="624-the-stripprefix-gatewayfilter-factory"\u003e6.24. The StripPrefix GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eStripPrefix GatewayFilter工厂需要一个参数，即parts。parts参数表示在向下游发送请求之前要从路径中剥离的部分的数量。下面的列表配置了一个StripPrefix GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 50. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003enameRoot\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://nameservice\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/name/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eStripPrefix=2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e当通过网关向\u003ccode\u003e/name/blue/red\u003c/code\u003e发出请求时，向\u003ccode\u003enameservice\u003c/code\u003e发出的请求看起来像\u003ccode\u003enameservice/red\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="625-the-retry-gatewayfilter-factory"\u003e6.25. The Retry GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRetry\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂支持以下参数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eretries\u003c/code\u003e : 应该尝试的重试次数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatuses\u003c/code\u003e : 应该重试的HTTP状态代码，用\u003ccode\u003eorg.springframework.http.HttpStatus\u003c/code\u003e表示。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emethods\u003c/code\u003e：应该重试的HTTP方法，用\u003ccode\u003eorg.springframework.http.HttpMethod\u003c/code\u003e表示。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eseries\u003c/code\u003e：要重试的状态代码系列，用\u003ccode\u003eorg.springframework.http.HttpStatus.Series\u003c/code\u003e表示。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexceptions\u003c/code\u003e : 抛出的异常列表，应该被重新尝试。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebackoff\u003c/code\u003e：为重试配置的指数后验。重试的时间间隔为\u003ccode\u003efirstBackoff * (factor ^ n)\u003c/code\u003e，其中\u003ccode\u003en\u003c/code\u003e是迭代次数。如果配置了 \u0026ldquo;maxBackoff\u0026rdquo;，应用的最大后退时间限制为 \u003ccode\u003emaxBackoff\u003c/code\u003e。如果\u003ccode\u003ebasedOnPreviousValue\u003c/code\u003e为真，后退是通过\u003ccode\u003eprevBackoff * factor\u003c/code\u003e计算的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果启用了 \u003ccode\u003eRetry\u003c/code\u003e 过滤器，下列默认值被配置。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eretries\u003c/code\u003e : Three times\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eseries\u003c/code\u003e : 5XX series\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emethods\u003c/code\u003e : GET method\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexceptions\u003c/code\u003e : \u003ccode\u003eIOException\u003c/code\u003e and \u003ccode\u003eTimeoutException\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebackoff\u003c/code\u003e : disabled\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面的列表配置了一个重试的\u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 51. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eretry_test\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:8080/flakey\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eHost=*.retry.com\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eRetry\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eretries\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003estatuses\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eBAD_GATEWAY\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emethods\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eGET,POST\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ebackoff\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e\u003cspan class="nt"\u003efirstBackoff\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e10ms\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e\u003cspan class="nt"\u003emaxBackoff\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e50ms\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e\u003cspan class="nt"\u003efactor\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e\u003cspan class="nt"\u003ebasedOnPreviousValue\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e当使用带有\u003ccode\u003eforward:\u003c/code\u003e前缀的URL的重试过滤器时，应仔细编写目标端点，以便在出现错误时，它不会做任何可能导致响应被发送到客户端并提交的事情。例如，如果目标端点是一个有注释的控制器，目标控制器方法不应该返回\u003ccode\u003eResponseEntity\u003c/code\u003e，并带有错误状态代码。相反，它应该抛出一个\u003ccode\u003eException\u003c/code\u003e或发出一个错误信号（例如，通过\u003ccode\u003eMono.error(ex)\u003c/code\u003e返回值），重试过滤器可以被配置为通过重试来处理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当对任何带有请求体的HTTP方法使用重试过滤器时，请求体将被缓存，网关将变得内存有限。请求体被缓存在一个由\u003ccode\u003eServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR\u003c/code\u003e定义的请求属性中。该对象的类型是\u003ccode\u003eorg.springframework.core.io.buffer.DataBuffer\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="626-the-requestsize-gatewayfilter-factory"\u003e6.26. The RequestSize GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e当请求的大小超过允许的限制时，\u003ccode\u003eRequestSize\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂可以限制请求到达下游服务。该过滤器需要一个\u003ccode\u003emaxSize\u003c/code\u003e参数。\u003ccode\u003emaxSize\u003c/code\u003e是一个\u003ccode\u003eDataSize\u003c/code\u003e类型，所以值可以定义为一个数字，后面有一个可选的\u003ccode\u003eDataUnit\u003c/code\u003e后缀，如\u003ccode\u003eKB\u003c/code\u003e或\u003ccode\u003eMB\u003c/code\u003e。默认值是\u003ccode\u003eB\u003c/code\u003e，表示字节数。它是以字节为单位定义的请求的可允许的大小限制。下面的列表配置了一个\u003ccode\u003eRequestSize\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 52. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003erequest_size_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:8080/upload\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/upload\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eRequestSize\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003emaxSize\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e5000000\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRequestSize GatewayFilter工厂将响应状态设置为413 Payload Too Large，当请求由于大小而被拒绝时，会有一个额外的头 errorMessage。下面的例子显示了这样一个errorMessage。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-text" data-lang="text"\u003eerrorMessage` : `Request size is larger than permissible limit. Request size is 6.0 MB where permissible limit is 5.0 MB\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e如果在路由定义中没有提供过滤参数，默认请求大小被设置为5MB。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="627-the-setrequesthostheader-gatewayfilter-factory"\u003e6.27. The SetRequestHostHeader GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e在某些情况下，host header可能需要被重写。在这种情况下，SetRequestHostHeader GatewayFilter工厂可以将现有的host header替换成指定的vaue。该过滤器需要一个\u003ccode\u003ehost\u003c/code\u003e参数。下面的列表配置了一个SetRequestHostHeader GatewayFilter。\u003c/p\u003e\n\u003cp\u003eExample 53. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eset_request_host_header_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:8080/headers\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/headers\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eSetRequestHostHeader\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ehost\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eexample.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eSetRequestHostHeader\u003c/code\u003e \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂将主机头的值替换为\u003ccode\u003eexample.org\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="628-modify-a-request-body-gatewayfilter-factory"\u003e6.28. Modify a Request Body GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e你可以使用ModifyRequestBody过滤器，在网关向下游发送请求体之前对其进行修改。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个过滤器只能通过使用Java DSL来配置。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面的列表显示了如何修改一个请求体GatewayFilter。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;rewrite_request_obj\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ehost\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;*.rewriterequestobj.org\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eprefixPath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/httpbin\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emodifyRequestBody\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eHello\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eMediaType\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eAPPLICATION_JSON_VALUE\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n                    \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003es\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ejust\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eHello\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003es\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etoUpperCase\u003c/span\u003e\u003cspan class="o"\u003e())))).\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eHello\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="nf"\u003eHello\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="nf"\u003eHello\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ethis\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emessage\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003egetMessage\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003esetMessage\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ethis\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emessage\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003emessage\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e如果请求没有正文，\u003ccode\u003eRewriteFilter\u003c/code\u003e将被传递为空。应该返回\u003ccode\u003eMono.empty()\u003c/code\u003e来指定请求中缺少的主体。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="629-modify-a-response-body-gatewayfilter-factory"\u003e6.29. Modify a Response Body GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003e你可以使用ModifyResponseBody过滤器来修改响应体，然后再把它送回给客户端。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个过滤器只能通过使用Java DSL来配置。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面的列表显示了如何修改一个响应体GatewayFilter。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;rewrite_response_upper\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ehost\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;*.rewriteresponseupper.org\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eprefixPath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/httpbin\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emodifyResponseBody\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n                    \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003es\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ejust\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003es\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etoUpperCase\u003c/span\u003e\u003cspan class="o"\u003e()))).\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e如果响应没有正文，\u003ccode\u003eRewriteFilter\u003c/code\u003e将被传递为空。应该返回\u003ccode\u003eMono.empty()\u003c/code\u003e来指定响应中缺少的主体。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="630-token-relay-gatewayfilter-factory"\u003e6.30. Token Relay GatewayFilter Factory\u003c/h3\u003e\n\u003cp\u003eToken Relay是指OAuth2消费者作为客户端，将传入的令牌转发给传出的资源请求。消费者可以是一个纯粹的客户端（如SSO应用程序）或一个资源服务器。\u003c/p\u003e\n\u003cp\u003eSpring Cloud Gateway可以将OAuth2访问令牌转发到它所代理的服务的下游。要在网关中添加这个功能，你需要像这样添加TokenRelayGatewayFilterFactory。\u003c/p\u003e\n\u003cp\u003eApp.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003ecustomRouteLocator\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;resource\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/resource\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                    \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etokenRelay\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e\n                    \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;http://localhost:9000\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或者这样\u003c/p\u003e\n\u003cp\u003eapplication.yaml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eresource\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:9000\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/resource\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eTokenRelay=\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e它将（除了登录用户和抓取令牌外）把认证令牌传递给下游的服务（在这里是\u003ccode\u003e/resource\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e要为Spring Cloud Gateway启用这个功能，需要添加以下依赖项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.boot:spring-boot-starter-oauth2-client\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e它是如何工作的？{githubmaster}/src/main/java/org/springframework/cloud/gateway/security/TokenRelayGatewayFilterFactory.java[filter]从当前认证的用户中提取访问令牌，并将其放入下游请求的请求头。\u003c/p\u003e\n\u003cp\u003e完整的工作样本见\u003ca href="https://github.com/spring-cloud-samples/sample-gateway-oauth2login"\u003e该项目\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e只有当适当的\u003ccode\u003espring.security.oauth2.client.*\u003c/code\u003e属性被设置时，TokenRelayGatewayFilterFactory Bean才会被创建，这将触发\u003ccode\u003eReactiveClientRegistrationRepository\u003c/code\u003e Bean的创建。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eTokenRelayGatewayFilterFactory\u003c/code\u003e使用的\u003ccode\u003eReactiveOAuth2AuthorizedClientService\u003c/code\u003e的默认实现使用了一个内存数据存储。如果你需要一个更强大的解决方案，你将需要提供你自己的实现\u003ccode\u003eReactiveOAuth2AuthorizedClientService\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="631-default-filters"\u003e6.31. Default Filters\u003c/h3\u003e\n\u003cp\u003e要添加一个过滤器并将其应用于所有路由，可以使用 \u003ccode\u003espring.cloud.gateway.default-filters\u003c/code\u003e。这个属性需要一个过滤器的列表。下面的列表定义了一组默认过滤器。\u003c/p\u003e\n\u003cp\u003eExample 54. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefault-filters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="l"\u003eAddResponseHeader=X-Response-Default-Red, Default-Blue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="l"\u003ePrefixPath=/httpbin\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="7-global-filters"\u003e7. Global Filters\u003c/h2\u003e\n\u003cp\u003eGlobalFilter接口的签名与GatewayFilter相同。这些是特殊的过滤器，有条件地应用于所有路由。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个接口和它的用法在未来的里程碑版本中可能会有变化。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="71-combined-global-filter-and-gatewayfilter-ordering"\u003e7.1. Combined Global Filter and GatewayFilter Ordering\u003c/h3\u003e\n\u003cp\u003e当一个请求与路由匹配时，过滤网络处理器将\u003ccode\u003eGlobalFilter\u003c/code\u003e的所有实例和\u003ccode\u003eGatewayFilter\u003c/code\u003e的所有路由特定实例添加到一个过滤链中。这个组合的过滤器链由\u003ccode\u003eorg.springframework.core.Ordered\u003c/code\u003e接口进行排序，你可以通过实现\u003ccode\u003egetOrder()\u003c/code\u003e方法来设置这个接口。\u003c/p\u003e\n\u003cp\u003e由于Spring Cloud Gateway区分了过滤器逻辑执行的 \u0026ldquo;pre\u0026quot;和 \u0026ldquo;post\u0026quot;阶段（见如何工作），优先级最高的过滤器在 \u0026ldquo;pre\u0026quot;阶段是第一个，在 \u0026ldquo;post\u0026quot;阶段是最后一个。\u003c/p\u003e\n\u003cp\u003e下面的列表配置了一个过滤器链。\u003c/p\u003e\n\u003cp\u003eExample 55. ExampleConfiguration.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eGlobalFilter\u003c/span\u003e \u003cspan class="nf"\u003ecustomFilter\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eCustomGlobalFilter\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eCustomGlobalFilter\u003c/span\u003e \u003cspan class="kd"\u003eimplements\u003c/span\u003e \u003cspan class="n"\u003eGlobalFilter\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eOrdered\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eVoid\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eServerWebExchange\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eGatewayFilterChain\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="n"\u003elog\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003einfo\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;custom global filter\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kt"\u003eint\u003c/span\u003e \u003cspan class="nf"\u003egetOrder\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="o"\u003e-\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="72-forward-routing-filter"\u003e7.2. Forward Routing Filter\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eForwardRoutingFilter\u003c/code\u003e在exchange attribute \u003ccode\u003eServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR\u003c/code\u003e中寻找一个URI。如果URL有一个\u003ccode\u003eforward\u003c/code\u003e方案（如\u003ccode\u003eforward:///localendpoint\u003c/code\u003e），它将使用Spring的\u003ccode\u003eDispatcherHandler\u003c/code\u003e来处理请求。请求URL的路径部分被转发URL中的路径所覆盖。未修改的原始URL被附加到\u003ccode\u003eServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR\u003c/code\u003e属性的列表中。\u003c/p\u003e\n\u003ch3 id="73-the-reactiveloadbalancerclientfilter"\u003e7.3. The ReactiveLoadBalancerClientFilter\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eReactiveLoadBalancerClientFilter\u003c/code\u003e在名为\u003ccode\u003eServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR\u003c/code\u003e的交换属性中寻找一个URI。如果URL有一个\u003ccode\u003elb\u003c/code\u003e方案（如\u003ccode\u003elb://myservice\u003c/code\u003e），它使用Spring Cloud的\u003ccode\u003eReactorLoadBalancer\u003c/code\u003e将名称（本例中的\u003ccode\u003emyservice\u003c/code\u003e）解析为实际的主机和端口，并替换同一属性中的URI。未修改的原始URL被追加到\u003ccode\u003eServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR\u003c/code\u003e属性的列表中。过滤器也会查看\u003ccode\u003eServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR\u003c/code\u003e属性，看它是否等于\u003ccode\u003elb\u003c/code\u003e。如果是的话，同样的规则也适用。下面的列表配置了一个\u003ccode\u003eReactiveLoadBalancerClientFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eExample 56. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003emyRoute\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elb://service\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/service/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e默认情况下，当服务实例不能被\u003ccode\u003eReactorLoadBalancer\u003c/code\u003e找到时，会返回\u003ccode\u003e503\u003c/code\u003e。你可以通过设置\u003ccode\u003espring.cloud.gateway.loadbalancer.use404=true\u003c/code\u003e将网关配置为返回\u003ccode\u003e404\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e从\u003ccode\u003eReactiveLoadBalancerClientFilter\u003c/code\u003e返回的\u003ccode\u003eServiceInstance\u003c/code\u003e的\u003ccode\u003eisSecure\u003c/code\u003e值覆盖了向网关发出的请求中指定的方案。例如，如果请求通过HTTPS进入Gateway，但\u003ccode\u003eServiceInstance\u003c/code\u003e表明它不安全，那么下游请求将通过HTTP进行。相反的情况也可以适用。然而，如果在网关配置中为路由指定了 \u003ccode\u003eGATEWAY_SCHEME_PREFIX_ATTR\u003c/code\u003e，那么前缀将被剥离，来自路由 URL 的结果方案将覆盖 \u003ccode\u003eServiceInstance\u003c/code\u003e 的配置。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGateway支持所有的LoadBalancer功能。你可以在\u003ca href="https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer"\u003eSpring Cloud Commons documentation\u003c/a\u003e中阅读更多关于它们的信息。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="74-the-netty-routing-filter"\u003e7.4. The Netty Routing Filter\u003c/h3\u003e\n\u003cp\u003e如果位于\u003ccode\u003eServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR\u003c/code\u003e exchange attribute 中的URL有一个http或https方案，Netty路由过滤器就会运行。它使用Netty HttpClient来进行下游代理请求。响应被放在\u003ccode\u003eServerWebExchangeUtils.CLIENT_RESPONSE_ATTR\u003c/code\u003e exchange attribute中，供以后的过滤器使用。(还有一个实验性的WebClientHttpRoutingFilter，执行同样的功能，但不需要Netty。)\u003c/p\u003e\n\u003ch3 id="75-the-netty-write-response-filter"\u003e7.5. The Netty Write Response Filter\u003c/h3\u003e\n\u003cp\u003e如果在\u003ccode\u003eServerWebExchangeUtils.CLIENT_RESPONSE_ATTR\u003c/code\u003e exchange attribute中有一个Netty HttpClientResponse，NettyWriteResponseFilter就会运行。它在所有其他过滤器完成后运行，并将代理响应写回网关客户端响应。(还有一个实验性的WebClientWriteResponseFilter，执行同样的功能，但不需要Netty。)\u003c/p\u003e\n\u003ch3 id="76-the-routetorequesturl-filter"\u003e7.6. The RouteToRequestUrl Filter\u003c/h3\u003e\n\u003cp\u003e如果在\u003ccode\u003eServerWebExchangeUtils.GATEWAY_ROUTE_ATTR\u003c/code\u003e exchange attribute中有一个Route对象，RouteToRequestUrlFilter会运行。它创建了一个新的URI，基于请求URI，但用路由对象的URI属性进行更新。新的URI被放置在\u003ccode\u003eServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR\u003c/code\u003e exchange attribute`中。\u003c/p\u003e\n\u003cp\u003e如果URI有一个方案前缀，如\u003ccode\u003elb:ws://serviceid\u003c/code\u003e，lb方案将从URI中剥离，并放在\u003ccode\u003eServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR\u003c/code\u003e中，以便以后在过滤器链中使用。\u003c/p\u003e\n\u003ch3 id="77-the-websocket-routing-filter"\u003e7.7. The Websocket Routing Filter\u003c/h3\u003e\n\u003cp\u003e如果位于\u003ccode\u003eServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR\u003c/code\u003e exchange attribute中的URL有ws或wss方案，则运行websocket路由过滤器。它使用Spring WebSocket基础设施来转发下游的websocket请求。\u003c/p\u003e\n\u003cp\u003e你可以通过在URI前加上lb，如\u003ccode\u003elb:ws://serviceid\u003c/code\u003e，来平衡websocket的负载。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你使用\u003ca href="https://github.com/sockjs"\u003eSockJS\u003c/a\u003e作为普通HTTP的后备方案，你应该配置一个普通的HTTP路由以及websocket路由。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e下面的列表配置了一个websocket路由过滤器。\u003c/p\u003e\n\u003cp\u003eExample 57. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="c"\u003e# SockJS route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ewebsocket_sockjs_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:3001\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/websocket/info/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="c"\u003e# Normal Websocket route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ewebsocket_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ews://localhost:3001\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003ePath=/websocket/**\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="78-the-gateway-metrics-filter"\u003e7.8. The Gateway Metrics Filter\u003c/h3\u003e\n\u003cp\u003e要启用网关指标，请添加\u003ccode\u003espring-boot-starter-actuator\u003c/code\u003e作为项目依赖。然后，默认情况下，只要属性\u003ccode\u003espring.cloud.gateway.metrics.enabled\u003c/code\u003e没有设置为\u003ccode\u003efalse\u003c/code\u003e，网关指标过滤器就会运行。这个过滤器添加了一个名为\u003ccode\u003egateway.requests\u003c/code\u003e的定时器指标，标签如下。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erouteId\u003c/code\u003e : 路径ID。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erouteUri\u003c/code\u003e : API被路由到的URI。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoutcome\u003c/code\u003e : 结果，由\u003ca href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.Series.html"\u003eHttpStatus.Series\u003c/a\u003e分类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatus\u003c/code\u003e : 返回给客户端的请求的HTTP状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttpStatusCode\u003c/code\u003e : 返回给客户端的请求的HTTP状态。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttpMethod\u003c/code\u003e : 请求使用的HTTP方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些指标可以从\u003ccode\u003e/actuator/metrics/gateway.requests\u003c/code\u003e中获取，并可以很容易地与Prometheus集成，创建一个\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/images/gateway-grafana-dashboard.jpeg"\u003eGrafana\u003c/a\u003e \u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/gateway-grafana-dashboard.json"\u003e仪表盘\u003c/a\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e要启用Prometheus端点，请添加\u003ccode\u003emicrometer-registry-prometheus\u003c/code\u003e作为项目依赖。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="79-marking-an-exchange-as-routed"\u003e7.9. Marking An Exchange As Routed\u003c/h3\u003e\n\u003cp\u003e在网关路由了一个\u003ccode\u003eServerWeb Exchange\u003c/code\u003e后，它通过在exchange attributes中添加\u003ccode\u003egatewayAlreadyRouted\u003c/code\u003e来标记该交换为 \u0026ldquo;routed\u0026rdquo;。一旦一个请求被标记为已路由，其他的路由过滤器将不再对该请求进行路由，基本上是跳过该过滤器。有一些方便的方法，你可以用来标记一个交换为路由，或者检查一个交换是否已经被路由。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eServerWebExchangeUtils.isAlreadyRouted\u003c/code\u003e接收一个\u003ccode\u003eServerWebExchange\u003c/code\u003e对象并检查它是否已经被 \u0026ldquo;routed\u0026rdquo;。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eServerWebExchangeUtils.setAlreadyRouted\u003c/code\u003e接收一个\u003ccode\u003eServerWebExchange\u003c/code\u003e对象并将其标记为 \u0026ldquo;routed\u0026rdquo;。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="8-httpheadersfilters"\u003e8. HttpHeadersFilters\u003c/h2\u003e\n\u003cp\u003eHttpHeadersFilters在向下游发送请求之前被应用于请求，例如在NettyRoutingFilter。\u003c/p\u003e\n\u003ch3 id="81-forwarded-headers-filter"\u003e8.1. Forwarded Headers Filter\u003c/h3\u003e\n\u003cp\u003eForwarded Headers Filter创建一个Forwarded header来发送给下游的服务。它将当前请求的主机头、方案和端口添加到任何现有的转发头中。\u003c/p\u003e\n\u003ch3 id="82-removehopbyhop-headers-filter"\u003e8.2. RemoveHopByHop Headers Filter\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRemoveHopByHop Headers Filter\u003c/code\u003e 从转发的请求中删除头信息。被移除的默认头信息列表来自\u003ca href="https://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14#section-7.1.3"\u003eIETF\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e默认删除的header是:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnection\u003c/li\u003e\n\u003cli\u003eKeep-Alive\u003c/li\u003e\n\u003cli\u003eProxy-Authenticate\u003c/li\u003e\n\u003cli\u003eProxy-Authorization\u003c/li\u003e\n\u003cli\u003eTE\u003c/li\u003e\n\u003cli\u003eTrailer\u003c/li\u003e\n\u003cli\u003eTransfer-Encoding\u003c/li\u003e\n\u003cli\u003eUpgrade\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要改变这一点，请将\u003ccode\u003espring.cloud.gateway.filter.remove-hop-by-hop.headers\u003c/code\u003e属性设置为要删除的头名称列表。\u003c/p\u003e\n\u003ch3 id="83-xforwarded-headers-filter"\u003e8.3. XForwarded Headers Filter\u003c/h3\u003e\n\u003cp\u003eXForwarded Headers Filter创建各种\u003ccode\u003eX-Forwarded-*\u003c/code\u003e头，以发送到下游服务。它使用当前请求的Host头、方案、端口和路径来创建各种头。\u003c/p\u003e\n\u003cp\u003e创建各个头信息可以由以下布尔属性控制（默认为true）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.for-enabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.host-enabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.port-enabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.proto-enabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.prefix-enabled\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e附加多个header可以由以下布尔属性控制（默认为真）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.for-append\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.host-append\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.port-append\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.proto-append\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003espring.cloud.gateway.x-forwarded.prefix-append\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="9-tls-and-ssl"\u003e9. TLS and SSL\u003c/h2\u003e\n\u003cp\u003e网关可以通过遵循通常的Spring服务器配置来监听HTTPS请求。下面的例子显示了如何做到这一点。\u003c/p\u003e\n\u003cp\u003eExample 58. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003eserver\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003essl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eenabled\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ekey-alias\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003escg\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003escg1234\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ekey-store\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eclasspath:scg-keystore.p12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-type\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePKCS12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以将网关路由到HTTP和HTTPS后端。如果你要路由到HTTPS后端，你可以通过以下配置将网关配置为信任所有下游的证书。\u003c/p\u003e\n\u003cp\u003eExample 59. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ehttpclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003essl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003euseInsecureTrustManager\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用不安全的信任管理器不适合于生产。对于生产部署，你可以用一组已知的证书来配置网关，它可以通过以下配置来信任。\u003c/p\u003e\n\u003cp\u003eExample 60. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ehttpclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003essl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003etrustedX509Certificates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e- \u003cspan class="l"\u003ecert1.pem\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e- \u003cspan class="l"\u003ecert2.pem\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果Spring Cloud Gateway没有配置受信任的证书，就会使用默认的信任存储（你可以通过设置\u003ccode\u003ejavax.net.ssl.trustStore\u003c/code\u003e系统属性来覆盖它）。\u003c/p\u003e\n\u003ch3 id="91-tls-handshake"\u003e9.1. TLS Handshake\u003c/h3\u003e\n\u003cp\u003e网关维护着一个客户端池，它用来路由到后端。当通过HTTPS进行通信时，客户端发起了一个TLS握手。一些超时与这个握手相关。你可以对这些超时进行配置（默认值显示），如下。\u003c/p\u003e\n\u003cp\u003eExample 61. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ehttpclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003essl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003ehandshake-timeout-millis\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e10000\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eclose-notify-flush-timeout-millis\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e3000\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eclose-notify-read-timeout-millis\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e0\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="10-configuration"\u003e10. Configuration\u003c/h2\u003e\n\u003cp\u003eSpring Cloud Gateway的配置是由\u003ccode\u003eRouteDefinitionLocator\u003c/code\u003e实例的集合驱动的。下面的列表显示了\u003ccode\u003eRouteDefinitionLocator\u003c/code\u003e接口的定义。\u003c/p\u003e\n\u003cp\u003eExample 62. RouteDefinitionLocator.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003einterface\u003c/span\u003e \u003cspan class="nc"\u003eRouteDefinitionLocator\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eFlux\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eRouteDefinition\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003egetRouteDefinitions\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e默认情况下，\u003ccode\u003ePropertiesRouteDefinitionLocator\u003c/code\u003e通过使用Spring Boot的\u003ccode\u003e@ConfigurationProperties\u003c/code\u003e机制加载属性。\u003c/p\u003e\n\u003cp\u003e前面的配置例子都使用了一种快捷的符号，即使用位置参数而不是命名参数。下面的两个例子是等价的。\u003c/p\u003e\n\u003cp\u003eExample 63. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetstatus_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eSetStatus\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003estatus\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e401\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003esetstatusshortcut_route\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003efilters\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e- \u003cspan class="l"\u003eSetStatus=401\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e对于网关的某些用途来说，属性已经足够了，但一些生产用例会从外部来源（如数据库）加载配置中受益。未来的里程碑版本将有基于Spring数据存储库的\u003ccode\u003eRouteDefinitionLocator\u003c/code\u003e实现，如\u003ccode\u003eRedis\u003c/code\u003e、\u003ccode\u003eMongoDB\u003c/code\u003e和\u003ccode\u003eCassandra\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id="11-route-metadata-configuration"\u003e11. Route Metadata Configuration\u003c/h2\u003e\n\u003cp\u003e你可以通过使用元数据为每个途径配置额外的参数，如下所示。\u003c/p\u003e\n\u003cp\u003eExample 64. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eroutes\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eroute_with_metadata\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003emetadata\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eoptionName\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;OptionValue\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003ecompositeObject\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eiAmNumber\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e你可以从一个exchange所获取所有的元数据属性，如下所示。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="n"\u003eRoute\u003c/span\u003e \u003cspan class="n"\u003eroute\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetAttribute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eGATEWAY_ROUTE_ATTR\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="c1"\u003e// get all metadata properties\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e\u003cspan class="n"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetMetadata\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="c1"\u003e// get a single metadata property\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e\u003cspan class="n"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetMetadata\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003esomeKey\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="12-http-timeouts-configuration"\u003e12. Http timeouts configuration\u003c/h2\u003e\n\u003cp\u003e可以为所有路由配置Http超时（响应和连接），也可以为每个特定的路由重写。\u003c/p\u003e\n\u003ch3 id="121-全局超时"\u003e12.1. 全局超时\u003c/h3\u003e\n\u003cp\u003e要配置全局http超时。\n\u003ccode\u003econnect-timeout\u003c/code\u003e 必须以毫秒为单位指定。\n\u003ccode\u003eresponse-timeout\u003c/code\u003e 必须以\u003ccode\u003ejava.time.Duration\u003c/code\u003e的形式指定。\u003c/p\u003e\n\u003cp\u003e全局超时\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ehttpclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003econnect-timeout\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e1000\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003eresponse-timeout\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e5s\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="122-每个路由的超时"\u003e12.2. 每个路由的超时\u003c/h3\u003e\n\u003cp\u003e要配置每个路由的超时。\n\u003ccode\u003econnect-timeout\u003c/code\u003e必须以毫秒为单位指定。\n\u003ccode\u003eresponse-timeout\u003c/code\u003e 必须以毫秒为单位指定。\u003c/p\u003e\n\u003cp\u003e通过yaml配置每个路由的超时\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-YAML" data-lang="YAML"\u003e\u003cspan class="w"\u003e      \u003c/span\u003e- \u003cspan class="nt"\u003eid\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eper_route_timeouts\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003euri\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://example.org\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003epredicates\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e- \u003cspan class="nt"\u003ename\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePath\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eargs\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e              \u003c/span\u003e\u003cspan class="nt"\u003epattern\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e/delay/{timeout}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003emetadata\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003eresponse-timeout\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e200\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003econnect-timeout\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e200\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用Java DSL配置每个路由的超时\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kn"\u003eimport static\u003c/span\u003e \u003cspan class="nn"\u003eorg.springframework.cloud.gateway.support.RouteMetadataUtils.CONNECT_TIMEOUT_ATTR\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\u003cspan class="kn"\u003eimport static\u003c/span\u003e \u003cspan class="nn"\u003eorg.springframework.cloud.gateway.support.RouteMetadataUtils.RESPONSE_TIMEOUT_ATTR\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n      \u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n      \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003ecustomRouteLocator\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003erouteBuilder\u003c/span\u003e\u003cspan class="o"\u003e){\u003c/span\u003e\n         \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003erouteBuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n               \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;test1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n                  \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ehost\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;*.somehost.org\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eand\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/somepath\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddRequestHeader\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;header1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;header-value-1\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n                        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;http://someuri\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emetadata\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRESPONSE_TIMEOUT_ATTR\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003e200\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emetadata\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eCONNECT_TIMEOUT_ATTR\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003e200\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n               \u003cspan class="o"\u003e})\u003c/span\u003e\n               \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n      \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="123-fluent-java-routes-api"\u003e12.3. Fluent Java Routes API\u003c/h3\u003e\n\u003cp\u003e为了允许在Java中进行简单的配置，RouteLocatorBuilder Bean包括一个fluent的API。下面的列表显示了它是如何工作的。\u003c/p\u003e\n\u003cp\u003eExample 65. GatewaySampleApplication.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="c1"\u003e// static imports from GatewayFilters and RoutePredicates\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eRouteLocator\u003c/span\u003e \u003cspan class="nf"\u003ecustomRouteLocator\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eRouteLocatorBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003eThrottleGatewayFilterFactory\u003c/span\u003e \u003cspan class="n"\u003ethrottle\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroutes\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ehost\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;**.abc.org\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eand\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/image/png\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e\n                        \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddResponseHeader\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;X-TestHeader\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;foobar\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;http://httpbin.org:80\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/image/webp\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e\n                        \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eaddResponseHeader\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;X-AnotherHeader\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;http://httpbin.org:80\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emetadata\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eroute\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003er\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003er\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eorder\u003c/span\u003e\u003cspan class="o"\u003e(-\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ehost\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;**.throttle.org\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eand\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/get\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilters\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ef\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003ef\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ethrottle\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eapply\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n                        \u003cspan class="n"\u003e1\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n                        \u003cspan class="n"\u003e10\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n                        \u003cspan class="n"\u003eTimeUnit\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eSECONDS\u003c/span\u003e\u003cspan class="o"\u003e)))\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;http://httpbin.org:80\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n                \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emetadata\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e)\u003c/span\u003e\n            \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种风格也允许更多的自定义谓词断言。由\u003ccode\u003eRouteDefinitionLocator\u003c/code\u003e Bean定义的谓词使用逻辑上的和来组合。通过使用流畅的Java API，你可以在\u003ccode\u003ePredicate\u003c/code\u003e类上使用\u003ccode\u003eand()\u003c/code\u003e、\u003ccode\u003eor()\u003c/code\u003e和\u003ccode\u003enegate()\u003c/code\u003e操作符。\u003c/p\u003e\n\u003ch3 id="124-the-discoveryclient-route-definition-locator"\u003e12.4. The DiscoveryClient Route Definition Locator\u003c/h3\u003e\n\u003cp\u003e你可以将网关配置为基于在\u003ccode\u003eDiscoveryClient\u003c/code\u003e兼容的服务注册中心注册的服务来创建路由。\u003c/p\u003e\n\u003cp\u003e要启用这一点，请设置\u003ccode\u003espring.cloud.gateway.discovery.locator.enabled=true\u003c/code\u003e，并确保\u003ccode\u003eDiscoveryClien\u003c/code\u003et`实现（如Netflix Eureka、Consul或Zookeeper）位于classpath上并已启用。\u003c/p\u003e\n\u003ch4 id="1241-为discoveryclient路由配置谓词和过滤器"\u003e12.4.1. 为DiscoveryClient路由配置谓词和过滤器\u003c/h4\u003e\n\u003cp\u003e默认情况下，网关为用\u003ccode\u003eDiscoveryClient\u003c/code\u003e创建的路由定义了一个谓词和过滤器。\u003c/p\u003e\n\u003cp\u003e默认谓词是用\u003ccode\u003e/serviceId/**\u003c/code\u003e模式定义的路径谓词，其中\u003ccode\u003eserviceId\u003c/code\u003e是来自\u003ccode\u003eDiscoveryClient\u003c/code\u003e的服务的ID。\u003c/p\u003e\n\u003cp\u003e默认过滤器是一个重写路径过滤器，采用重写词\u003ccode\u003e/serviceId/?(?\u0026lt;remaining\u0026gt;.*)\u003c/code\u003e和替换词\u003ccode\u003e/${remaining}\u003c/code\u003e。在请求被发送到下游之前，这将从路径中剥离服务ID。\u003c/p\u003e\n\u003cp\u003e如果你想自定义\u003ccode\u003eDiscoveryClient\u003c/code\u003e路由使用的谓词或过滤器，请设置\u003ccode\u003espring.cloud.gateway.discovery.locator.predicates[x]\u003c/code\u003e 和 \u003ccode\u003espring.cloud.gateway.discovery.locator.filters[y]\u003c/code\u003e。这样做时，如果你想保留该功能，你需要确保包括前面显示的默认谓词和过滤器。下面的例子显示了这是什么样子。\u003c/p\u003e\n\u003cp\u003eExample 66. application.properties\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003espring.cloud.gateway.discovery.locator.predicates[0].name: Path\nspring.cloud.gateway.discovery.locator.predicates[0].args[pattern]: \u0026#34;\u0026#39;/\u0026#39;+serviceId+\u0026#39;/**\u0026#39;\u0026#34;\nspring.cloud.gateway.discovery.locator.predicates[1].name: Host\nspring.cloud.gateway.discovery.locator.predicates[1].args[pattern]: \u0026#34;\u0026#39;**.foo.com\u0026#39;\u0026#34;\nspring.cloud.gateway.discovery.locator.filters[0].name: CircuitBreaker\nspring.cloud.gateway.discovery.locator.filters[0].args[name]: serviceId\nspring.cloud.gateway.discovery.locator.filters[1].name: RewritePath\nspring.cloud.gateway.discovery.locator.filters[1].args[regexp]: \u0026#34;\u0026#39;/\u0026#39; + serviceId + \u0026#39;/?(?\u0026lt;remaining\u0026gt;.*)\u0026#39;\u0026#34;\nspring.cloud.gateway.discovery.locator.filters[1].args[replacement]: \u0026#34;\u0026#39;/${remaining}\u0026#39;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="13-reactor-netty-访问日志"\u003e13. Reactor Netty 访问日志\u003c/h2\u003e\n\u003cp\u003e要启用 Reactor Netty 访问日志，设置 \u003ccode\u003e-Dreactor.netty.http.server.accessLogEnabled=true\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e它必须是一个Java系统属性，而不是一个Spring Boot属性。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e你可以配置日志系统，使其有一个单独的访问日志文件。下面的例子创建了一个Logback配置。\u003c/p\u003e\n\u003cp\u003eExample 67. logback.xml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-xml" data-lang="xml"\u003e    \u003cspan class="nt"\u003e\u0026lt;appender\u003c/span\u003e \u003cspan class="na"\u003ename=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;accessLog\u0026#34;\u003c/span\u003e \u003cspan class="na"\u003eclass=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;ch.qos.logback.core.FileAppender\u0026#34;\u003c/span\u003e\u003cspan class="nt"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class="nt"\u003e\u0026lt;file\u0026gt;\u003c/span\u003eaccess_log.log\u003cspan class="nt"\u003e\u0026lt;/file\u0026gt;\u003c/span\u003e\n        \u003cspan class="nt"\u003e\u0026lt;encoder\u0026gt;\u003c/span\u003e\n            \u003cspan class="nt"\u003e\u0026lt;pattern\u0026gt;\u003c/span\u003e%msg%n\u003cspan class="nt"\u003e\u0026lt;/pattern\u0026gt;\u003c/span\u003e\n        \u003cspan class="nt"\u003e\u0026lt;/encoder\u0026gt;\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026lt;/appender\u0026gt;\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026lt;appender\u003c/span\u003e \u003cspan class="na"\u003ename=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;async\u0026#34;\u003c/span\u003e \u003cspan class="na"\u003eclass=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;ch.qos.logback.classic.AsyncAppender\u0026#34;\u003c/span\u003e\u003cspan class="nt"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class="nt"\u003e\u0026lt;appender-ref\u003c/span\u003e \u003cspan class="na"\u003eref=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;accessLog\u0026#34;\u003c/span\u003e \u003cspan class="nt"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026lt;/appender\u0026gt;\u003c/span\u003e\n\n    \u003cspan class="nt"\u003e\u0026lt;logger\u003c/span\u003e \u003cspan class="na"\u003ename=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;reactor.netty.http.server.AccessLog\u0026#34;\u003c/span\u003e \u003cspan class="na"\u003elevel=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e \u003cspan class="na"\u003eadditivity=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e\u003cspan class="nt"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class="nt"\u003e\u0026lt;appender-ref\u003c/span\u003e \u003cspan class="na"\u003eref=\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;async\u0026#34;\u003c/span\u003e\u003cspan class="nt"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026lt;/logger\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="14-cors-跨域配置"\u003e14. CORS 跨域配置\u003c/h2\u003e\n\u003cp\u003e你可以配置网关来控制CORS行为。全局CORS配置是URL模式与\u003ca href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html"\u003eSpring Framework \u003ccode\u003eCorsConfiguration\u003c/code\u003e\u003c/a\u003e的映射。下面的例子配置了CORS。\u003c/p\u003e\n\u003cp\u003eExample 68. application.yml\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yaml" data-lang="yaml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003ecloud\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003egateway\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eglobalcors\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e        \u003c/span\u003e\u003cspan class="nt"\u003ecors-configurations\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e          \u003c/span\u003e\u003cspan class="nt"\u003e\u0026#39;[/**]\u0026#39;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eallowedOrigins\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;https://docs.spring.io\u0026#34;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e\u003cspan class="nt"\u003eallowedMethods\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e            \u003c/span\u003e- \u003cspan class="l"\u003eGET\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的例子中，对于所有 GET 请求路径，允许来自 \u003ccode\u003edocs.spring.io\u003c/code\u003e 的请求的 CORS 请求。\u003c/p\u003e\n\u003cp\u003e要为未被某些网关路由谓词处理的请求提供相同的 CORS 配置，请将 s\u003ccode\u003epring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping\u003c/code\u003e 属性设置为 \u003ccode\u003etrue\u003c/code\u003e。当你试图支持 CORS 预检请求，而你的路由谓词因为 HTTP 方法是选项而不能评估为 true 时，这很有用。\u003c/p\u003e\n\u003ch2 id="15-actuator-api"\u003e15. Actuator API\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e/gateway\u003c/code\u003e执行器端点可以让你监控并与Spring Cloud Gateway应用互动。要进行远程访问，端点必须在应用程序属性中\u003ca href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html#production-ready-endpoints-enabling-endpoints"\u003e启用\u003c/a\u003e和\u003ca href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html#production-ready-endpoints-exposing-endpoints"\u003e通过HTTP或JMX暴露\u003c/a\u003e。下面的列表显示了如何做到这一点。\u003c/p\u003e\n\u003cp\u003eExample 69. application.properties\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003emanagement.endpoint.gateway.enabled=true # default value\nmanagement.endpoints.web.exposure.include=gateway\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="151-verbose-actuator-format"\u003e15.1. Verbose Actuator Format\u003c/h3\u003e\n\u003cp\u003e在Spring Cloud Gateway中增加了一种新的、更粗略的格式。它为每个路由添加了更多细节，让你查看与每个路由相关的谓词和过滤器，以及任何可用的配置。下面的例子配置了\u003ccode\u003e/actuator/gateway/routes\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e[\u003c/span\u003e\n  \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;predicate\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;(Hosts: [**.addrequestheader.org] \u0026amp;\u0026amp; Paths: [/headers], match trailing slash: true)\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;route_id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;add_request_header_test\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;filters\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e[\u003c/span\u003e\n      \u003cspan class="s2"\u003e\u0026#34;[[AddResponseHeader X-Response-Default-Foo = \u0026#39;Default-Bar\u0026#39;], order = 1]\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n      \u003cspan class="s2"\u003e\u0026#34;[[AddRequestHeader X-Request-Foo = \u0026#39;Bar\u0026#39;], order = 1]\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n      \u003cspan class="s2"\u003e\u0026#34;[[PrefixPath prefix = \u0026#39;/httpbin\u0026#39;], order = 2]\u0026#34;\u003c/span\u003e\n    \u003cspan class="p"\u003e],\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;uri\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;lb://testservice\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;order\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e0\u003c/span\u003e\n  \u003cspan class="p"\u003e}\u003c/span\u003e\n\u003cspan class="p"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个功能默认是启用的。要禁用它，请设置以下属性。\u003c/p\u003e\n\u003cp\u003eExample 70. application.properties\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003espring.cloud.gateway.actuator.verbose.enabled=false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在未来的版本中，这将默认为\u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id="152-retrieving-route-filters"\u003e15.2. Retrieving Route Filters\u003c/h3\u003e\n\u003cp\u003e本节详细介绍了如何检索路由过滤器，包括。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-global-filters"\u003eGlobal Filters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-route-filters"\u003e[gateway-route-filters]\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="1521-global-filters"\u003e15.2.1. Global Filters\u003c/h4\u003e\n\u003cp\u003e要检索应用于所有路由的\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#global-filters"\u003e全局过滤器\u003c/a\u003e，向\u003ccode\u003e/actuator/gateway/globalfilters\u003c/code\u003e发出\u003ccode\u003eGET\u003c/code\u003e请求。得到的响应类似于以下内容。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.ReactiveLoadBalancerClientFilter@77856cc5\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e10100\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@4f6fd101\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e10000\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@32d22650\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e-1\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.ForwardRoutingFilter@106459d9\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e2147483647\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.NettyRoutingFilter@1fbd5e0\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e2147483647\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.ForwardPathFilter@33a71d23\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e0\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@135064ea\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e2147483637\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@23c05889\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e2147483646\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e响应包含全局过滤器的细节，这些过滤器已经到位。对于每个全局过滤器，有一个过滤器对象的字符串表示（例如，\u003ccode\u003eorg.springframework.cloud.gateway.filter.ReactiveLoadBalancerClientFilter@77856cc5\u003c/code\u003e）和过滤器链中相应的\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-combined-global-filter-and-gatewayfilter-ordering"\u003eorder\u003c/a\u003e。 }。\u003c/p\u003e\n\u003ch4 id="1522-route-filters"\u003e15.2.2. Route Filters\u003c/h4\u003e\n\u003cp\u003e要检索应用于路由的\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories"\u003e\u003ccode\u003eGatewayFilter\u003c/code\u003e工厂\u003c/a\u003e，向\u003ccode\u003e/actuator/gateway/routefilters\u003c/code\u003e发出\u003ccode\u003eGET\u003c/code\u003e请求。得到的响应类似于以下内容。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;[AddRequestHeaderGatewayFilterFactory@570ed9c configClass = AbstractNameValueGatewayFilterFactory.NameValueConfig]\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;[SecureHeadersGatewayFilterFactory@fceab5d configClass = Object]\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;[SaveSessionGatewayFilterFactory@4449b273 configClass = Object]\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e响应包含应用于任何特定路由的\u003ccode\u003eGatewayFilter\u003c/code\u003e工厂的细节。对于每个工厂，有一个相应对象的字符串表示（例如，\u003ccode\u003e[SecureHeadersGatewayFilterFactory@fceab5d configClass = Object]\u003c/code\u003e）。请注意，\u003ccode\u003enull\u003c/code\u003e 是由于端点控制器的不完整实现，因为它试图设置过滤器链中的对象的顺序，这不适用于\u003ccode\u003eGatewayFilter\u003c/code\u003e工厂对象。\u003c/p\u003e\n\u003ch3 id="153-刷新路由缓存"\u003e15.3. 刷新路由缓存\u003c/h3\u003e\n\u003cp\u003e要清除路由缓存，请向\u003ccode\u003e/actuator/gateway/refresh\u003c/code\u003e发出一个\u003ccode\u003ePOST\u003c/code\u003e请求。该请求返回一个200，没有响应体。\u003c/p\u003e\n\u003ch3 id="154-检索网关中定义的路由"\u003e15.4. 检索网关中定义的路由\u003c/h3\u003e\n\u003cp\u003e要检索网关中定义的路由，请向\u003ccode\u003e/actuator/gateway/routes\u003c/code\u003e发出\u003ccode\u003eGET\u003c/code\u003e请求。得到的响应类似于以下内容。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e[{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;route_id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;first_route\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;route_object\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;predicate\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$432/1736826640@1e9d7e7d\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;filters\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e[\u003c/span\u003e\n      \u003cspan class="s2"\u003e\u0026#34;OrderedGatewayFilter{delegate=org.springframework.cloud.gateway.filter.factory.PreserveHostHeaderGatewayFilterFactory$$Lambda$436/674480275@6631ef72, order=0}\u0026#34;\u003c/span\u003e\n    \u003cspan class="p"\u003e]\u003c/span\u003e\n  \u003cspan class="p"\u003e},\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;order\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e0\u003c/span\u003e\n\u003cspan class="p"\u003e},\u003c/span\u003e\n\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;route_id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;second_route\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;route_object\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;predicate\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$432/1736826640@cd8d298\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;filters\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e[]\u003c/span\u003e\n  \u003cspan class="p"\u003e},\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;order\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e0\u003c/span\u003e\n\u003cspan class="p"\u003e}]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e响应包含网关中定义的所有路由的详细信息。下表描述了响应中每个元素的结构（每个都是一个路由）。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePath\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroute_id\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003e路由ID\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroute_object.predicate\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eObject\u003c/td\u003e\n\u003ctd\u003e路由 predicate\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroute_object.filters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eArray\u003c/td\u003e\n\u003ctd\u003e应用于路由的\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories"\u003e\u003ccode\u003eGatewayFilter\u003c/code\u003e工厂\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eorder\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNumber\u003c/td\u003e\n\u003ctd\u003e路由 order\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="155-检索指定路由的信息"\u003e15.5. 检索指定路由的信息\u003c/h3\u003e\n\u003cp\u003e要检索一条路由的信息，请向\u003ccode\u003e/actuator/gateway/routes/{id}\u003c/code\u003e发出一个GET请求。(例如，\u003ccode\u003e/actuator/gateway/routes/first_route)\u003c/code\u003e。得到的响应类似于下面的内容。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-json" data-lang="json"\u003e\u003cspan class="p"\u003e{\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;first_route\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;predicates\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e[{\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;Path\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n    \u003cspan class="nt"\u003e\u0026#34;args\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e{\u003c/span\u003e\u003cspan class="nt"\u003e\u0026#34;_genkey_0\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;/first\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e}\u003c/span\u003e\n  \u003cspan class="p"\u003e}],\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;filters\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="p"\u003e[],\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;uri\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;https://www.uri-destination.org\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e,\u003c/span\u003e\n  \u003cspan class="nt"\u003e\u0026#34;order\u0026#34;\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e \u003cspan class="mi"\u003e0\u003c/span\u003e\n\u003cspan class="p"\u003e}\u003c/span\u003e\u003cspan class="err"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下表描述了响应的结构。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePath\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eid\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003e路由ID\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epredicates\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eArray\u003c/td\u003e\n\u003ctd\u003e路由谓词的集合。每一项都定义了一个给定谓词的名称和参数。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efilters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eArray\u003c/td\u003e\n\u003ctd\u003e应用于路由的过滤器集合。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003euri\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eString\u003c/td\u003e\n\u003ctd\u003e路由的目的地URI。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eorder\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNumber\u003c/td\u003e\n\u003ctd\u003e路由的顺序\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="156-创建和删除一个指定的路由"\u003e15.6. 创建和删除一个指定的路由\u003c/h3\u003e\n\u003cp\u003e要创建一个路由，请向\u003ccode\u003e/gateway/routes/{id_route_to_create}\u003c/code\u003e发出\u003ccode\u003ePOST\u003c/code\u003e请求，并以JSON为主体指定路由的字段（见\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-retrieving-information-about-a-particular-route"\u003e检索特定路由的信息\u003c/a\u003e）。\u003c/p\u003e\n\u003cp\u003e要删除一个路由，请向\u003ccode\u003e/gateway/routes/{id_route_to_delete}\u003c/code\u003e发出\u003ccode\u003eDELETE\u003c/code\u003e请求。\u003c/p\u003e\n\u003ch3 id="157-总结所有端点的清单"\u003e15.7. 总结：所有端点的清单\u003c/h3\u003e\n\u003cp\u003e下面的表格总结了Spring Cloud Gateway的执行器端点（注意，每个端点都有\u003ccode\u003e/actuator/gateway\u003c/code\u003e作为基本路径）。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eHTTP Method\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eglobalfilters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e显示应用于路由的全局过滤器的列表。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroutefilters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e显示应用于特定路由的 \u003ccode\u003eGatewayFilter\u003c/code\u003e工厂的列表。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003erefresh\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003e清楚路由缓存\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003eD显示网关中定义的路由列表\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroutes/{id}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e显示指定路由的详细信息\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroutes/{id}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003e添加一个新的路由到网关\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eroutes/{id}\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003e从网关删除一个路由\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="16-故障排除"\u003e16. 故障排除\u003c/h2\u003e\n\u003cp\u003e本节涵盖了你在使用Spring Cloud Gateway时可能出现的常见问题。\u003c/p\u003e\n\u003ch3 id="161-日志级别"\u003e16.1. 日志级别\u003c/h3\u003e\n\u003cp\u003e在\u003ccode\u003eDEBUG\u003c/code\u003e和\u003ccode\u003eTRACE\u003c/code\u003e级别，以下记录器可能包含有价值的故障排除信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.cloud.gateway\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.http.server.reactive\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.web.reactive\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.boot.autoconfigure.web\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereactor.netty\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eredisratelimiter\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="162-wiretap"\u003e16.2. Wiretap\u003c/h3\u003e\n\u003cp\u003eReactor Netty的HttpClient和HttpServer可以启用wiretap。当与 reactor.netty 日志级别设置为 DEBUG 或 TRACE 相结合时，它能够记录信息，例如通过线路发送和接收的头信息和正文。要启用 wiretap，请分别为 HttpServer 和 HttpClient 设置 \u003ccode\u003espring.cloud.gateway.httpserver.wiretap=true\u003c/code\u003e 或 \u003ccode\u003espring.cloud.gateway.httpclient.wiretap=true\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id="17-开发者指南"\u003e17. 开发者指南\u003c/h2\u003e\n\u003cp\u003e这些是编写网关的一些自定义组件的基本指南。\u003c/p\u003e\n\u003ch3 id="171-编写自定义路由谓语工厂"\u003e17.1. 编写自定义路由谓语工厂\u003c/h3\u003e\n\u003cp\u003e为了编写一个Route Predicate，你将需要实现\u003ccode\u003eRoutePredicateFactory\u003c/code\u003e。有一个抽象的类叫做\u003ccode\u003eAbstractRoutePredicateFactory\u003c/code\u003e，你可以扩展它。\u003c/p\u003e\n\u003cp\u003eMyRoutePredicateFactory.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eMyRoutePredicateFactory\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eAbstractRoutePredicateFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eHeaderRoutePredicateFactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="nf"\u003eMyRoutePredicateFactory\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="kd"\u003esuper\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003ePredicate\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eServerWebExchange\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="nf"\u003eapply\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e \u003cspan class="n"\u003econfig\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e// grab configuration from Config object\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n            \u003cspan class="c1"\u003e//grab the request\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="n"\u003eServerHttpRequest\u003c/span\u003e \u003cspan class="n"\u003erequest\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetRequest\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n            \u003cspan class="c1"\u003e//take information from the request to see if it\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="c1"\u003e//matches configuration.\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ematches\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003econfig\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003erequest\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="o"\u003e};\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eConfig\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e//Put the configuration properties for your filter here\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="172-编写自定义gatewayfilter工厂"\u003e17.2. 编写自定义GatewayFilter工厂\u003c/h3\u003e\n\u003cp\u003e要写一个\u003ccode\u003eGatewayFilter\u003c/code\u003e，你必须实现\u003ccode\u003eGatewayFilterFactory\u003c/code\u003e。你可以扩展一个名为\u003ccode\u003eAbstractGatewayFilterFactory\u003c/code\u003e的抽象类。下面的例子展示了如何做到这一点。\u003c/p\u003e\n\u003cp\u003eExample 71. PreGatewayFilterFactory.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003ePreGatewayFilterFactory\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eAbstractGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003ePreGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="nf"\u003ePreGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="kd"\u003esuper\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eGatewayFilter\u003c/span\u003e \u003cspan class="nf"\u003eapply\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e \u003cspan class="n"\u003econfig\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e// grab configuration from Config object\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n            \u003cspan class="c1"\u003e//If you want to build a \u0026#34;pre\u0026#34; filter you need to manipulate the\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="c1"\u003e//request before calling chain.filter\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="n"\u003eServerHttpRequest\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eBuilder\u003c/span\u003e \u003cspan class="n"\u003ebuilder\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetRequest\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emutate\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n            \u003cspan class="c1"\u003e//use builder to manipulate the request\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emutate\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003erequest\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ebuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e()).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e());\u003c/span\u003e\n        \u003cspan class="o"\u003e};\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eConfig\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e//Put the configuration properties for your filter here\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePostGatewayFilterFactory.java\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003ePostGatewayFilterFactory\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eAbstractGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003ePostGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="nf"\u003ePostGatewayFilterFactory\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="kd"\u003esuper\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eGatewayFilter\u003c/span\u003e \u003cspan class="nf"\u003eapply\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eConfig\u003c/span\u003e \u003cspan class="n"\u003econfig\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e// grab configuration from Config object\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n            \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ethen\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efromRunnable\u003c/span\u003e\u003cspan class="o"\u003e(()\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n                \u003cspan class="n"\u003eServerHttpResponse\u003c/span\u003e \u003cspan class="n"\u003eresponse\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetResponse\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n                \u003cspan class="c1"\u003e//Manipulate the response in some way\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e            \u003cspan class="o"\u003e}));\u003c/span\u003e\n        \u003cspan class="o"\u003e};\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eConfig\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="c1"\u003e//Put the configuration properties for your filter here\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id="1721-在配置中命名自定义过滤器和引用"\u003e17.2.1. 在配置中命名自定义过滤器和引用\u003c/h4\u003e\n\u003cp\u003e自定义过滤器的类名应该以\u003ccode\u003eGatewayFilterFactory\u003c/code\u003e结尾。\u003c/p\u003e\n\u003cp\u003e例如，要在配置文件中引用一个名为\u003ccode\u003eSomething\u003c/code\u003e的过滤器，该过滤器必须在一个名为\u003ccode\u003eSomethingGatewayFilterFactory\u003c/code\u003e的类中。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e可以创建一个没有\u003ccode\u003eGatewayFilterFactory\u003c/code\u003e后缀的网关过滤器，如\u003ccode\u003eAnotherThing\u003c/code\u003e类。这个过滤器可以在配置文件中被引用为\u003ccode\u003eAnotherThing\u003c/code\u003e。这不是一个被支持的命名惯例，这种语法可能在未来的版本中被删除。请更新过滤器的名称，使其符合要求。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="173-writing-custom-global-filters"\u003e17.3. Writing Custom Global Filters\u003c/h3\u003e\n\u003cp\u003e要编写一个自定义的全局过滤器，你必须实现\u003ccode\u003eGlobalFilter\u003c/code\u003e接口。这将过滤器应用于所有的请求。\u003c/p\u003e\n\u003cp\u003e下面的例子分别展示了如何设置全局前置和后置过滤器。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eGlobalFilter\u003c/span\u003e \u003cspan class="nf"\u003ecustomGlobalFilter\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetPrincipal\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emap\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ePrincipal\u003c/span\u003e\u003cspan class="o"\u003e::\u003c/span\u003e\u003cspan class="n"\u003egetName\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003edefaultIfEmpty\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;Default User\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emap\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003euserName\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n          \u003cspan class="c1"\u003e//adds header to proxied request\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e          \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetRequest\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003emutate\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eheader\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;CUSTOM-REQUEST-HEADER\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003euserName\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003ebuild\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n          \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n        \u003cspan class="o"\u003e})\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eflatMap\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e::\u003c/span\u003e\u003cspan class="n"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eGlobalFilter\u003c/span\u003e \u003cspan class="nf"\u003ecustomGlobalPostFilter\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003echain\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003efilter\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethen\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ejust\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eexchange\u003c/span\u003e\u003cspan class="o"\u003e))\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003emap\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eserverWebExchange\u003c/span\u003e \u003cspan class="o"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n          \u003cspan class="c1"\u003e//adds header to response\n\u003c/span\u003e\u003cspan class="c1"\u003e\u003c/span\u003e          \u003cspan class="n"\u003eserverWebExchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetResponse\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003egetHeaders\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eset\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;CUSTOM-RESPONSE-HEADER\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e\n              \u003cspan class="n"\u003eHttpStatus\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eOK\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eequals\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eserverWebExchange\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetResponse\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003egetStatusCode\u003c/span\u003e\u003cspan class="o"\u003e())\u003c/span\u003e \u003cspan class="o"\u003e?\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;It worked\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e:\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;It did not work\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n          \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eserverWebExchange\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n        \u003cspan class="o"\u003e})\u003c/span\u003e\n        \u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ethen\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="18-通过使用spring-mvc或webflux构建一个简单的网关"\u003e18. 通过使用Spring MVC或Webflux构建一个简单的网关\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e下面描述的是另一种风格的网关。之前的文档都不适用于下面的内容。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePring Cloud Gateway提供了一个名为\u003ccode\u003eProxyExchange\u003c/code\u003e的实用对象。你可以在常规的Spring网络处理程序中作为一个方法参数使用它。它通过反映HTTP动词的方法支持基本的下游HTTP交换。在MVC中，它还支持通过\u003ccode\u003eforward()\u003c/code\u003e方法转发到本地处理程序。要使用\u003ccode\u003eProxyExchange\u003c/code\u003e，在你的classpath中包含正确的模块（\u003ccode\u003espring-cloud-gateway-mvc或spring-cloud-gateway-webflux\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e下面的MVC例子将一个到/test的请求代理到一个远程服务器。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@RestController\u003c/span\u003e\n\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eGatewaySampleApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Value\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;${remote.home}\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eURI\u003c/span\u003e \u003cspan class="n"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@GetMapping\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/test\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eResponseEntity\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;?\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eProxyExchange\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="kt"\u003ebyte\u003c/span\u003e\u003cspan class="o"\u003e[]\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="kd"\u003ethrows\u003c/span\u003e \u003cspan class="n"\u003eException\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etoString\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e+\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;/image/png\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面的例子用Webflux做同样的事情。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@RestController\u003c/span\u003e\n\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eGatewaySampleApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Value\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;${remote.home}\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eURI\u003c/span\u003e \u003cspan class="n"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@GetMapping\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/test\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eMono\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eResponseEntity\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;?\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eProxyExchange\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="kt"\u003ebyte\u003c/span\u003e\u003cspan class="o"\u003e[]\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="kd"\u003ethrows\u003c/span\u003e \u003cspan class="n"\u003eException\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etoString\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e+\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;/image/png\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eProxyExchange\u003c/code\u003e上的便利方法使处理方法能够发现并增强传入请求的URI路径。例如，你可能想提取路径的尾部元素，将它们传递到下游。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@GetMapping\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/proxy/path/**\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eResponseEntity\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;?\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxyPath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eProxyExchange\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="kt"\u003ebyte\u003c/span\u003e\u003cspan class="o"\u003e[]\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="kd"\u003ethrows\u003c/span\u003e \u003cspan class="n"\u003eException\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="n"\u003epath\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/proxy/path/\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003eproxy\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003euri\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003etoString\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e+\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;/foos/\u0026#34;\u003c/span\u003e \u003cspan class="o"\u003e+\u003c/span\u003e \u003cspan class="n"\u003epath\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSpring MVC和Webflux的所有功能都可用于网关处理方法。因此，你可以注入请求头和查询参数，例如，你可以通过映射注解中的声明来限制传入的请求。关于这些功能的更多细节，请参见Spring MVC中\u003ccode\u003e@RequestMapping\u003c/code\u003e的文档。\u003c/p\u003e\n\u003cp\u003e你可以通过使用\u003ccode\u003eProxyExchange\u003c/code\u003e上的\u003ccode\u003eheader()\u003c/code\u003e方法向下游响应添加头信息。\u003c/p\u003e\n\u003cp\u003e你也可以通过给\u003ccode\u003eget()\u003c/code\u003e方法（和其他方法）添加一个映射器来操作响应头（以及响应中你喜欢的其他东西）。映射器是一个 \u0026ldquo;函数\u0026rdquo;，它接收传入的 \u0026ldquo;ResponseEntity \u0026ldquo;并将其转换为传出的。\u003c/p\u003e\n\u003cp\u003e对 \u0026ldquo;敏感 \u0026ldquo;头信息（默认情况下，\u003ccode\u003ecookie\u003c/code\u003e和\u003ccode\u003eauthorization\u003c/code\u003e）提供一流的支持，这些头信息不会向下游传递，对 \u0026ldquo;代理\u0026rdquo;（\u003ccode\u003ex-forwarded-*\u003c/code\u003e）头信息也是如此。\u003c/p\u003e\n\u003ch2 id="19-配置属性"\u003e19. 配置属性\u003c/h2\u003e\n\u003cp\u003e要查看所有与Spring Cloud Gateway相关的配置属性列表，请参见\u003ca href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/appendix.html"\u003e附录\u003c/a\u003e。\u003c/p\u003e\n'}).add({id:4,href:"https://www.springcloud.io/docs/springcloud/spring-cloud-netflix/",title:"Spring Cloud Netflix",description:"Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过实战考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。",content:'\u003cul\u003e\n\u003cli\u003e当前版本：3.0.3\u003c/li\u003e\n\u003cli\u003e修改时间：2021年7月22日\u003c/li\u003e\n\u003cli\u003e官方文档：\u003ca href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/"\u003ehttps://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e源码仓库：\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix"\u003ehttps://github.com/spring-cloud/spring-cloud-netflix\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过实战考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。\u003c/p\u003e\n\u003ch2 id="1-服务发现eureka客户端"\u003e1 服务发现：Eureka客户端\u003c/h2\u003e\n\u003cp\u003e服务发现是基于微服务的体系结构的关键原则之一。尝试手动配置每个客户端或某种形式的约定可能很困难，而且可能易挂。Netflix的服务发现器和客户端Eureka，可以将服务器配置和部署为高可用性，每个服务器都可以将已注册服务的状态复制给其他服务器。\u003c/p\u003e\n\u003ch3 id="11-如何引入eureka客户端"\u003e1.1 如何引入Eureka客户端\u003c/h3\u003e\n\u003cp\u003e要在项目中包含Eureaka Client，请使用start中gruop ID为\u003ccode\u003eorg.springframework.cloud\u003c/code\u003e和artifact ID为\u003ccode\u003espring-cloud-starter-netflix-eureka-client\u003c/code\u003e的包，有关使用Spring cloud设置构建系统的详细信息，请参阅\u003ca href="https://spring.io/projects/spring-cloud"\u003eSpring Cloud Project\u003c/a\u003e\n页面。\u003c/p\u003e\n\u003ch3 id="12-向eureka注册服务"\u003e1.2 向Eureka注册服务\u003c/h3\u003e\n\u003cp\u003e当客户端向Eureka注册时，它会提供关于自身的元数据，例如主机、端口、健康状态URl、主页和其他详细信息。Eureka接收来自属于某个服务的每个实例的心跳消息。如果在可配置的时间内检测心跳失败，实例客户端通常会从注册中心删除。\u003c/p\u003e\n\u003cp\u003e下面的例子展示了一个最小的Eureka客户端应用程序:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="nd"\u003e@RestController\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@RequestMapping\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003ehome\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="s"\u003e\u0026#34;Hello world\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003emain\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e[]\u003c/span\u003e \u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringApplicationBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eApplication\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eweb\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003erun\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，上面的示例只是一个普通的Spring Boot应用程序。通过包管理文件引入\u003ccode\u003espring-cloud-starter-netflix-Eureka-client\u003c/code\u003e依赖，你的应用程序将自动注册到Eureka Server。定位 Eureka服务器需要配置，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://localhost:8761/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在前面的示例中，\u003ccode\u003edefaultZone\u003c/code\u003e 是一个缺省字符串回调值，它为任何不填写注册中心地址的客户端提供一个默认值。(换句话说：不填此项，eureka使用http://localhost:8761/eureka/作为默认地址)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e📍 这个\u003ccode\u003edefaultZone\u003c/code\u003e属性是区分大小写的，并且需要驼峰命令法，因为\u003ccode\u003eserviceUrl\u003c/code\u003e属性是\u003ccode\u003eMap\u0026lt;String, String\u0026gt;\u003c/code\u003e。因此，\u003ccode\u003edefaultZone\u003c/code\u003e属性不遵循常规Spring Boot蛇形命名法约定。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e默认的应用程序名称(即服务 ID)、虚拟主机和非安全端口(取自环境)分别为\u003ccode\u003e${ spring.application.name }\u003c/code\u003e、\u003ccode\u003e${ spring.application.name }\u003c/code\u003e和\u003ccode\u003e${ server.port }\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在包管理工具中引入\u003ccode\u003espring-cloud-starter-netflix-Eureka-client\u003c/code\u003e,使得应用程序既成为Eureka示例，也成为客户端（它可以查询注册中心定位其他服务）。实例行为是由\u003ccode\u003eeuraka.instance.*\u003c/code\u003e配置驱动的，但是你要确保你的应用程序配置\u003ccode\u003espring.application.name\u003c/code\u003e值。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有关可配置选项的更多详细信息，请参阅\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix/tree/main/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java"\u003eEurekaInstanceConfigBean\u003c/a\u003e和\u003ca href="https://github.com/spring-cloud/spring-cloud-netflix/tree/main/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java"\u003eEurekaClientConfigBean\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要禁用Eureka发现客户端，你可以将\u003ccode\u003eEureka.Client.enabled\u003c/code\u003e设置为\u003ccode\u003efalse\u003c/code\u003e。当 \u003ccode\u003espring.cloud.Discovery.enabled\u003c/code\u003e设置为\u003ccode\u003efalse\u003c/code\u003e时，Eureka发现客户端也将被禁用。\u003c/p\u003e\n\u003ch3 id="13-在eureka服务端上验证"\u003e1.3 在Eureka服务端上验证\u003c/h3\u003e\n\u003cp\u003e如果\u003ccode\u003eeureka.client.serviceur.defaultzone\u003c/code\u003e的Url中嵌入了凭据(curl样式的，示例：user: password@localhost: 8761/eureka)，HTTP的基本身份验证将自动添加到Eureka客户机中。对于更负载的需求，你可以创建类型为：\u003ccode\u003eDiscoveryClientOptionalArgs\u003c/code\u003e 的\u003ccode\u003e@bean\u003c/code\u003e，并将\u003ccode\u003eClientFilter\u003c/code\u003e实例插入其中，所有这些都应用于从客户机到服务器的调用。\u003c/p\u003e\n\u003cp\u003e当Eureka服务器需要客户端证书进行身份验证时，客户端证书和信任存储可以通过属性进行配置，如下例所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003etls\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eenabled\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;path-of-key-store\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-type\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePKCS12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-store-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;key-store-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003ekey-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;key-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;path-of-trust-store\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store-type\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ePKCS12\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003etrust-store-password\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e\u0026lt;trust-store-password\u0026gt;\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启用\u003ccode\u003eEureka.client.TLS.enabled \u003c/code\u003e要为true才能启用Eureka客户端的TLS。当省略\u003ccode\u003eeurea.client.tls.trust-store\u003c/code\u003e时，将使用JVM默认信任存储。\u003ccode\u003eEureka.client.tls.key-store-type\u003c/code\u003e和\u003ccode\u003eeureka.client.tls.trust-store-type\u003c/code\u003e的默认值是 PKCS12。如果省略密码属性，则假定为空密码。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于 Eureka 中的限制，不可能支持每个服务器的基本授权凭证，因此只使用找到的第一组凭证。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果你想定制Eureka HTTP客户端使用的\u003ccode\u003eRestTemplate\u003c/code\u003e，你可以创建一个 \u003ccode\u003eEurekaClientHttpRequestFactorySupplier\u003c/code\u003e，并编写自己的逻辑来生成\u003ccode\u003eClientHttpRequestFactory\u003c/code\u003e实例。\u003c/p\u003e\n\u003ch3 id="14-状态页和健康指示器"\u003e1.4 状态页和健康指示器\u003c/h3\u003e\n\u003cp\u003eEureka 实例的状态页面和健康状态指示器分别默认为\u003ccode\u003e/info\u003c/code\u003e 和\u003ccode\u003e/health\u003c/code\u003e，这是Spring Boot Actuator应用程序中有用的端点默认位置。如果使用非默认的上下文路径或servlet路径(比如 server.servletPath =/custom) ，那么即使对于实现的应用程序也需要修改这些路径。下面的示例显示了这两个设置的默认值:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003estatusPageUrlPath\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${server.servletPath}/info\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthCheckUrlPath\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${server.servletPath}/health\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这些链接显示在客户端使用的元数据中，并且在某些场景中用于决定是否向应用程序发送请求，因此如果这些请求是准确的，就很有帮助。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在Dalston(版本名字)中，当更改管理上下文路径时，还需要设置状态和运行状况检查url。这个要求从Edgware开始就被删除了\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="15-注册安全的应用程序"\u003e1.5 注册安全的应用程序\u003c/h3\u003e\n\u003cp\u003e如果你的应用程序希望通过 HTTPS 进行联系，可以在EurekaInstanceConfigBean 中设置两个属性:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEureka.instance.[nonsecurtenabled]=[false]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEureka.instance.[securePortEnabled]=[true]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这样做使Eureka发布的实例信息显示了对安全通信的明确偏好。Spring Cloud \u003ccode\u003eDiscoveryClient\u003c/code\u003e 总是返回一个以 https开头的 URI，用于以这种方式配置的服务。类似地，当以这种方式配置服务时，Eureka (本机)实例信息具有一个安全的健康检查 URL。\u003c/p\u003e\n\u003cp\u003e由于Eureka内部的工作方式，它仍然为状态和主页发布一个不安全的URL，除非你也显式地覆盖这些内容。你可以使用占位符来配置eureka实例 url，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003estatusPageUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/info\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthCheckUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/health\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehomePageUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://${eureka.hostname}/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(注意 \u003ccode\u003e${Eureka.hostname}\u003c/code\u003e是一个本机占位符，只能在 Eureka 的后续版本中使用。对于Spring占位符也可以实现同样的功能ーー例如，使用 \u003ccode\u003e${eureka.instance.hostname}\u003c/code\u003e.)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你的应用程序运行在代理之后，并且SSL终止在代理中(例如，如果你作为服务运行在Cloud Foundry或其他平台上) ，然后，你需要确保“转发”的代理头被应用程序拦截和处理。如果在Spring Boot应用程序中嵌入的Tomcat容器对\u0026rsquo;X-Forwarded-* \u0026lsquo;头有显式配置，这将自动生效。应用程序呈现给自身的链接是错误的(错误的主机、端口或协议)，这是配置错误的标志。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="16-eureka的健康检查"\u003e1.6 Eureka的健康检查\u003c/h3\u003e\n\u003cp\u003e默认情况下，Eureka使用客户端心跳来确定客户端是否启动。除非另行指定，否则发现客户端不会根据Spring Boot执行器传播应用程序的当前运行状况检查状态。因此，在成功注册后，Eureka总是宣布应用程序处于\u003ccode\u003eUP\u003c/code\u003e状态。可以通过启用Eureka运行状况检查来更改此行为，这将导致将应用程序状态传播到Eureka。因此，每个其他应用程序不会向处于\u003ccode\u003eUP\u003c/code\u003e状态以外的应用程序发送流量。下面的示例显示如何为客户端启用运行状况检查。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehealthcheck\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003eenabled\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eeureka.client.healthcheck.enabled=true\u003c/code\u003e应该只在\u003ccode\u003eapplication.yml\u003c/code\u003e中设置。在\u003ccode\u003ebootstrap.yml\u003c/code\u003e中设置这个值会引起不好的副作用。例如在Eureka以\u003ccode\u003eUNKNOWN\u003c/code\u003e状态注册。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果你需要对运行状况检查进行更多的控制，可以考虑实现自己的检查\u003ccode\u003ecom.netflix.appinfo.HealthCheckHandler\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="17-eureka客户端和实例的元数据"\u003e1.7 Eureka客户端和实例的元数据\u003c/h3\u003e\n\u003cp\u003e花点时间了解Eureka元数据是如何工作的是值得的，这样您就可以在您的平台上以一种有意义的方式使用它。对于主机名、IP地址、端口号、状态页和健康检查等信息，有标准的元数据。这些信息发布在服务注册中心中，客户端使用它们以一种简单的方式联系服务。附加的元数据可以添加到实例注册的\u003ccode\u003eeureka.instance.metadataMap\u003c/code\u003e中，该元数据可以在远程客户机中访问。一般来说，附加的元数据不会改变客户机的行为，除非客户机知道元数据的含义。在一些特殊情况下，Spring Cloud已经为元数据映射赋予了意义，本文稍后将对此进行描述。\u003c/p\u003e\n\u003ch4 id="171-在cloud-foundry上使用eureka"\u003e1.7.1 在Cloud Foundry上使用Eureka\u003c/h4\u003e\n\u003cp\u003eCloud Foundry有一个全局路由器，这样同一个应用的所有实例都有相同的主机名(其他具有类似架构的PaaS解决方案也有相同的安排)。这并不一定是使用Eureka的障碍。但是，如果你使用路由器(建议或强制使用，这取决于平台的设置方式)，则需要显式设置主机名和端口号(安全或不安全)，以便它们使用路由器。你可能还希望使用实例元数据，以便能够区分客户机上的实例(例如，在自定义负载平衡器中)。默认情况下，\u003ccode\u003eeureka.instance.instanceId\u003c/code\u003e是\u003ccode\u003evcap.application.Instance_id\u003c/code\u003e，示例如下:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${vcap.application.uris[0]}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003enonSecurePort\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e80\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据在Cloud Foundry实例中设置安全规则的方式，您能够注册并使用主机VM的IP地址来进行直接的服务到服务调用。这个特性在关键的Web服务(PWS)上还不可用。\u003c/p\u003e\n\u003ch3 id="172-在aws上使用eureka"\u003e1.7.2 在AWS上使用Eureka\u003c/h3\u003e\n\u003cp\u003e如果计划将应用部署到AWS云，则必须将Eureka实例配置为AWS感知。你可以通过如下方式定制\u003ccode\u003eEurekaInstanceConfigBean\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Bean\u003c/span\u003e\n\u003cspan class="nd"\u003e@Profile\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;!default\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e \u003cspan class="nf"\u003eeurekaInstanceConfig\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eInetUtils\u003c/span\u003e \u003cspan class="n"\u003einetUtils\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e \u003cspan class="n"\u003ebean\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eEurekaInstanceConfigBean\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003einetUtils\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="n"\u003eAmazonInfo\u003c/span\u003e \u003cspan class="n"\u003einfo\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003eAmazonInfo\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eBuilder\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003enewBuilder\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eautoBuild\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;eureka\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="n"\u003ebean\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003esetDataCenterInfo\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003einfo\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n  \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003ebean\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="173-修改eureka的实例id"\u003e1.7.3 修改Eureka的实例ID\u003c/h3\u003e\n\u003cp\u003e一个普通的Netflix Eureka实例是用一个与它的主机名相等的ID注册的(也就是说，每个主机只有一个服务)。Spring Cloud Eureka提供了一个合理的默认值，定义如下:\n\u003ccode\u003e${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e一个例子是：\u003ccode\u003emyhost:myappname:8080\u003c/code\u003e。\n通过使用Spring Cloud，您可以通过在\u003ccode\u003eeureka.instance.instanceId\u003c/code\u003e中提供唯一的标识符来覆盖这个值。，如下例所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003einstanceId\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003e${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用前面示例中显示的元数据和部署在localhost上的多个服务实例，将插入随机值以使实例唯一。在Cloud Foundry中，\u003ccode\u003evcap.application.instance_id\u003c/code\u003e是在Spring Boot应用程序中自动填充的，因此不需要这个随机值。\u003c/p\u003e\n\u003ch3 id="18-使用eurekaclient"\u003e1.8 使用EurekaClient\u003c/h3\u003e\n\u003cp\u003e一旦你拥有了一个作为发现客户端的应用程序，您就可以使用它从\u003ccode\u003eEureka Server\u003c/code\u003e发现服务实例。一种方法是使用本机\u003ccode\u003ecom.netflix.discovery.EurekaClient\u003c/code\u003e(与Spring Cloud DiscoveryClient相反)，如下面的示例所示。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Autowired\u003c/span\u003e\n\u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eEurekaClient\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003eserviceUrl\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eInstanceInfo\u003c/span\u003e \u003cspan class="n"\u003einstance\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetNextServerFromEureka\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;STORES\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e,\u003c/span\u003e \u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003einstance\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetHomePageUrl\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e不要在\u003ccode\u003e@PostConstruct\u003c/code\u003e方法或\u003ccode\u003e@Scheduled\u003c/code\u003e方法中使用\u003ccode\u003eeurekclient\u003c/code\u003e(或在\u003ccode\u003eApplicationContext\u003c/code\u003e可能还没有启动的任何地方)。它是在\u003ccode\u003eSmartLifecycle\u003c/code\u003e中初始化的(\u003ccode\u003ephase=0\u003c/code\u003e)，所以你最早可以依赖它是在另一个具有更高阶段的\u003ccode\u003eSmartLifecycle\u003c/code\u003e中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id="181-eurekacliet没有jersey"\u003e1.8.1 EurekaCliet没有Jersey\u003c/h4\u003e\n\u003cp\u003e默认情况下，eurekclient使用Spring的\u003ccode\u003eRestTemplate\u003c/code\u003e进行HTTP通信。如果您希望使用Jersey，则需要将Jersey依赖项添加到类路径中。下面的例子显示了你需要添加的包管理文件中:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003e\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-client\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-core\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.sun.jersey.contribs\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jersey-apache-client4\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="19-替代原生netflix-eurakaclient"\u003e1.9 替代原生Netflix EurakaClient\u003c/h3\u003e\n\u003cp\u003e你不需要使用原始的\u003ccode\u003eNetflix eurekclient\u003c/code\u003e。在某种封装后面使用它通常更方便。Spring Cloud通过逻辑的Eureka服务标识符(VIPs)而不是物理url支持\u003ccode\u003eFeign\u003c/code\u003e(一个REST客户端构建器)和\u003ccode\u003eSpring RestTemplate\u003c/code\u003e的远程调用。你还可以使用\u003ccode\u003eorg.springframework.cloud.client.discovery.DiscoveryClient\u003c/code\u003e它为发现客户端提供了一个简单的API(不特定于Netflix)，如下面的示例所示:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@Autowired\u003c/span\u003e\n\u003cspan class="kd"\u003eprivate\u003c/span\u003e \u003cspan class="n"\u003eDiscoveryClient\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="n"\u003eString\u003c/span\u003e \u003cspan class="nf"\u003eserviceUrl\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eList\u003c/span\u003e\u003cspan class="o"\u003e\u0026lt;\u003c/span\u003e\u003cspan class="n"\u003eServiceInstance\u003c/span\u003e\u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e \u003cspan class="o"\u003e=\u003c/span\u003e \u003cspan class="n"\u003ediscoveryClient\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003egetInstances\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;STORES\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="k"\u003eif\u003c/span\u003e \u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003elist\u003c/span\u003e \u003cspan class="o"\u003e!=\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e \u003cspan class="o"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003esize\u003c/span\u003e\u003cspan class="o"\u003e()\u003c/span\u003e \u003cspan class="o"\u003e\u0026gt;\u003c/span\u003e \u003cspan class="n"\u003e0\u003c/span\u003e \u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="n"\u003elist\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eget\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003e0\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003egetUri\u003c/span\u003e\u003cspan class="o"\u003e();\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n    \u003cspan class="k"\u003ereturn\u003c/span\u003e \u003cspan class="kc"\u003enull\u003c/span\u003e\u003cspan class="o"\u003e;\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="110-为什么注册服务如此缓慢"\u003e1.10 为什么注册服务如此缓慢\u003c/h3\u003e\n\u003cp\u003e作为一个实例还涉及到到注册中心的周期性心跳(通过客户机的serviceUrl)，默认持续时间为30秒。在实例、服务器和客户端本地缓存中都有相同的元数据之前，客户端无法发现服务(因此可能需要3次心跳)。可以通过设置\u003ccode\u003eeureka.instance.leaseRenewalIntervalInSeconds\u003c/code\u003e来修改周期。将其设置为小于30的值将加快使客户端连接到其他服务的过程。在生产中，使用默认值可能更好，因为服务器中的内部计算会对租期续期做出假设。\u003c/p\u003e\n\u003ch3 id="111-zones"\u003e1.11 Zones\u003c/h3\u003e\n\u003cp\u003e如果您已经将Eureka客户端部署到多个区域，您可能希望这些客户端在尝试其他区域中的服务之前先使用相同区域中的服务。要进行设置，需要正确配置Eureka客户端。\n首先，您需要确保将Eureka服务器部署到每个区域，并且它们彼此是对等的。有关更多信息，请参阅区域和地区一节。\u003c/p\u003e\n\u003cp\u003e接下来，你需要告诉Eureka你的服务在哪个区域。可以通过使用\u003ccode\u003emetadatmap\u003c/code\u003e属性来实现。例如，service 1同时部署在zone 1和zone 2，则需要在service 1中设置如下Eureka属性:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eService 1 in Zone 1\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="l"\u003eeureka.instance.metadataMap.zone = zone1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="l"\u003eeureka.client.preferSameZoneEureka = true\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eService 1 in Zone 2\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="l"\u003eeureka.instance.metadataMap.zone = zone2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="l"\u003eeureka.client.preferSameZoneEureka = true\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="112-刷新eureka客户端"\u003e1.12 刷新Eureka客户端\u003c/h3\u003e\n\u003cp\u003e默认情况下，\u003ccode\u003eEurekaClient bean\u003c/code\u003e是可刷新的，这意味着可以更改和刷新Eureka客户机属性。当刷新发生时，客户端将从Eureka服务器注销，并且可能有一段短暂的时间内给定服务的所有实例都不可用。消除这种情况的一种方法是禁用刷新Eureka客户机的功能。设置\u003ccode\u003eeureka.client.refresh.enable=false\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id="113-使用springcloud负载均衡的eureka"\u003e1.13 使用SpringCloud负载均衡的Eureka\u003c/h3\u003e\n\u003cp\u003e我们提供对\u003ccode\u003eSpring CLoud LoadBalancer ZonePreferenceServiceInstanceListSupplier\u003c/code\u003e的支持。Eureka实例元数据(Eureka.instance. metadatmap zone)中的zone值用于设置spring-cloud-loadbalancer-zone属性的值，该属性用于按zone过滤服务实例。\u003c/p\u003e\n\u003cp\u003e如果没有这个属性，并且\u003ccode\u003espring.cloud.loadbalancer.eureka.approximateZoneFromHostname\u003c/code\u003e标志被设置为true，那么它可以使用服务器主机名中的域名作为区域的代理。\u003c/p\u003e\n\u003cp\u003e如果没有其他区域数据来源，则基于客户端配置（而不是实例配置）进行猜测。 我们采取\u003ccode\u003eeureka.client.availabilityZones\u003c/code\u003e，它是从区域名称到区域列表的地图，并释放了实例自己的区域的第一个区域（即\u003ccode\u003eeureka.client.region\u003c/code\u003e，默认为\u003ccode\u003eus-east-1\u003c/code\u003e，用于与本机Netflix的兼容性）。\u003c/p\u003e\n\u003ch2 id="2-服务发现eureka服务端"\u003e2 服务发现：Eureka服务端\u003c/h2\u003e\n\u003cp\u003e介绍搭建Eureka服务器的操作步骤。\u003c/p\u003e\n\u003ch3 id="21-如何包含eureka服务端"\u003e2.1 如何包含Eureka服务端\u003c/h3\u003e\n\u003cp\u003e要将\u003ccode\u003eEureka Server\u003c/code\u003e包含到您的项目中，使用gourp ID为\u003ccode\u003eorg.springframework.cloud\u003c/code\u003e和 artifact ID为\u003ccode\u003espring-cloud-start-netflix- Eureka-Server\u003c/code\u003e的启动器。有关使用当前\u003ccode\u003eSpring Cloud Release Train\u003c/code\u003e设置构建系统的详细信息，请参阅Spring Cloud Project页面。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果您的项目已经使用\u003ccode\u003eThymeleaf\u003c/code\u003e作为模板引擎，Eureka服务器的\u003ccode\u003eFreemarker\u003c/code\u003e模板可能无法正确加载。在这种情况下，有必要手动配置模板加载器:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003efreemarker\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003etemplate-loader-path\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003eclasspath:/templates/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eprefer-file-system-access\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="22-如何运行eureka服务端"\u003e2.2 如何运行Eureka服务端\u003c/h3\u003e\n\u003cp\u003e下面的例子展示了一个最小的Eureka服务器:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@SpringBootApplication\u003c/span\u003e\n\u003cspan class="nd"\u003e@EnableEurekaServer\u003c/span\u003e\n\u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eApplication\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="kd"\u003epublic\u003c/span\u003e \u003cspan class="kd"\u003estatic\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003emain\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eString\u003c/span\u003e\u003cspan class="o"\u003e[]\u003c/span\u003e \u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="k"\u003enew\u003c/span\u003e \u003cspan class="n"\u003eSpringApplicationBuilder\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eApplication\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003eclass\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003eweb\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="kc"\u003etrue\u003c/span\u003e\u003cspan class="o"\u003e).\u003c/span\u003e\u003cspan class="na"\u003erun\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eargs\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e服务器具有主页，其中包含UI界面和HTTP API端点，作用与/eureka/*。\u003c/p\u003e\n\u003cp\u003e以下链接有一些Eureka背景知识，\u003ca href="https://github.com/cfregly/fluxcapacitor/wiki/NetflixOSS-FAQ#eureka-service-discovery-load-balancer"\u003eflux capacitor\u003c/a\u003e and \u003ca href="https://groups.google.com/forum/?fromgroups#!topic/eureka_netflix/g3p2r7gHnN0"\u003egoogle group discussion\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e由于Gradle的依赖解析规则和缺少父bom特性，依赖\u003ccode\u003espring-cloud-start-netflix-eureka-server\u003c/code\u003e可能会导致应用启动失败。为了解决这个问题，添加\u003ccode\u003eSpring Boot Gradle\u003c/code\u003e插件，并导入Spring云启动器的父bom如下:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-gradle" data-lang="gradle"\u003e\u003cspan class="n"\u003ebuildscript\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003edependencies\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003eclasspath\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s2"\u003e\u0026#34;org.springframework.boot:spring-boot-gradle-plugin:{spring-boot-docs-version}\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e\n  \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\n\u003cspan class="n"\u003eapply\u003c/span\u003e \u003cspan class="nl"\u003eplugin:\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;spring-boot\u0026#34;\u003c/span\u003e\n\n\u003cspan class="n"\u003edependencyManagement\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n  \u003cspan class="n"\u003eimports\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n    \u003cspan class="n"\u003emavenBom\u003c/span\u003e \u003cspan class="s2"\u003e\u0026#34;org.springframework.cloud:spring-cloud-dependencies:{spring-cloud-version}\u0026#34;\u003c/span\u003e\n  \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="23-高可用区域和地区"\u003e2.3 高可用，区域和地区\u003c/h3\u003e\n\u003cp\u003eEureka服务器没有后端存储，但是注册中心中的服务实例都必须发送心跳以保持其状态的更新(所以这可以在内存中完成)。客户端也有一个Eureka注册的内存缓存(所以他们不必为每个服务请求都去注册中心)。\n默认情况下，每个Eureka服务器也是一个Eureka客户端，并且需要(至少一个)服务URL来定位对等点。如果你不提供它，服务也会运行并工作，但它会用许多关于无法注册进对等注册中心的信息记录填充你的日志。\u003c/p\u003e\n\u003ch3 id="24-独立模式"\u003e2.4 独立模式\u003c/h3\u003e\n\u003cp\u003e两个缓存(客户端和服务器)和心跳的结合使独立的Eureka服务器在故障时相当有弹性，只要有某种监控或弹性运行时(如Cloud Foundry)保持它的活力。在独立模式下，你可能更希望关闭客户端行为，这样它就不会一直尝试访问其他节点而失败。下面的例子展示了如何关闭客户端行为:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (独立的Eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eserver\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eport\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="m"\u003e8761\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003elocalhost\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eregisterWithEureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003efetchRegistry\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="kc"\u003efalse\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttp://${eureka.instance.hostname}:${server.port}/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意\u003ccode\u003eserviceUrl\u003c/code\u003e指向与本地实例相同的主机。\u003c/p\u003e\n\u003ch3 id="25-对等模式"\u003e2.5 对等模式\u003c/h3\u003e\n\u003cp\u003e通过运行多个实例并要求它们相互注册，Eureka可以变得更加灵活和可用。事实上，这是默认的行为，所以你只需要向对等体添加一个有效的serviceUrl，如下面的例子所示:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (两个对等的Eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer2/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer1/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在上面的示例中，我们有一个YAML文件，可以通过在不同的Spring文件中配置运行它来在两台主机(peer1和peer2)上运行相同的服务器。通过操作\u003ccode\u003e/etc/hosts\u003c/code\u003e解析主机名，您可以使用此配置在单个主机上测试对等感知(在生产中这样做没有多大价值)。事实上，如果运行在知道自己主机名的机器上(默认情况下，使用\u003ccode\u003ejava.net.InetAddress\u003c/code\u003e查找)，就不需要\u003ccode\u003eeureka.instance.hostname\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e你可以在一个系统中添加多个对等体，只要它们彼此至少有一个连接，它们就会同步自己的注册。如果对等点在物理上是分离的(在一个数据中心内或多个数据中心之间)，那么系统原则上可以承受\u003ccode\u003esplit-brain\u003c/code\u003e类型的故障。你可以在一个系统中添加多个对等体，只要它们都是直接连接的，它们就会在自己之间同步注册。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eapplication.yml (三个对等的eureka服务器)\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-yml" data-lang="yml"\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eclient\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003eserviceUrl\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e      \u003c/span\u003e\u003cspan class="nt"\u003edefaultZone\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003ehttps://peer1/eureka/,http://peer2/eureka/,http://peer3/eureka/\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer1\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer2\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nn"\u003e---\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003espring\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003eprofiles\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e\u003c/span\u003e\u003cspan class="nt"\u003eeureka\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e  \u003c/span\u003e\u003cspan class="nt"\u003einstance\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003cspan class="w"\u003e    \u003c/span\u003e\u003cspan class="nt"\u003ehostname\u003c/span\u003e\u003cspan class="p"\u003e:\u003c/span\u003e\u003cspan class="w"\u003e \u003c/span\u003e\u003cspan class="l"\u003epeer3\u003c/span\u003e\u003cspan class="w"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id="26-何时选择ip地址"\u003e2.6 何时选择IP地址\u003c/h3\u003e\n\u003cp\u003e在某些情况下，Eureka最好发布服务的IP地址而不是主机名。设置\u003ccode\u003eeureka.instance.preferipaddress=true\u003c/code\u003e，当应用程序向eureka注册时，它使用它的IP地址而不是它的主机名。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果主机名不能由Java确定，则将IP地址发送给Eureka。设置主机名的唯一方法是设置eureka.instance.hostname属性。你可以在运行时使用环境变量设置主机名—例如：\u003ccode\u003eeureka.instance.hostname=${HOST_NAME}\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="27-保护eureka服务器"\u003e2.7 保护Eureka服务器\u003c/h3\u003e\n\u003cp\u003e只需通过\u003ccode\u003eSpring-boot-starter-Security\u003c/code\u003e将\u003ccode\u003eSpring Security\u003c/code\u003e添加到服务器的包管理文件中，就可以保护Eureka服务器。默认情况下，当Spring Security在包管理文件中，它将要求一个有效的CSRF令牌被发送到应用程序。Eureka客户端通常不会拥有一个有效的跨站请求伪造(CSRF)令牌，你需要为\u003ccode\u003e/Eureka/**\u003c/code\u003e端点禁用这个要求。例如:\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-java" data-lang="java"\u003e\u003cspan class="nd"\u003e@EnableWebSecurity\u003c/span\u003e\n\u003cspan class="kd"\u003eclass\u003c/span\u003e \u003cspan class="nc"\u003eWebSecurityConfig\u003c/span\u003e \u003cspan class="kd"\u003eextends\u003c/span\u003e \u003cspan class="n"\u003eWebSecurityConfigurerAdapter\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n\n    \u003cspan class="nd"\u003e@Override\u003c/span\u003e\n    \u003cspan class="kd"\u003eprotected\u003c/span\u003e \u003cspan class="kt"\u003evoid\u003c/span\u003e \u003cspan class="nf"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003eHttpSecurity\u003c/span\u003e \u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e)\u003c/span\u003e \u003cspan class="kd"\u003ethrows\u003c/span\u003e \u003cspan class="n"\u003eException\u003c/span\u003e \u003cspan class="o"\u003e{\u003c/span\u003e\n        \u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003ecsrf\u003c/span\u003e\u003cspan class="o"\u003e().\u003c/span\u003e\u003cspan class="na"\u003eignoringAntMatchers\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="s"\u003e\u0026#34;/eureka/**\u0026#34;\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n        \u003cspan class="kd"\u003esuper\u003c/span\u003e\u003cspan class="o"\u003e.\u003c/span\u003e\u003cspan class="na"\u003econfigure\u003c/span\u003e\u003cspan class="o"\u003e(\u003c/span\u003e\u003cspan class="n"\u003ehttp\u003c/span\u003e\u003cspan class="o"\u003e);\u003c/span\u003e\n    \u003cspan class="o"\u003e}\u003c/span\u003e\n\u003cspan class="o"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有关CSRF的更多信息，请参阅\u003ca href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf"\u003eSpring Security\u003c/a\u003e文档。\n在Spring Cloud Samples \u003ca href="https://github.com/spring-cloud-samples/eureka/tree/Eureka-With-Security"\u003erepo\u003c/a\u003e中可以找到一个演示Eureka Server。\u003c/p\u003e\n\u003ch3 id="28-jdk11支持"\u003e2.8 JDK11支持\u003c/h3\u003e\n\u003cp\u003eJDK 11删除了Eureka服务器所依赖的JAXB模块。如果你想在运行Eureka服务器时使用JDK 11，你必须在你的POM或Gradle文件中包含这些依赖项。\u003c/p\u003e\n\u003cdiv class="highlight"\u003e\u003cpre class="chroma"\u003e\u003ccode class="language-fallback" data-lang="fallback"\u003e\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;org.glassfish.jaxb\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;jaxb-runtime\u0026lt;/artifactId\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id="3-配置属性"\u003e3 配置属性\u003c/h2\u003e\n\u003cp\u003e要查看所有Spring Cloud Netflix相关配置属性的列表，请检查\u003ca href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/appendix.html"\u003e附录页面\u003c/a\u003e。\u003c/p\u003e\n'}).add({id:5,href:"https://www.springcloud.io/docs/",title:"Docs",description:"Docs Doks.",content:""}).add({id:6,href:"https://www.springcloud.io/docs/springcloud/",title:"SpringCloud",description:"SpringCloud中文文档",content:""}),userinput.addEventListener('input',c,!0),suggestions.addEventListener('click',e,!0);function c(){var h=this.value,f=b.search(h,{limit:5,index:["content"],enrich:!0}),g=suggestions.childNodes,e=0,i=f.length,c;for(suggestions.classList.remove('d-none'),f.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.result[e].doc.href,t.textContent=b.result[e].doc.title,d.textContent=b.result[e].doc.description,suggestions.appendChild(c)});g.length>i;)suggestions.removeChild(g[e])}function e(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()